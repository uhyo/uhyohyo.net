<p>HTML5になって、<strong>フォーム</strong>が大きく進化しました。そこで、それをJavaScriptで扱う方法を紹介します。どのように進化したかについてはぜひ調べてみましょう。</p>

<h3>妥当性チェック</h3>
<p>HTML5のフォームには、<dfn>妥当性</dfn>（<span lang="en">validity</span>）という概念があります。これは要するに、入力内容が正しいかどうかということです。</p>
<p>そこでまず、あるフォームの妥当性をチェックするということをやってみましょう。</p>
<p>もちろん、各<b>コントロール</b>（inputなどの入力欄）にそれぞれ妥当性があります。フォームが妥当であるということは、そのフォームに属する全てのコントロールが妥当である（入力内容が正しい）ということを表します。</p>
<p>フォームは、その入力内容が全て正しいときのみ送信が可能になります。つまり、フォームが妥当であるとは、そのフォームが送信可能な状態であるということを表します。</p>

<h4>フォームの妥当性チェック</h4>

<p>あるフォームが妥当な状態であるかどうかをJavaScriptで調べるのは簡単です。form要素のノードがあったら、そのノードの<dfn>checkValidity</dfn>というメソッド（引数なし）を呼び出すと、true（妥当である）かfalse（妥当でない）の真偽値を返します。</p>
<p>また、<dfn>reportValidity</dfn>というメソッド（引数なし）があります。これも返り値はcheckValidityと同様で、妥当ならばtrue、妥当でなければfalseです。ただし、reportValidityの場合、<em>妥当でない場合はユーザーにエラーが表示されます</em>。</p>

<p>checkValidityとreportValidityの<a href="12_2_sample.html">サンプル</a>を用意しました。サンプルの動作やサンプルのソースコードも合わせて確認してください。</p>
<p>なお、このサンプルのソースコード中ではonclick属性中のスクリプトで<code>this.form.checkValidity()</code>などとしています。</p>
<p>実は、イベントハンドラの中では<code>this</code>は<a href="3_5.html">event.currentTarget</a>と同じもの、つまりそのイベントハンドラが登録されている要素を指すことになっています。よって、今回の場合<code>this</code>はボタンのinput要素です。そして、input要素をはじめとするフォームコントロールは<dfn>form</dfn>というプロパティを持っており、これはそのコントロールが属するform要素です（なければnull）。</p>
<p>このサンプルではcheckValidityとreportValidityは同じ値を返すものの、後者はユーザーにエラーを表示するという点で動作が異なることが分かると思います。また、reportValidityにより表示されるエラーは「送信」ボタンを押したときのエラーと同じはずです。reportValidityはユーザーが慣れ親しんだUI（ブラウザに備え付けのUI）でエラーを表示することができるため、独自のエラー表示を作るよりも分かりやすいと考えられます。</p>

<h4>コントロールの妥当性チェック</h4>
<p>form要素だけでなく、input要素・select要素・button要素・fieldset要素などなどの各コントロールにも、妥当性チェックをするためのメソッドがあります。実は、こちらのほうがいろいろあって機能が豊富です。</p>
<p>まず、form要素と同様に<dfn>checkValidity</dfn>と<dfn>reportValidity</dfn>があります。これは、フォーム全体ではなく、その要素が妥当であるかどうかを判定できます。</p>
<p>ここで、これを利用したサンプルを用意してみました。「郵便番号」に7桁の数字を入力するとそれに合わせた（今回は適当ですが）住所を表示するというサンプルです。</p>
<p><a href="12_2_sample2.html">サンプル2</a></p>
<p>このサンプルでは、郵便番号のinput要素に<strong>oninput</strong>という属性があるのが分かります。onで始まるのはイベント属性なので、今回の場合<dfn>input</dfn>というイベントです。これは、ユーザーによってinput要素の入力内容が変化した場合に起こるイベントで、今回のように、フォームの入力を監視する際に役立ちます。</p>
<p>入力内容の変化を検知できるイベントとしてHTML4時代には<strong>change</strong>というイベントもありましたが、これはinput要素からフォーカスが外れないと発生しないなど使いにくいものでした。一方のinputイベントは入力内容が変化した瞬間に<small>（厳密には少し違いますが）</small>発生するため便利です。このHTML5で新しく導入されたinputイベントを利用する機会のほうが多いでしょう。</p>
<p>inputイベントの処理は下で定義された関数inpで行っています。先に説明した通り、引数は当該input要素です。</p>
<p>関数inp内ではいろいろやっていますが、結局何をやっているかというと、「郵便番号」が正しく入力されていれば「住所」のところに住所を自動で入力するというだけです。</p>
<p>「郵便番号が正しく入力されている」とは、ここでは7桁の数字が入力されているということです。それをJavaScriptでどう表現するかというと、</p>
<pre><code>input.checkValidity()</code></pre>
<p>だけです。つまり、このinputが妥当であるかどうか調べているだけです。</p>
<p>それでは「7桁の数字」の部分はどう表現しているかというと、これはHTML5の範疇ですが、実はinput要素の<strong>pattern属性</strong>に書いてあります。</p>
<pre class="language-html"><code><strong>pattern</strong>="<mark>\d{7}</mark>"</code></pre>
<p>これは見慣れた正規表現で、は「数字7桁」を表していますね。HTML5では、このように入力内容を正規表現を用いて指定できるのです。ただし、これは部分一致ではなく、全体で一致しないといけません。だから、「a1234567」のように余計な物があってはいけません。</p>
<p>pattern属性がある場合、この正規表現に入力内容がマッチするならば妥当であると判断されます。ですから、JavaScript側からはcheckValidity()で妥当性をチェックするだけでいいのです。</p>
<p>もちろん、JavaScript側で<code>/^\d{7}$/.test(input.value)</code>のようにして同様のチェックを行うことは可能です。しかし、HTMLにより妥当性を定義することによりブラウザのサポートを受けてより分かりやすいUIを作ることができます。例えば、サンプル2ではCSSにより入力内容が妥当でない場合はinput要素の背景色が赤くなります。</p>

<p>ところで、このinput要素を見ると<strong>title属性</strong>があります。</p>
<pre class="language-html"><code><mark>title</mark>="郵便番号は7桁の数字を入力して下さい。"</code></pre>
<p>このように、入力内容に制限があり複雑な場合、制限はtitle属性を用いて説明するのがよいとされています。title要素の内容はエラーメッセージとして表示されます。</p>

<p>コントロールの妥当性に関してもっと詳細な情報を取得するために、input要素等のノードには<dfn>validity</dfn>というプロパティがあります。これはValidityStateというオブジェクトのインスタンスです。</p>
<p>このオブジェクトはいくつかのプロパティを持ち、全て真偽値です。まず<dfn>valid</dfn>というプロパティは、その要素が妥当であるかどうかを返します。つまり、<code>input.checkValidity()</code>と<code>input.validity.valid</code>は同じです。</p>
<p>そして、これがfalseだった場合、すなわち妥当ではないコントロールに対しては、他のプロパティが活躍します。他のプロパティは全て、妥当ではない原因を表しています。以下に列挙します。</p>
<dl>
  <dt>valueMissing</dt>
  <dd>required属性（入力が必須）があるのに入力されていない場合true。</dd>
  <dt>typeMismatch</dt>
  <dd>type="email",type="url"の場合に、正しい書式でない場合にtrue。</dd>
  <dt>patternMismatch</dt>
  <dd>pattern属性で指定された条件に合っていない場合true。</dd>
  <dt>tooLong</dt>
  <dd>maxlength属性で決められた長さより長い場合にtrue。</dd>
  <dt>rangeUnderflow</dt>
  <dd>数値入力コントロールで、min属性よりも低い場合true。</dd>
  <dt>rangeOverflow</dt>
  <dd>数値入力コントロールでmax属性よりも高い場合true。</dd>
  <dt>stepMismatch</dt>
  <dd>数値入力コントロールで、strep属性で指定した単位とあわない場合true。</dd>
  <dt>customError</dt>
  <dd>独自エラー（後述）がある場合true。</dd>
</dl>
<p>これを用いて、妥当でない場合の細かい原因をチェックできるのです。例えばさっきの郵便番号のサンプルの場合、<code>input.validity.valueMissing</code>か<code>input.validity.patternMismatch</code>のどちらかがtrueになっていることが期待されます。</p>
<p>そして、<strong>独自エラー</strong>というものが出てきました。これは、HTMLが持つ機能だけでは表せないような複雑な条件である場合に、JavaScript側から「妥当である」とか「妥当でない」ということを決めてやることができるのです。</p>
<p>そのために使うメソッドが、コントロールのノードが持つメソッド<dfn>setCustomValidity</dfn>です。これは、引数を1つ持ち、それは<strong>エラーメッセージ</strong>です。この関数を呼び出すとエラーメッセージが設定され、その要素は妥当ではなくなります。</p>
<p>一度setCustomValidityで妥当でなくしたコントロールを再び妥当な状態に戻すには、setCustomValidityの引数を空文字列（<code>""</code>）にして呼び出します。これにより独自エラーを解除できます。</p>

<p>ということで、奮発してまたサンプルを用意しました。よくある感じで、パスワードを2回入力して一致しないとだめというやつです。</p>
<p><a href="12_2_sample3.html">サンプル</a></p>
<p>今のサンプルではinputイベントのハンドラをform要素に書いています。これは、2つのコントロールで発生したinputイベントをどちらも処理するためです。</p>
<p>今回もCSSで妥当でないコントロールが赤くなります。試してみると、2つ目のコントロールは1つ目のコントロールと入力内容が一致するときのみ妥当になります。これはJavaScriptからsetCustomValidityで制御されていることで可能になっています。</p>

<p>最後に、input要素（など）が持つ<dfn>willValidate</dfn>プロパティを紹介します。これは真偽値で、その要素が<strong>制約バリデーション候補である</strong>（妥当か妥当でないかの判断の対象となる）かどうかです。というのも、たとえばtype属性が<code>"hidden"</code>とか、あるいは<code>"button"</code>とかの場合はユーザーが入力するものではないですから、妥当であるとか妥当でないとかいう概念が無いのです。</p>

<h3>数値入力とステップ</h3>
<p>数値入力のinput（type="number", type="range"）には、ステップというものがあります。例えば、</p>
<pre class="language-html"><code>
&lt;input type="number" min="0" step="10"&gt;
</code></pre>
<p>というinput要素では、値として0,10,20,30,40,…を入力できます。</p>
<p>このようなinput要素に対しては<dfn>stepUp</dfn>及び<dfn>stepDown</dfn>というメソッドが使用できます。引数は数値1つで、引数をnとすると、n段階だけ数値を上げ/下げるメソッドです。</p>
<p>例えば上のinputで数値が0のとき、<code>input.stepUp(3)</code>を実行すると30になります。30の状態からstepDown(2)を実行すると10になるでしょう。</p>

<h3>日付入力</h3>
<p>日付入力のinput要素の場合、入力内容は日付を表す文字列（ISO 8601形式）です。このようなinput要素から、文字列よりも扱いやすい形式で値を取得できる方法があります。</p>
<p><dfn>valueAsDate</dfn>は、日付を<strong>Dateオブジェクト</strong>で取得できるプロパティです。Dateオブジェクトはこれまで紹介していませんでしたが、昔からある組み込みオブジェクトで、日付を表すものですす。</p>
<p>また<dfn>valueAsNumber</dfn>は、日付を1970年1月1日の0時からのミリ秒数で取得できます。</p>

