<% @page.title="四章第一回　文字列の操作"
@page.prev=[3,6]
@page.next=[4,2] %>
<h2>四章第一回　文字列の操作</h2>
<p>第四章では、正規表現を解説します。正規表現とは、簡単にいえば文字列がある条件に当てはまるかどうか、あるいは文字列のどの部分が当てはまるかということを調べるものです。この<b>文字列</b>というのが、第四章のトピックです。</p>
<p>今までとは違って、少しDOMから離れることになりますね。それで、正規表現について解説する前に、まず今回はその基礎となる<strong>文字列の操作</strong>について解説します。今回解説するのは基礎的なことで、<a href="11_5.html">十一章第五回</a>にも詳しい説明があります。</p>

<h3>文字列の長さ</h3>
<p>ある文字列があるとき、その「長さ」を知りたいことがあると思います。長さとは、つまり文字数のことです。そういう方法は、ちゃんとあります。</p>
<pre><code>var aaa = "abcde";
console.log(aaa.<dfn>length</dfn>);</code></pre>
<p>このサンプルでは、変数aaaに<code>"abcde"</code>を代入し、その<dfn>length</dfn>というプロパティを見ています。「5」が表示されます。試しにこのaaaの内容を変えてみると、表示されるlengthプロパティの中身もそれにあわせて変わるはずです。</p>
<p>つまり、文字列の長さを知るには、その文字列のlengthプロパティを使えばいいのです。今回の場合何の役に立つのかあまり分からないかもしれませんが、文字列処理の基本であり、たとえばinput要素に入力された文字列を処理するときなどに、役立つことがあります。ちなみに、これは数値です。</p>
<p>ちなみに、ここですごい人なら違和感を覚えるかもしれません。ここで、変数aaaに代入されている<dfn>"abcde"</dfn>は、<strong>プリミティブ値</strong>（<a href="1_2.html">一章第二回</a>）です。プリミティブ値なら、オブジェクトではないのだから、<strong>プロパティを持たない</strong>はずです。</p>
<p>しかし、この変数aaaのlengthというプロパティは、確かに存在しています。これは、実はプリミティブ値もプロパティを持つ、ということを表しているわけ<em>ではなく</em>、また特殊な事情があります。なかなか難しいので、今は解説しません（<a href="9_7.html">九章第七回</a>に説明があります）。不思議に思った人も、今はそういうものだと思っておきましょう。</p>

<h3>文字列の検索</h3>
<p>この先も、文字列がプロパティ（あるいはメソッド）を持っているような解説が続きますが、まあそういうものなので気にしないようにしましょう。</p>

<p>「文字列の検索」とは、文字列に、ある文字列が含まれているかどうかを調べるということです。次のサンプルを見てみましょう。</p>
<pre><code>var aaa = "abcde";
var idx = aaa.<dfn>indexOf</dfn>("b");
console.log(idx);
        </code></pre>
<p>変数idxに、aaa.indexOfの戻り値を代入して、それを表示しています。「1」と表示されます。</p>
<p>このindexOfは、<strong>その文字列から、引数で指定した文字列を検索して、その位置を返します</strong>。今回の場合、その文字列とは、つまりaaaです。</p>
<p>aaaは<code>"abcde"</code>で、そのうち引数の<code>"b"</code>は<strong>1文字目</strong>（JavaScriptでは、最初の文字が0文字目だから、aが0文字目、bが1文字目となります）なので、1が返されたというわけです。</p>
<p>では、もし検索した文字列が含まれていなかったらどうなのでしょう。</p>
<pre><code>var aaa = "abcde";
var idx = aaa.<dfn>indexOf</dfn>("f");
console.log(idx);
        </code></pre>
<p>この場合、aaaから<code>"f"</code>を検索していますが、fは含まれていません。実は、そういう場合、<strong>-1</strong>が返されます。これは、結構利用できます。</p>
<p>また、1文字ではない文字列も検索できます。</p>
<pre><code>var aaa = "abcde";
var idx = aaa.<dfn>indexOf</dfn>("bcd");
console.log(idx);
        </code></pre>
<p>この場合、bcdは含まれているので、<strong>先頭の文字</strong>である<code>"b"</code>の位置が返されます。つまり1です。</p>

<h3>文字列から抜き出す</h3>
<p>文字列から抜き出すとは、文字列のうち一部分だけを取得することです。いろいろな方法があります。</p>

<h4>slice・substring</h4>
<p>まず、<dfn>slice</dfn>を使う方法があります。</p>
<pre><code>var aaa = "abcde";
console.log( aaa.<dfn>slice</dfn>(1,4) );
        </code></pre>
<p><code>"bcd"</code>が表示されます。1〜3文字目だけが抜き出されました。</p>
<p>ここで、この2つの引数は、抜き出しの開始位置と終了位置を表しています。開始位置は1、つまり1文字目だから<code>b</code>です。終了位置は4文字目だから、<code>e</code>の位置になります。</p>
<p>だからbからeまでが抜き出されるように思いますが、実は<strong>終了位置の1つ手前</strong>まで抜き出されるようになっています。だからbからdまでが実際に抜き出されて、<code>"bcd"</code>になりました。</p>
<p>ちなみに、抜き出すといっても、aaaから<code>"bcd"</code>が取り除かれるというわけではありません。aaaの中身はそのままです。あくまで「指定した範囲の文字列を得る」ということです。</p>

<p>また、<dfn>substring</dfn>というものもあり、これを使っても同様に次のようにできます。</p>
<pre><code>var aaa = "abcde";
console.log( aaa.<dfn>substring</dfn>(1,4) );
        </code></pre>
<p>結果は同じです。</p>
<p>では、これらの違いはどこにあるかというと、<strong>引数に負の数を指定したとき</strong>に違いがでてきます。「-1文字目」とか「-2文字目」とか指定したときですね。当然、そんなことはありえないので、ここでどうするかがsliceとsubstringで違います。</p>
<p>まず、substringは簡単で、負の数が渡されたとき、それは<strong>0ということにします</strong>。つまり、</p>
<pre><code>aaa.substring(<mark>-2</mark>,2)
aaa.substring(0,<mark>-1</mark>)
aaa.substring(<mark>-100</mark>,3)
          </code></pre>
<p>などは、</p>
<pre><code>aaa.substring(<mark>0</mark>,2)
aaa.substring(0,<mark>0</mark>)
aaa.substring(<mark>0</mark>,3)
          </code></pre>
<p>と同義になります。</p>

<p>それに対し、sliceの場合は、負の数が渡されたとき、文字数を<strong>後ろから数えます</strong>。例えば、</p>
<pre><code>var aaa = "abcde";
console.log( aaa.slice(<mark>-3</mark>,5) );
          </code></pre>
<p>の場合、後ろから3番目の文字が開始位置で、終了位置は5文字目です。</p>
<p>ただし、注意するのが、前から普通に数える場合、最初の"a"は<strong>0番目</strong>であるのに対して、後ろから数える場合、最初の"e"は<strong>1番目</strong>になるということです。これは、-0というのは0と同じなので、-0で"e"の位置を表すことはできないからですね。</p>
<p>つまり、開始位置は"c"の位置になるということです。従って、<code>"cde"</code>が返ります。</p>

<p>ちなみに、2つめの引数は<strong>省略できます</strong>。省略した場合、終了位置は文字列の一番最後になり、文字列の一番最後まで抜き出されます。</p>

<h4>charAt</h4>
<p>1文字だけ抜き出す場合、もっと簡単なものがあります。それは<dfn>charAt</dfn>です。</p>
<pre><code>var aaa = "abcde";
console.log( aaa.<dfn>charAt</dfn>(1) );
          </code></pre>
<p>引数が1つありますね。簡単に、その引数で指定された位置の文字を返します。今回の場合、引数は1だから、1文字目、つまり<code>"b"</code>が返ります。</p>

<h3>メソッドの利用</h3>
<p>それでは、これらを利用して、実際にどんなことができるか考えてみましょう。</p>

<h4>0詰め</h4>
<p>0詰めとは、例えば、数字を5桁に統一したいとき、4桁以下の数字は<code>"00025"・"01234"</code>のように先頭に0をつけて5文字にするというものです。</p>
<p>その性質上、もともとある数字は<strong>数値</strong>でも、0詰めされてできたものは<strong>文字列</strong>になりますね。</p>
<p>例えば、このようにする方法があります。</p>
<pre><code>var num = 1234;		//0詰めする数字
var rel = "00000" + num;
var result = rel.slice(-5);	//できた文字列
console.log(result);
          </code></pre>
<p>変数resultに、0詰めされた文字列が入ります。3行目で今回解説したsliceが使われていますね。</p>
<p>まず、変数relには、<code>"00000"</code>の後にnumをくっつけています。今回の場合、<code>"000001234"</code>となります。</p>
<p>その後、その文字列からsliceで抜き出しています。開始位置は-5で、終了位置は省略されているから、最後まで抜き出されます。開始位置が-5ということは、<strong>後ろから5文字め</strong>ということです。そこから最後まで抜き出すから、結果として<strong>後ろから5文字を抜き出している</strong>ことになります。</p>
<p>今回の場合、<code>0000<mark>01234</mark></code>の部分が抜き出されます。見事、0詰めされました。</p>
<p>考え方としては、数字の前に5桁になるように0をつけるとき、</p>
<pre><code>     1234
    <mark>‾‾‾‾‾</mark>
</code></pre>
<p>のように数字の部分を右に詰めて5桁取り出したいです。だから、</p>
<pre><code><mark class="ins">00000</mark>1234
    <mark>‾‾‾‾‾</mark> 
          </code></pre>
<p>このように前に0を付け足そうというわけです。また、なぜ0を5個つけるかというと、0を5個つけておけば、<strong>必ず5文字以上になる</strong>からです。</p>
<p>最後にsliceで5文字抜き出すから、5文字以上ないと困るわけです。</p>
<p>以上が文字列の基礎の基礎です。次回は正規表現を用いた発展的な文字列操作を解説します。</p>
