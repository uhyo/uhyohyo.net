<h3>オブジェクト</h3>
<p>JavaScriptではとても重要な要素である<dfn>オブジェクト</dfn>ですが、初心者の人はこれをあまり知りません。これを知ることが「中級者」への第一歩だといえるでしょう。</p>
<p>さて、オブジェクトとは、<strong>複数の値をひとまとめにした値</strong>です。これはひじょうにざっくりした説明ですが、今はこれくらいにしておきましょう。</p>
<p>実はこの説明は、<a href="kiso6.html">基礎第六回</a>で解説した<b>配列</b>と同じ説明です。実は配列はオブジェクトの一種なのですが、それについては深く考えずにまずはオブジェクトとはどんなものかを説明します。</p>
<p>配列は、複数の値（要素といいました）をひとまとめにし、それぞれを番号で区別するというものでした。</p>
<p>一方、オブジェクトでは、ひとつひとつの値が番号ではなく<strong>名前を持っています</strong>。</p>
<p>具体的なサンプルを見てみましょう。</p>
<pre><code>var obj = <strong>new Object</strong>();
obj.aaa = "test";
obj.b = 123;
alert(obj.aaa);
alert(obj.b);</code></pre>
<p>「test」「123」が表示されます。</p>
<p>最後の2行では、「obj.aaa」「obj.b」というものを表示しています。</p>
<p>さて、この場合変数objがオブジェクトです。変数objに代入している文は、次のようになっています。</p>
<pre><code>var obj = <strong>new Object</strong>();</code></pre>
<p>この<code>new Object()</code>がオブジェクトを作成する式です。配列のときは<code>new Array</code>でしたね。「new」は実は演算子の一種で、「新しいオブジェクトを作る」という意味です（newについて詳しくは<a href="9_1.html">第九章</a>で説明します）。</p>
<p>さて、こうしてできる新しいオブジェクトは、実は<strong>値を1つも持っていません</strong>。中身がない状態です。しかし、新しい値をオブジェクトに追加することができます。それが、次の2文です。</p>
<pre><code>obj.aaa = "test";
obj.b = 123;</code></pre>
<p><code>obj.aaa</code>と<code>obj.b</code>に何の変哲もない値を代入しています。これは、配列のときでいう<code>arr[0]</code>みたいなノリで、「objの中のaaaという名前の値に<code>"test"</code>を代入する」みたいな意味になります。</p>
<p>先ほどオブジェクトは値を1つも持っていないと述べました。オブジェクトは柔軟なので、objはもともとaaaとかbとかいう値を持っていなかったのですが、代入しようとした時点で自動的に作成されます。</p>
<p>もちろん、次のように、すでにある値に再び代入して値を変えることもできます。</p>
<pre><code>var obj = <strong>new Object</strong>();
obj.aaa = "test"; // ←ここでaaaという名前の値をobjに作成
alert(obj.aaa);
obj.aaa = "foo"; // ←ここですでにあるaaaの値を書き換える
alert(obj.aaa);</code></pre>
<p>このような、オブジェクトが中に持っている値のことを<dfn>プロパティ</dfn>といいます。きわめて基本的な言葉なので、ぜひ頭に入れておきましょう。</p>
<p>さて、このプロパティの表し方を改めて書くと、次のようになります。</p>
<pre><code><var>オブジェクト</var>.<var>プロパティ名</var></code></pre>
<p>オブジェクトとプロパティ名が「<kbd>.</kbd>」（ピリオド）でつながっています。</p>
<p>つまり、上のサンプルで「obj.aaa」は「オブジェクトobjのプロパティaaa」、「obj.b」は「オブジェクトobjのプロパティb」を表していたことになります。これらは、上で見たように、普通の変数と同じように扱う、すなわち代入したり値を取得したりすることができます。</p>
<p>ただし、新しいプロパティを作るときであっても、新しく「変数」を作っているわけではないので、代入するときに「var」はつけません。</p>

<p>また、プロパティの表し方には<strong>別の書き方</strong>があります。次のような書き方です。</p>
<pre><code><var>オブジェクト名</var>["プロパティ名"]</code></pre>
<p>オブジェクトのあとに<code>[ 〜 ]</code>でプロパティ名を囲んでくっつけています。しかし、ここで注意してほしいのが、今回はプロパティ名が<strong>文字列</strong>だということです。</p>
<p>つまり、<code>obj.aaa</code>や<code>obj.b</code>は<code>obj["aaa"]</code>や<code>obj["b"]</code>のようにも書けるということです。この形は、プロパティ名が変数に入っている場合などに役立ちます。</p>
<p>また、この書き方は<a href="kiso6.html">基礎第六回</a>で紹介した配列変数の添字の書き方と同じですね。実は、配列変数も特殊なオブジェクトなのです。つまり、arrを配列としたとき、<code>arr[0]</code>はarrの0番目の要素と紹介しましたが、実はarrの「0」という名前のプロパティを参照していたのです。ただし、注意すべきことは、このように数字だけの名前のプロパティは、<code>arr.<mark>0</mark></code>の形で書けません（文法エラーになります）。<code>arr[0]</code>の形でのみ参照できます。</p>
<p>さらに、理解度の高い人はある不自然さに気づいたことでしょう。先ほど<code>[ ]</code>の中身は文字列であると紹介したのに、<code>0</code>は文字列ではなく数値です。このような場合、文字列が必要な場面で数値が渡されたことになるので、数値は文字列に変換されます。すなわち、<code>arr[0]</code>とは<code>arr["0"]</code>と同じ意味となります。</p>
<p>しかし、配列を扱う場合、添字が数値であるという理解のほうが分かりやすいため、いちいち<code>arr["0"]</code>などと書かずに<code>arr[0]</code>と書かれるのが普通です。</p>
<p>なお、<code>arr.length</code>で配列の長さが得られますが、これも配列のlengthというプロパティを参照しているという理解ができます。配列はオブジェクトとしては特殊なので、配列が操作されるとプロパティlengthが自動で書き換わるのです<small>（実はこの説明も厳密には正しくないのですが、そういうものだと思っておきましょう）。</small></p>
<p>とりあえず、オブジェクトの基礎の解説はこれで終了します。</p>

