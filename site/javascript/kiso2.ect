<% @page.title="基礎第二回"
@page.prev="kiso1.html"
@page.next="kiso3.html" %>
<h2>基礎第二回</h2>
<p>JavaScriptには、<dfn>変数</dfn>という重要な要素があります。数学に出てきそうな言葉ですが、あまり関係はありません。</p>
<p>変数とは、何かの値を自由に保存しておくものです。意味がわからなくても、とりあえず次のサンプルを実行してみましょう。（今回から、HTML部分を省略してJavaScript部分のみ掲載します。前回のHTMLのJavaScript部分だけ書き換えるなどして実行してみましょう。）</p>
<pre><code>a = 3;
alert(a);
</code></pre>
<p>「3」というアラートが出ます。</p>
<p>アラートを出しているのは<code>alert(a);</code>の文であることは分かると思いますが、引数が「3」や「"3"」ではなく「a」です。しかも前回のように<kbd>"</kbd>で囲まれていません。これではエラーが出るはずなのに、なぜか「3」が表示されます。</p>
<p>予想はつくと思いますが、その理由はその前の文、<code>a = 3;</code>にあります。単語や記号の間にスペースがありますが、これは見やすさのためなので、<code>a=3;</code>のように間をあけなくても構いません。とはいっても、プログラムが大きくなってくると見やすさというのも重要です。</p>

<p>さて、どうやらこの文では「a」というものが関わっているようです。alertの引数もaです。予想はつきますが、このaこそが変数です。</p>
<p>では、この文の意味ですが、この文では「aに3を<dfn>代入する</dfn>」ということをしています。</p>
<p>aに3を代入するとは、「aが3を表すようにする」ということです。意味が分かりにくいですが、例えばaを箱と考えると分かりやすいです。aという箱（変数）に3を入れると、中身をそのまま使うかわりに箱ごと使うことができます。</p>
<p>つまり、aに3を代入したことによって、aを3として使えるようになったということです。</p>
<p>変数の何が良いのかよく分からないと思いますが、変数の良い点は<strong>中身を入れ替えることができること</strong>です。次のサンプルを見てみましょう。</p>
<pre><code>a = 3;
alert(a);
a = 4;
alert(a);
a = 5;
alert(a);
</code></pre>
<p>上から順に実行されるので、アラートが連続して3回出ます。3回とも「a」が引数なのですが、出たアラートは「3」「4」「5」と数字が違いました。</p>
<p>これは、aに数値を代入することでaの中身が変わっているからです。</p>
<p>この場合はあまり変数の利点を生かせていませんが、そのうち変数を有効活用できる場面が多く出てきます。</p>
<p>ちなみに、今回は「a」ですが、この変数の名前は自由です。プログラムが複雑になってくると、複数の変数を使うことも当たり前になってきます。</p>
<p>ただし、だからといって実はどんな名前でもいいわけではありません。記号などは変数名に使えないことがあります。また、変数名の先頭（最初の文字）が数字であってはいけません。</p>
<p>ただし、日本語を変数名に使ったりすることはできます。そうはいっても、やはりプログラムの共通語は英語だし、アルファベットの変数名をつけておくのが無難でしょう。</p>
<pre><code><mark>あいう</mark> = 3;
alert(<mark>あいう</mark>);
</code></pre>

<h3>数値の計算</h3>
<p>JavaScriptは数値の計算もできます。次のサンプルを見てみましょう。</p>
<pre><code>a = 3 + 4;
alert(a);
a = a * 2;
alert(a);
</code></pre>
<p>実行すると、まず「7」が出てその後「14」が出ます。alert関数の引数はまた変数のaですが、その前のaに値を代入する部分が少し違っています。</p>
<p>1回目は<code>a = 3 + 4;</code>のように代入されています。これには処理の順番があって、まず<code>3 + 4</code>が処理されます。ここで、真ん中の「<kbd>+</kbd>」は<dfn>演算子</dfn>といいます。</p>
<p>この<kbd>+</kbd>は、左と右の2つを足したものを<dfn>返し</dfn>ます。演算子が作用する値（この場合<kbd>+</kbd>演算子の左と右の値）を<dfn>オペランド</dfn>といいます。</p>
<p>演算子が値を返すとはどういうことかというと、その部分が演算の結果に置き換わるということです。いま、<code>a = 3 + 4;</code>の「3 + 4」が処理されます。演算結果（計算結果）は、当然7です。したがって、次のようになります。</p>
        <pre><code>a = <mark class="ins">7</mark>;</code></pre>
<p>これが処理されて、aに7が代入されるので、alertで7が表示されるというわけです。</p>
<p>他に、<kbd>「-」「*」「/」「%」</kbd>などがあります。<kbd>-</kbd>は引き算で、<kbd>*</kbd>は掛け算、<kbd>/</kbd>は割り算です。<kbd>%</kbd>は見慣れないものですが、「左オペランドを右オペランドで割った余り」を返します。</p>

<p>それを踏まえて、2回目のaへの代入を見てみます。</p>
        <pre><code>a = a * 2;</code></pre>
<p>まず処理されるのは</p>
        <pre><code>a * 2</code></pre>
<p>です。左オペランドが変数aですが、当然変数を使うこともできます。aはいま7なので、「7 * 2」が処理されて14になります。</p>
        <pre><code>a = <mark class="ins">14</mark>;</code></pre>
<p>したがって、aには14が代入されます。</p>

<h3>演算子</h3>
<p>演算子は、先に紹介したものの他にもたくさん種類があります。<kbd>「+」「-」「*」「/」「%」</kbd>の5つは、四則演算（足す・引く・かける・割るの4つの計算）を表す<dfn>算術演算子</dfn>といいます。</p>
<p>他に<dfn>代入演算子</dfn>という種類の演算子があります。<strong>代入</strong>をする演算子です。代表的なものは、先に紹介した「<kbd>=</kbd>」です。この<kbd>=</kbd>も演算子の一種だったのです。</p>
<p><kbd>=</kbd>は、左オペランドに右オペランドを代入します。<code>a = 3;</code>の場合、左のaに右の3を代入しているというわけです。</p>
<p>また、<strong>演算子は必ず何かを返します</strong>。算術演算子の場合その演算結果を返しますが、代入演算子は何を返すのでしょうか。次のサンプルで実験してみます。</p>
        <pre><code>alert(a = 5);</code></pre>
<p>この場合alertの引数に直接演算子などの計算（<dfn>式</dfn>といいます）が入っていますが、alertを呼び出す際にその引数の中が先に処理されるので、問題なく処理できます。</p>
<p>さて、試してみると「5」と出ます。つまり<strong>「a = 5」が5を返した</strong>ということになります。</p>
<p>実は、代入演算子<kbd>=</kbd>は、<strong>代入された値を返す</strong>のでした。つまり、実は次のような処理になります。</p>
<pre><code>a = 5;
↓
<mark class="ins">5</mark>;
        </code></pre>
<p>代入演算子が5を返すので、最後はこのようになります。この「5;」はただ「5です」と言っているだけで何の意味も持たないので、ここでこの文の処理が終わります。</p>

<h4>代入演算子の種類</h4>
<p>代入演算子には、他にも種類があります。<kbd>「+=」「-=」「*=」「/=」「%=」</kbd>などがあります。このように、演算子は2文字以上になる場合もあります。</p>
<p>この5種の演算子は、先に紹介した算術演算子に「<kbd>=</kbd>」をくっつけた形です。次のサンプルを見てみましょう。</p>
<pre><code>a = 3;
a -= 1;
alert(a);
</code></pre>
<p>「a = 3;」でaに3を代入しています。その後「<kbd>-=</kbd>」でaに何かを代入して、アラートで表示されたaの値は「2」です。</p>
<p>実は、この<code>a -= 1;</code>は、<code>a = a - 1;</code>と同じ意味です。つまり、「<strong>aから1を引いた値を代入する</strong>」という意味です。</p>
<p>もっとわかりやすくすると、<kbd>-=</kbd>は「左オペランドの変数から右オペランドの値を引く」ということになります。上のサンプルだと、aに3が代入されていた所から1を引き、aには2が代入された状態になります。<kbd>+=
    *=,/=,%=</kbd>も同じように対応しています。</p>

<h4>演算子の優先順位</h4>
<p>演算子には優先順位、つまり処理する順番があります。先の算術演算子と代入演算子を組み合わせた式でも、次のようになってしまうことは<strong>ありません</strong>。</p>
<pre><code>a = 3 + 5;
↓
<mark class="ins">3</mark>     + 5;
↓
<mark class="ins">8</mark>; </code></pre>
<p>この場合だと最終的にaには3が代入されていることになりますが、実際はちゃんと8が代入されています。</p>
<p>つまり、<strong>代入演算子よりも算術演算子のほうが優先順位が高い（先に処理される）</strong>のです。</p>
<p>算術演算子同士にもこういうことはあります。現実でも、足し算引き算より掛け算割り算のほうを先に計算するのは当たり前の話です。これは、JavaScriptでも同じです。</p>
<pre><code>3 + 5 * 2
  ↓
3 + <mark class="ins">10</mark>
  ↓
<mark class="ins">13</mark></code></pre>
<p>また、優先順位が同じ場合、どちら側から計算していくかも決まっています。現実でも、四則演算なら普通左から計算していきますね。</p>
<pre><code>1 + 4 / 2 + 3
1 + <mark class="ins">2</mark>     + 3
<mark class="ins">3</mark>         + 3
<mark class="ins">6</mark></code></pre>
<p>しかし、実は右から順番に計算していくものもあります。<strong>代入演算子</strong>がそれです。そのため、次のようなことができます。</p>
<pre><code>a = b = c = d = 3
a = b = c = <mark class="ins">3</mark>
a = b = <mark class="ins">3</mark>
a = <mark class="ins">3</mark>
<mark class="ins">3</mark></code></pre>
<p>右から順に代入されていき、a,b,c,d全てに3が代入されました。</p>
