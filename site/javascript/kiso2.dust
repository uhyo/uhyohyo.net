<p>JavaScriptには、<dfn>変数</dfn>という重要な要素があります。数学に出てきそうな言葉ですが、あまり関係はありません。</p>
<p>変数とは、何かの値を自由に保存しておくものです。意味がわからなくても、とりあえず次のサンプルを実行してみてください。</p>
<pre><code>a = 3;
alert(a);
</code></pre>
<p>実行する方法は、前回のHTMLのJavaScript部分を書き換えるのもいいですが、もう少し便利な方法があります。お使いのブラウザで、F12キーを押してください。<small>（ブラウザによっては方法が異なるかもしれません。とにかく、デベロッパーコンソールを出してください。）</small>その後、Escキーを押したりすると、コンソール(Console)が出ます。コンソールは、JavaScriptプログラムを入力するとその場で実行することができます。大抵入力欄は1行ですが、1行ずつ入力しなくても、複数行をコピー＆ペーストすると全部実行してくれます。コンソールは自分でHTMLを用意しなくてもJavaScriptを動かすことができるので便利です。また、入力欄に打ち込むことで、次々と追加でプログラムを実行することができます。活用してください。</p>
<p>さて、上のプログラムは実行すると「3」というアラートが出ます。</p>
<p>アラートを出しているのは<code>alert(a);</code>の文であることは分かると思いますが、引数が「3」や「"3"」ではなく「a」です。しかも前回のように<kbd>"</kbd>で囲まれていません。これは今までに解説していないパターンですが、なぜか「3」が表示されます。</p>
<p>予想はつくと思いますが、その理由はその前の文、<code>a = 3;</code>にあります。単語や記号の間にスペースがありますが、これは見やすさのためなので、<code>a=3;</code>のように間をあけなくても構いません。とはいっても、プログラムが大きくなってくると見やすさというのも重要です。</p>

<p>さて、どうやらこの文では「a」というものが関わっているようです。alertの引数もaです。予想はつきますが、このaこそが変数です。</p>
<p>では、この文<code>a = 3;</code>の意味ですが、この文では「aに3を<dfn>代入する</dfn>」ということをしています。</p>
<p>aに3を代入するとは、「aが3を表すようにする」ということです。意味が分かりにくいですが、例えばaを箱と考えると分かりやすいです。aという箱（変数）に3を入れると、中身をそのまま使うかわりに箱ごと使うことができます。</p>
<p>つまり、aに3を代入したことによって、aを3として使えるようになったということです。</p>
<p>変数の何が良いのかよく分からないと思いますが、変数の良い点は<strong>中身を入れ替えることができること</strong>です<small>（ただし、中身を入れ替えられない変数もあります。だいぶ先ですが、<a href="./16_3.html">第十六章第三回</a>を参照。）</small>。次のサンプルを見てみましょう。</p>
<pre><code>a = 3;
alert(a);
a = 4;
alert(a);
a = "にゃー";
alert(a);
</code></pre>
<p>上から順に実行されるので、アラートが連続して3回出ます。3回とも「a」が引数なのですが、出たアラートは「3」「4」「にゃー」と毎回違いました。</p>
<p>これは、aに値を代入することでaの中身が変わっているからです。既に中身が入っている変数に再び代入すると、新しい値で中身が置き換わります。</p>
<p>この場合はあまり変数の利点を生かせていませんが、そのうち変数を有効活用できる場面が多く出てきます。</p>
<p>ちなみに、今回は「a」ですが、この変数の名前は自由です。プログラムが複雑になってくると、たくさんの変数を使うことになります。変数にはその用途が分かりやすい名前をつけるのが作法であるとされています。</p>
<p>なお、記号などは変数名に使えないことがあります。また、変数名の先頭（最初の文字）が数字であってはいけません。</p>
<p>ちなみに、日本語を変数名に使ったりすることはできます。そうはいっても、やはりプログラムの共通語は英語だし、アルファベットの変数名をつけておくのが無難でしょう。</p>
<pre><code><mark>あいう</mark> = 3;
alert(<mark>あいう</mark>);
</code></pre>

<h3>数値の計算</h3>
<p>JavaScriptは数値の計算ができます。次のサンプルを見てみましょう。</p>
<pre><code>a = 3 + 4;
alert(a);
a = a * 2;
alert(a);
alert(a / 7);
</code></pre>
<p>実行すると、「7」「14」「2」と出ます。最初の2回のalert関数の引数はまた変数のaですが、その前のaに値を代入する部分が少し違っています。</p>
<p>1回目は<code>a = 3 + 4;</code>のように代入されています。これには処理の順番があって、まず<code>3 + 4</code>が処理されます。ここで、真ん中の「<kbd>+</kbd>」は<dfn>演算子</dfn>といいます。</p>
<p>この<kbd>+</kbd>は、左と右の2つを足したものを<dfn>返し</dfn>ます。演算子が作用する値（この場合<kbd>+</kbd>演算子の左と右の値）を<dfn>オペランド</dfn>といいます。</p>
<p>演算子が値を返すとはどういうことかというと、その部分が計算されて、その結果に置き換わるということです。いま、<code>a = 3 + 4;</code>の「3 + 4」が処理されます。計算結果は、当然7です。したがって、次のようになります。</p>
<pre><code>a = <mark class="ins">7</mark>;</code></pre>
<p>これが処理されて、aに7が代入されるので、alertで7が表示されるというわけです。</p>
<p>演算子は他に<kbd>「-」「*」「/」「%」</kbd>などがあります。<kbd>-</kbd>は引き算で、<kbd>*</kbd>は掛け算、<kbd>/</kbd>は割り算です。<kbd>%</kbd>は見慣れないものですが、「左オペランドを右オペランドで割った余り」を返します。</p>

<p>それを踏まえて、2回目のaへの代入を見てみます。</p>
<pre><code>a = a * 2;</code></pre>
<p>まず処理されるのは</p>
<pre><code>a * 2</code></pre>
<p>です。左オペランドが変数aですが、当然変数を使うこともできます。aはいま7なので、「7 * 2」が処理されて14になります。</p>
<pre><code>a = <mark class="ins">14</mark>;</code></pre>
<p>したがって、aには14が代入され、<code>alert(a);</code>では「14」が表示されます。</p>
<p>最後の行は、alertの引数が<code>a</code>などではなく、<code>a / 7</code>となっています。</p>
<p>実は、関数の引数にはこのように<dfn>式</dfn>を与えることができます。式とは、演算子などを用いて表されたプログラムで、何らかの結果を返すものを指します。式<code>a / 7</code>が計算されると2になります。よって、alertの引数は2となり「2」が表示されたのです。</p>
<p>そう考えると、先ほどまでalertの引数に渡されていた<code>a</code>も式の一種であることが分かります。変数名それ自体も式であり、その働きは「変数の中身を返す」ということになります。</p>

<h3>演算子</h3>
<p>演算子は、先に紹介したものの他にもたくさん種類があります。<kbd>「+」「-」「*」「/」「%」</kbd>の5つは、四則演算（足す・引く・かける・割るの4つの計算）を表す<dfn>算術演算子</dfn>といいます。</p>
<p>他に<dfn>代入演算子</dfn>という種類の演算子があります。<strong>代入</strong>をする演算子です。代表的なものは、既に出てきている「<kbd>=</kbd>」です。この<kbd>=</kbd>も演算子の一種だったのです。</p>
<p><kbd>=</kbd>は、左オペランドに右オペランドを代入するという働きがあります。<code>a = 3;</code>の場合、<kbd>=</kbd>演算子の働きにより、左のaに右の3を代入しているというわけです。</p>
<p>また、<strong>演算子は必ず何かを返します</strong>。算術演算子の場合その演算結果を返しますが、代入演算子は何を返すのでしょうか。次のサンプルで実験してみます。</p>
<pre><code>alert(a = 5);</code></pre>
<p>先ほど説明したとおり関数の引数には式を与えることができます。<kbd>=</kbd>は演算子ですから、<code>a = 5</code>は式ということになります。</p>
<p>さて、試してみると「5」と出ます。つまり<strong><code>a = 5</code>が5を返した</strong>ということになります。</p>
<p>実は、代入演算子<kbd>=</kbd>は、<strong>代入された値を返す</strong>のでした。つまり、次のような処理が行われたことになります。</p>
<pre><code>alert(a = 5);
↓
alert(<mark class="ins">5</mark>);
</code></pre>
<p>もちろん代入演算子ですから、この過程でaには5がちゃんと代入されています。続けて<code>alert(a);</code>などとしてみると確かめられます。</p>
<p>ところで、さっきまで変数への代入は次のように行なってきました。</p>
<pre><code>a = 5;</code></pre>
<p><code>a = 5</code>が式であることを踏まえると、この文は<code><mark>式</mark>;</code>という形をしていることが分かります。<small>（最後が<kbd>;</kbd>で終わるのが<b>文</b>であることを思い出しましょう。）</small></p>
<p>他の形をした文もあるのですが、<code>式;</code>の形の文の意味は「式を計算するだけ」です。つまり、<code>a = 5;</code>という文は、より正確には<code>a = 5</code>という式を計算していたことになります。なお、式の返り値はとくに意味がありません。</p>
<p>ですから、他の式をここに入れて、<code>a;</code>とか、<code>3 + 4;</code>といった文も可能です。ただし、計算の結果はとくに使われずに捨てられるので、これらの文は意味がありません。<code>a = 5;</code>の場合、演算子<kbd>=</kbd>に値を返す以外に、変数に値を代入するという効果があったので意味のある文になっています。このように、式を返す以外の処理を<b>副作用</b>といいます。</p>

<h4>代入演算子の種類</h4>
<p>代入演算子には、他にも種類があります。<kbd>「+=」「-=」「*=」「/=」「%=」</kbd>などがあります。このように、演算子は2文字以上になる場合もあります。</p>
<p>この5種の演算子は、先に紹介した算術演算子に「<kbd>=</kbd>」をくっつけた形です。次のサンプルを見てみましょう。</p>
<pre><code>a = 3;
a -= 1;
alert(a);
</code></pre>
<p>「a = 3;」でaに3を代入しています。その後「<kbd>-=</kbd>」でaに何かを代入して、アラートで表示されたaの値は「2」です。</p>
<p>実は、この<code>a -= 1;</code>は、<code>a = a - 1;</code>と同じ意味です。つまり、「<strong>aから1を引いた値を代入する</strong>」という意味です。</p>
<p>もっとわかりやすくすると、<kbd>-=</kbd>は「左オペランドの変数から右オペランドの値を引く」ということになります。上のサンプルだと、aに3が代入されていた所から1を引き、aには2が代入された状態になります。<kbd>+=,*=,/=,%=</kbd>も同じように対応しています。</p>

<h4>演算子の優先順位</h4>
<p>演算子には優先順位、つまり処理する順番があります。次の例を考えてみましょう。</p>
<pre><code>a = 3 + 5;</code></pre>
<p>これは次の形をしていることに気付きます。</p>
<pre><code>a = <mark>式</mark>;</code></pre>
<p>ところが、<code>a = 3</code>が式であることを踏まえると、次のような解釈もできるのではないでしょうか。</p>
<pre><code><mark>式</mark> + 5;</code></pre>
<p>この2つの解釈のどちらが正しいかということを定めるのが、演算子の優先順位です。上の2つの例は、<kbd>+</kbd>を先に処理するのか、それとも<kbd>=</kbd>を先に処理するのかという違いと見ることができます。</p>

<p>結論を述べると、<strong>代入演算子よりも算術演算子のほうが優先順位が高い（先に処理される）</strong>です。つまり、<code>a = <mark>式</mark>;</code>という解釈が正しく、<code><mark>式</mark> + 5;</code>は間違いということです。上の例では、aには3ではなく8が代入されます。</p>
<p>算術演算子同士にもこういうことはあります。現実でも、足し算引き算より掛け算割り算のほうを先に計算するのは当たり前の話です。これは、JavaScriptでも同じです。</p>
<pre><code>3 + 5 * 2
  ↓
3 + <mark class="ins">10</mark>
  ↓
<mark class="ins">13</mark></code></pre>
<p>また、優先順位が同じ場合、どちら側から計算していくかも決まっています。現実でも、四則演算なら普通左から計算していきますね。</p>
<pre><code>1 + 4 / 2 + 3
1 + <mark class="ins">2</mark>     + 3
<mark class="ins">3</mark>         + 3
<mark class="ins">6</mark></code></pre>
<p>しかし、実は右から順番に計算していくものもあります。<strong>代入演算子</strong>がそれです。そのため、次のようなことができます。</p>
<pre><code>a = b = c = d = 3
a = b = c = <mark class="ins">3</mark>
a = b = <mark class="ins">3</mark>
a = <mark class="ins">3</mark>
<mark class="ins">3</mark></code></pre>
<p>右から順に代入されていき、a,b,c,d全てに3が代入されました。</p>
