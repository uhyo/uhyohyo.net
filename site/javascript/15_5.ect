<% @page.title="十五章第五回　User Timing"
@page.prev=[15,4]
@page.next=null %>
<h2>十五章第五回　User Timing</h2>
<p><a href="15_4.html">前回</a>の続きです。前回はPerformanceEntryオブジェクトの具体例としてPerformanceRequestTimingオブジェクトを紹介しました。今回はもう一つの例です。</p>

<p>User Timingというのは、時間計測のタイミングをプログラムから指示できるものです。つまり、JavaScriptの処理に時間がかかる場合、User Timingを利用して時間を計測することで、どこに時間がかかっているかなどを見極めることができます。JavaScriptでも<b>Dateオブジェクト</b>を用いて現在時刻を取得し、それを用いて時間の計測をすることも可能ですが、User Timingではより高精度な計測が可能であるとされています。</p>
<p>前回のPerformanceRequestTimingのようにページから読み込むものは、JavaScriptプログラムからいじれる範疇ではないためそれ用のAPIが用意されていると考えられます。逆に、JavaScriptプログラムで扱える部分の時間計測はこのUser Timingにより可能なわけです。</p>

<h3>PerformanceMark</h3>
<p>User Timingにより行えることの一つは、<strong>マークを登録すること</strong>です。マークというのは、ある瞬間の時刻に名前を付けて保存しておけるものです。それは、performanceが持つ<dfn>mark</dfn>メソッドにより行ないます。引数はマークの名前です。例えば、</p>
<pre><code>performance.<mark>mark</mark>("mymark");</code></pre>
<p>のようにすると、その瞬間の時刻が"mymark"という名前でperformanceオブジェクトに登録されます。</p>
<p>時刻が登録されるとはどういうことかというと、もちろん<strong>PerformanceEntryが登録される</strong>のです。markメソッドにより登録されるPerformanceEntryオブジェクトのことを<dfn>PerformanceMark</dfn>といいます。特に新しいプロパティはありませんが、PerformanceEntryが持つ各プロパティは次のようにセットされます。</p>
<dl>
  <dt>name</dt>
  <dd>markメソッドに渡された、マークの名前です。</dd>
  <dt>entryType</dt>
  <dd><code>"mark"</code>になります。</dd>
  <dt>startTime</dt>
  <dd>マークが作成された瞬間の時刻です。</dd>
  <dt>duration</dt>
  <dd>0になります。</dd>
</dl>
<p>durationが0になるのは、今回は時間の範囲を表すのではなくある点での時刻を表すからですね。前回のPerformanceRequestTimingはやけに大量のプロパティがありましたが、今回は追加はなくこの4つだけですっきりしています。startTimeは<a href="15_4.html">前回</a>同様、<code>performance.timing.navigationStart</code>を0とする時間になっています。</p>
<p>ここまでを試してみましょう。</p>
<pre><code>performance.<mark>mark</mark>("mymark");
console.log(performance.getEntriesByName("mymark")[0]);</code></pre>
<p>markメソッドによって追加されたPerformanceMarkオブジェクトはPerformanceEntryを継承したものなので、当然<a href="15_3.html">十五回三回</a>で紹介したgetEntriesなどのメソッドで得ることができます。</p>
<p>なお、同じ名前で複数回markメソッドを呼び出した場合、別々のPerformanceMarkオブジェクトとして複数登録されます。</p>
<p>他にperformanceは<dfn>clearMarks</dfn>メソッドを持っています。これは引数にマークの名前を渡すことで、そのPerformanceMarkを除去します。つまり、上のサンプルの実行後にマークを除去するには、</p>
<pre><code>performance.<mark>clearMarks</mark>("mymark");</code></pre>
<p>とします。</p>
<p>なお、引数を省略して呼び出すこともできます。その場合は名前に関わらず全てのマークを除去します。</p>

<h3>PerformanceMeasure</h3>
<p>User Timingでは、ある瞬間の時刻を記録する他にももう一つできることができます。それは、2つのマークの間の時間を測ることです。時間を測るのは、今度はmarkメソッドではなく<dfn>measure</dfn>メソッドでできるのですが、実は計測した結果も一種のPerformanceEntryとしてPerformanceに登録されます。このオブジェクトを<dfn>PerformanceMeasure</dfn>といいます。</p>
<p>measureメソッドは3つの引数をとります。1つ目はmeasureの名前、2つ目は開始点のマークの名前、3つ目は終了点のマークの名前です。これにより、開始点の時刻と終了点の時刻の差がとられ、PerformanceMeasureオブジェクトとして登録されます。このオブジェクトのプロパティは以下のようにセットされます。</p>
<dl>
  <dt>name</dt>
  <dd>measureメソッドに渡された名前です。</dd>
  <dt>entryType</dt>
  <dd><code>"measure"</code>になります。</dd>
  <dt>startTime</dt>
  <dd>開始点の時刻です。</dd>
  <dt>duration</dt>
  <dd>開始点の時刻と終了点の時刻の差です。</dd>
</dl>
<p>つまり、目的の時間はdurationプロパティから得られるということですね。</p>
<p>なお、開始点と終了点はマークの名前を指定しますが、同じ名前で複数のマークが登録されていた場合、最も新しいものが使用されます。</p>

<p>ここまでの内容をまとめたのが<a href="15_5_sample.html">サンプル1</a>です。一般に、innerHTML（<a href="2_3.html">二章第三回</a>）を書き換えることでHTMLを生成するのは速度が遅いとされています。HTMLの解析・DOMの再構築が必要になるからです。そこで、innerHTMLへの代入を10000回行なってかかった時間を測定してみました。筆者の環境だと80ミリ秒前後でした。</p>

<p>ちなみに、innerHTMLを使うかわりにcreateElementなどを使って同じことを行なって時間を測る<a href="15_5_sample2.html">サンプル2</a>もついでに用意してみました。innerHTMLを使うのに比べてソースが煩雑になった印象を受けますが、自分の場合は20〜30ミリ秒ほど動作が速くなりました。</p>

<p>これらのサンプルでは、markメソッドはmeasureメソッドでマークを利用するためだけに実行されており、markメソッドにより追加されたPerformanceMarkオブジェクトを直接は利用していませんね。</p>
<p>ちなみに、measureメソッドの第二引数・第三引数はマーク名ですが、他にもPerformanceTimingのプロパティ（<a href="15_2.html">十五章第二回</a>で解説）名を指定することで、そのタイミングとの差をとることができます。たとえば、</p>
<pre><code>performance.measure("test","<mark>navigationStart</mark>","end");</code></pre>
<p>のようなことが可能です。</p>
<p>また、第三引数を省略した場合は、第二引数で指定した開始点と現在時刻の差が得られます。さらに、第二引数も省略した場合、navigationStartから現在時刻までの差となります。</p>
<p>そのため前述のサンプルでは、実はendマークを登録した直後にmeasureメソッドを実行しているので、endマークを登録してそれを利用するかわりにmeasureメソッドの第三引数の省略を利用することもできました。</p>

<p>最後に、<dfn>clearMeasures</dfn>メソッドを紹介しておきます。これは先に紹介したclearMarksメソッドのmeasure版で、動作は同じです。引数が省略できる点も同じです。</p>

<h3>補足</h3>
<p>じつは、<b>推奨マーク名</b>というものが決まっています。ある特定のタイミングをマークにする場合は、この名前をおすすめするというものです。以下のマーク名が指定されています。</p>
<dl>
  <dt>mark_fully_loaded</dt>
  <dd>ページの読み込みが完全に完了したタイミング。</dd>
  <dt>mark_fully_visible</dt>
  <dd>ページがユーザーに利用可能になったタイミング。</dd>
  <dt>mark_above_the_fold</dt>
  <dd>ページの全内容が表示されたタイミング。</dd>
  <dt>mark_time_to_user_action</dt>
  <dd>ページでユーザーが初めて何か行動したタイミング。</dd>
</dl>
<p>いずれも、実際にページの動作の軽快さなどを評価するにあたってはよくつかわれる指標なのでしょう。</p>
<p>ただし、これは強制ではありませんし、推奨マーク名を使ったからといって何か嬉しい点があるわけではありません。</p>
<p>ただ、そう定められているので一応紹介だけしておきます。</p>
