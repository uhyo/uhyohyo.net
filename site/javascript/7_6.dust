<h3>仕様を決める</h3>
<p>今回は、前回作ったサンプルを改良しましょう。前回のサンプルはこれです。</p>
<pre class="line-numbers"><code>
var walker = document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,
  function(node){
    if(/^H[1-6]$/.test(node.tagName)){
      return NodeFilter.FILTER_ACCEPT;
    }else{
      return NodeFilter.FILTER_SKIP;
    }
  },
false);
var node;
var ol = document.createElement('ol');
var number = 1;
while(node=walker.nextNode()){
  var result = node.tagName.match(/^H([1-6])$/);
  var itsnumber = parseInt(result[1]);

  if(number &lt; itsnumber){
    //数字が大きい
    var newol = document.createElement('ol');
    ol.lastChild.appendChild(newol);
    ol = newol;	//追加先を新しいolにする

  }else if(number &gt; itsnumber){
    //数字が小さい
    for(var i=0;i&lt;number-itsnumber;i++){
      ol = ol.parentNode.parentNode;
    }
  }
  number = itsnumber;	//「現在の番号」を更新

  var newli = document.createElement('li');
  newli.textContent=node.textContent;
  ol.appendChild(newli);
}
while(ol.parentNode){
  ol=ol.parentNode;
}
document.body.appendChild(ol);
</code></pre>
<p>ページにある見出しを一覧にするものでした。しかし、実はこれではあまり実用性がありませんね。今回、リストのそれぞれに<strong>リンク</strong>を付けて、クリックするとその見出しの場所が見られるというようにしましょう。</p>
<p>さて、その方法ですが、そもそもリンクをクリックするとその場所に移動するというのは、次のようにします。</p>
<pre class="language-html"><code>
&lt;p&gt;あああああああああ。<mark>&lt;a href="<strong>#aaa</strong>"&gt;</mark>いいい<mark>&lt;/a&gt;</mark>&lt;/p&gt;
&lt;p&gt;うううううう&lt;/p&gt;
&lt;p&gt;ええええええええええええええ&lt;/p&gt;
&lt;p <mark>id="<strong>aaa</strong>"</mark>&gt;ここ&lt;/p&gt;
</code></pre>
<p>a要素のhref属性には、<strong>#aaa</strong>と、先頭にシャープが付いたリンク先が指定されています。このような書き方をすると、同じページのaaaという名前のところに移動します。また、URLの後に#をつけると、そのページの該当部分に移動します。</p>
<p>では、どのようにしてページの一部に名前をつけるかというと、<strong>id属性</strong>を使用します。</p>
<p>これを今回のサンプルに使うと、たとえば</p>
<pre class="language-html"><code>
&lt;h1&gt;見出し&lt;/h1&gt;
&lt;p&gt;あああ&lt;/p&gt;

&lt;h1&gt;見出し&lt;/h1&gt;
&lt;p&gt;あああ&lt;/p&gt;
</code></pre>
<p>という見出しがあったとき、これを</p>
<pre class="language-html"><code>
&lt;h1 <mark class="ins">id="h1_1"</mark>&gt;見出し&lt;/h1&gt;
&lt;p&gt;あああ&lt;/p&gt;

&lt;h1 <mark class="ins">id="h1_2"</mark>&gt;見出し&lt;/h1&gt;
&lt;p&gt;あああ&lt;/p&gt;
</code></pre>
<p>のようにして、リストのほうは</p>
<pre class="language-html"><code>
&lt;ul&gt;
  &lt;li&gt;<mark class="ins">&lt;a href="#h1_1"&gt;</mark>見出し<mark class="ins">&lt;/a&gt;</mark>&lt;/li&gt;
  &lt;li&gt;<mark class="ins">&lt;a href="#h1_2"&gt;</mark>見出し<mark class="ins">&lt;/a&gt;</mark>&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>のようにすればいいわけです。こうすれば、リストにある見出し一覧をクリックすると、その見出しに行くことができて便利です。</p>
<p>なお、この場合はh1要素等にもともとid属性がある場合を考えていませんが（要素に複数のidをつけることはできないため）、今回は考えないようにしましょう。実際は、h1要素等の子としてspan要素などを追加してやって、それにid属性をつけることで解決できます。<code>h1_1</code>などのIDがもともと存在するのもまずいですが、それも今回は考えないことにします。（このid属性が既に存在するか調べて既に存在するIDはとばすことで対応できます。）</p>

<p>前回同様、できるなら自分でこれを実装してみてください。前回のコードを改造すればいいので幾分楽だと思います。</p>

<h3>作る</h3>
<p>さて、まずそれぞれの見出し要素にid属性を追加する処理を作ります。サンプルの</p>
<pre class="line-numbers"><code>
while(node=walker.nextNode()){
  var result = node.tagName.match(/^H([1-6])$/);
  var itsnumber = parseInt(result[1]);

  if(number &lt; itsnumber){
    //数字が大きい
    var newol = document.createElement('ol');
    ol.lastChild.appendChild(newol);
    ol = newol;	//追加先を新しいolにする

  }else if(number &gt; itsnumber){
    //数字が小さい
    for(var i=0;i&lt;number-itsnumber;i++){
      ol = ol.parentNode.parentNode;
    }
  }
  number = itsnumber;	//「現在の番号」を更新

  var newli = document.createElement('li');
  newli.textContent=node.textContent;
  ol.appendChild(newli);
}
</code></pre>
<p>の部分を改造しましょう。まず最初に、id属性を決定する必要があります。一番単純なのは、通し番号を付けることですよね。例えば、最初の見出し要素は"h_1"、次の見出し要素は"h_2"、以下h_3,h_4,h_5,h_6,h_7,h_8,h_9……と順番に続いていく方式です。</p>
<pre class="line-numbers" data-line="1,6-8"><code>
var bangou = 1;
while(node=walker.nextNode()){
  var result = node.tagName.match(/^H([1-6])$/);
  var itsnumber = parseInt(result[1]);

  var id = "h_"+bangou;
  bangou++;
  node.id=id;

  if(number &lt; itsnumber){
    //数字が大きい
    var newol = document.createElement('ol');
    ol.lastChild.appendChild(newol);
    ol = newol;	//追加先を新しいolにする

  }else if(number &gt; itsnumber){
    //数字が小さい
    for(var i=0;i&lt;number-itsnumber;i++){
      ol = ol.parentNode.parentNode;
    }
  }
  number = itsnumber;	//「現在の番号」を更新

  var newli = document.createElement('li');
  newli.textContent=node.textContent;
  ol.appendChild(newli);
}
</code></pre>
<p>まず最初に通し番号の変数bangouを1にしておきます。そこで、"h"+bangouとすると、変数nameは"h1"となりますね。次にbangouを1足しています。こうすることで、重複のない番号を順番につけることができますね。</p>
<p>あとは簡単です。</p>
<pre class="line-numbers" data-line="25-28"><code>
var bangou = 1;
while(node=walker.nextNode()){
var result = node.tagName.match(/^H([1-6])$/);
var itsnumber = parseInt(result[1]);

var id = "h_"+bangou;
bangou++;
node.id=id;

if(number &lt; itsnumber){
  //数字が大きい
  var newol = document.createElement('ol');
  ol.lastChild.appendChild(newol);
  ol = newol;	//追加先を新しいolにする

}else if(number &gt; itsnumber){
  //数字が小さい
  for(var i=0;i&lt;number-itsnumber;i++){
    ol = ol.parentNode.parentNode;
  }
}
number = itsnumber;	//「現在の番号」を更新

var newli = document.createElement('li');
var newa = document.createElement('a');		//リストのa要素
newa.href = "#"+id;			//href属性を設定
newa.textContent=node.textContent;
newli.appendChild(newa);
ol.appendChild(newli);
}
</code></pre>
<p>これでいいのですが、実はまだ完璧とはいえません。このスクリプトを実行する前に、もし既に文書中にh1というidを持つ要素があったらどうでしょう。h1という名前が重複してしまいます。HTMLでは同じidをもつ要素が複数存在してはいけませんから、これでは困ります。そこで、決めた名前が重複しているかどうかチェックして、重複していたら名前を変えないといけません。簡単なのは、重複したら、さらに通し番号を進めるという方法です。</p>
<p>id属性が重複しているかどうかを確認するのは難しくありません。document.getElementByIdでそのidを持つ要素が既に存在するかどうか調べればいいのです。</p>
<p>そこで、これを使ってidが重複しないか調べてみましょう。通し番号を進めてもまだ重複しているという可能性もあるので、while文を使って、重複しなくなるまで進めましょう。</p>
<pre class="line-numbers" data-line="6-7,11-15"><code>
var bangou = 1;
while(node=walker.nextNode()){
  var result = node.tagName.match(/^H([1-6])$/);
  var itsnumber = parseInt(result[1]);

  var id;
  while(true){
    id = "h_"+bangou;
    bangou++;

    var t = document.getElementById(id);
    if(t == null){
      break;	//重複していなければそれでOK
    }
  }


  node.id=id;

  if(number &lt; itsnumber){
    //数字が大きい
    var newol = document.createElement('ol');
    ol.lastChild.appendChild(newol);
    ol = newol;	//追加先を新しいolにする

  }else if(number &gt; itsnumber){
    //数字が小さい
    for(var i=0;i&lt;number-itsnumber;i++){
      ol = ol.parentNode.parentNode;
    }
  }
  number = itsnumber;	//「現在の番号」を更新

  var newli = document.createElement('li');
  var newa = document.createElement('a');		//リストのa要素
  newa.href = "#"+id;			//href属性を設定
  newa.textContent=node.textContent;
  newli.appendChild(newa);
  ol.appendChild(newli);
}
</code></pre>
<p>これで完成です。</p>

<h2>サンプル</h2>
<p>今回もこのページで試してみました。</p>
<script type="text/javascript">
var walker = document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,
    function(node){
      if(/^H[1-6]$/.test(node.tagName)){
        return NodeFilter.FILTER_ACCEPT;
      }else{
        return NodeFilter.FILTER_SKIP;
      }
    });
var node;
var ol = document.createElement('ol');
var number = 1;
var bangou = 1;
while(node=walker.nextNode()){
  var result = node.tagName.match(/^H([1-6])$/);
  var itsnumber = parseInt(result[1]);

  var id;
  while(true){
    id = "h_"+bangou;
    bangou++;

    var t = document.getElementById(id);
    if(t == null){
      break;	//重複していなければそれでOK
    }
  }


  node.id=id;

  if(number < itsnumber){
    //数字が大きい
    var newol = document.createElement('ol');
    ol.lastChild.appendChild(newol);
    ol = newol;	//追加先を新しいolにする

  }else if(number > itsnumber){
    //数字が小さい
    for(var i=0;i<number-itsnumber;i++){
      ol = ol.parentNode.parentNode;
    }
  }
  number = itsnumber;	//「現在の番号」を更新

  var newli = document.createElement('li');
  var newa = document.createElement('a');		//リストのa要素
  newa.href = "#"+id;			//href属性を設定
  newa.textContent=node.textContent;
  newli.appendChild(newa);
  ol.appendChild(newli);
}
while(ol.parentNode){
  ol=ol.parentNode;
}
document.body.appendChild(ol);
</script>

