<h3>オブジェクトの作成</h3>
<p>前回、<code>new Object()</code>という書き方でオブジェクトを作れるということを解説しました。</p>
<p>しかし、別の書き方があります。しかも、この書き方は、最初からオブジェクトにプロパティを持たせることができます。</p>
<pre><code>aa = {
    "aaa":"test",
    "bbb":123
};

alert(aa.aaa);
alert(aa.bbb);</code></pre>
<p>「test」「123」が表示されます。</p>
<p>1行目〜4行目がオブジェクトをつくっている部分です。</p>
<p>この書き方は、次のようになります。</p>
<pre><code>{
プロパティ名 : 値,
プロパティ名 : 値,
...
}</code></pre>
<p>つまり、<code>プロパティ名:値</code>の組を、<code>,</code>で区切って並べ、それを<code>{ }</code>で囲んでいるというわけです。ちなみに、今回分かりやすく改行していますが、実際は1行でも構いません。プログラムで空白や改行の有無で意味が変わる場面はほとんどないのです。とはいっても、やはり複数行にまたがったほうが分かりやすいです。プロパティ名が<code>"</code>で囲まれていますが、実は囲んでも囲まなくても構いません。ただし、変なプロパティ名（ハイフンマイナス<code>-</code>をはじめとする変な記号を含む場合など）の場合は<code>"</code>で囲まないと文法エラーとなります。</p>
<p>なお、この書き方でオブジェクトを表現する方法を<dfn>オブジェクトリテラル</dfn>といいます。</p>

<h3>オブジェクトの実体</h3>
<p>さて、ここで説明したいのは、実は変数にオブジェクトを代入した場合、変数に入っているのはオブジェクトへの「参照」とでも言うべきものであるということです。言っていることがとてもややこしいですが、次のサンプルを見ましょう。</p>
<pre><code>var a = 3;
var b = a;
a = 5;
alert(a);
alert(b);</code></pre>
<p>このコードのやっていることは簡単です。まずaに3を代入します。</p>
<p>次にbにaを代入しています。ここで、<strong>aは3</strong>ですから、bには3が代入されます。</p>
<p>その後、aには5が代入されます。aをアラートで表示すると、aは当然5です。bは、さっき代入された3です。</p>
<p>これはまったく問題ないコードです。それでは、次のコードはどうでしょう。</p>
<pre><code>var a = {"aaa" : 10};
var b = a;
a.aaa = 5;
alert(a.aaa);
alert(b.aaa);</code></pre>
<p>似たようなことを、オブジェクトを使ってしています。</p>
<p>まず、aに「プロパティaaaを持つオブジェクト」を代入しています。</p>
<p>そして、bにaを代入しています。その後、a.aaaに5を代入しています。</p>
<p>ここで、a.aaaを表示すると、さっき代入した5です。</p>
<p>これはいいですが、次にb.aaaを表示すると、なんと<strong>5が表示されます</strong>。先ほどと同じように考えると、これはおかしいですね。変数aには<code>{"aaa": 10}</code>が入っていたのだから、次の<code>var b = a;</code>により変数bにも<code>{"aaa": 10}</code>が入っているように思えます。次の<code>a.aaa = 5;</code>で、変数aに入っていたオブジェクトは<code>{"aaa": 5}</code>となりましたが、変数bはいじっていないのだから<code>b.aaa</code>は10となっていそうなところです。</p>
<p>ここに、先に述べた「変数に入っているのはオブジェクトへの『参照』」ということが関係しています。</p>

<p>オブジェクトの場合、<strong>その実体は変数の中ではなくメモリ上のどこかに存在します</strong>。<small>（例によってそこまで正確な表現ではなく、また突きつければどんな値もメモリ上に存在するのですが、あまり気にしないでください。）</small>最初の例で<code>var a = 3;</code>というコードの場合、変数aに入っているのは「3という値」と考えられます。次の<code>var b = a;</code>では、aが3という値なので、bにも3という値が代入されることになるわけです。</p>

<p>一方、オブジェクトの場合を見ます。1行目に登場する<code>{"aaa": 10}</code>というオブジェクトリテラルでは、<strong>オブジェクトが作成されます</strong>。オブジェクトリテラル（あるいは、前回登場した<code>new Object()</code>のような書き方）では、新しいオブジェクトが作られるのです。逆に言うと、新しいオブジェクトを作るにはこのような方法を使う必要があります。<small>（もちろん、明示的にこのようなコードを書かなくても、新しいオブジェクトを作成する機能をもつ関数などを使った場合に新しいオブジェクトが作成されることはあります。）</small></p>
<p>そして、変数aに代入されるのは、すなわち式<code>{"aaa": 10}</code>が返す値は、作成されたオブジェクトへの<strong>参照</strong>であると理解するのがいいでしょう。便宜的に、ここで作成されたオブジェクトを、オブジェクトOと呼ぶことにします。変数aに入るのは、オブジェクトOへの参照ということになります。</p>
<p>すると、次の<code>var b = a;</code>で変数bに代入されるのは、変数aの値と同じもの、すなわちオブジェクトOへの参照です。</p>
<p>ここで何が起きたかというと、変数aと変数bは同じオブジェクトへの参照を持っているという状態になりました。</p>
<p>これで、先ほどの挙動が理解できます。次の文<code>a.aaa = 5;</code>の動作をより正確に説明すると、まず<code>a.aaa</code>とは、変数aが参照するオブジェクト、すなわちオブジェクトOの、aaaというプロパティを指していることになります。つまり、この文によりオブジェクトOのプロパティaaaに5が代入されました。<code>alert(a.aaa);</code>も同様に、オブジェクトOのプロパティaaaを表示することになるので、5です。問題の最後の行ですが、<code>b.aaa</code>が何を指すか見てみましょう。先ほど説明した通り、変数bに入っているのはオブジェクトOへの参照です。となると、<code>b.aaa</code>はやはりオブジェクトOのプロパティaaaを指すことになります。したがって、5となるわけですね。</p>

<p>変数aと変数bが連動してしまう（同じオブジェクトOを指してしまう）のが困る場合は、次のように異なるオブジェクトを作ってあげることになります。</p>
<pre><code>var a = {"aaa" : 10};
var b = <mark>{"aaa": 10}</mark>;
a.aaa = 5;
alert(a.aaa);
alert(b.aaa);</code></pre>
<p>こうすれば、<code>{"aaa": 10}</code>というオブジェクトリテラルが2回登場しているのでオブジェクトが2個別々に作られ、それぞれ変数a、変数bから参照されます。よって、変数aが参照するオブジェクトをいじっても、変数bが参照するオブジェクトには影響しません。</p>


<h3>オブジェクトとプリミティブ</h3>
<p>以上で説明したように、オブジェクトとは、変数に代入したとき、その実体ではなく<strong>参照が代入される</strong>という特徴がありました。</p>
<p>それに対し、いままでこの解説では「値」と呼んでいた、実体がそのまま代入されるものを<dfn>プリミティブ</dfn>（プリミティブ値）といいます。プリミティブには、プロパティ等の概念はありません。</p>
<p>プリミティブは、具体的には「3」とか「"aaaaaaaaa"」とか「true」「false」とかです。ちなみに、プリミティブにも数値とか文字列とか真偽値とか種類がありますが、この種類を「型」といいます。</p>

