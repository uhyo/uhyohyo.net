<h3>オブジェクトの作成</h3>
<p>前回、<code>new Object()</code>という書き方でオブジェクトを作れるということを解説しました。</p>
<p>しかし、別の書き方があります。しかも、この書き方は、最初からオブジェクトにプロパティを持たせることができます。</p>
<pre><code>var aa = {
    "aaa": "test",
    "bbb": 123
};

alert(aa.aaa);
alert(aa.bbb);</code></pre>
<p>「test」「123」が表示されます。</p>
<p>1行目〜4行目がオブジェクトをつくっている部分です。</p>
<p>この書き方は、次のようになります。</p>
<pre><code>{
プロパティ名 : 値,
プロパティ名 : 値,
...
}</code></pre>
<p>つまり、<code>プロパティ名:値</code>の組を、<code>,</code>で区切って並べ、それを<code>{ }</code>で囲んでいるというわけです。ちなみに、今回分かりやすく改行していますが、実際は1行でも構いません。プログラムで空白や改行の有無で意味が変わる場面はほとんどないのです。とはいっても、やはり複数行にまたがったほうが分かりやすいです。プロパティ名が<code>"</code>で囲まれていますが、実は囲んでも囲まなくても構いません。ただし、変なプロパティ名（ハイフンマイナス<code>-</code>をはじめとする変な記号を含む場合など）の場合は<code>"</code>で囲まないと文法エラーとなります。</p>
<p>なお、この書き方でオブジェクトを表現する方法を<dfn>オブジェクトリテラル</dfn>といいます。実際のプログラムではオブジェクトはほぼ全てオブジェクトリテラルで書かれます。<code>new Object()</code>で書く人はほとんどいません。</p>

<h3>オブジェクトの性質</h3>
<p>オブジェクトは、文字列や数値といった今までの値とは大きく異なる特徴を持ちます。それは、オブジェクトは<strong>作成したあとから変更可能</strong> (<span lang="en">mutable</span>) な値であるという点です。以下では、これがどういうことなのかを説明します。</p>
<p>まず、次のコードについて考えてみましょう。</p>
<pre class="line-numbers"><code>var a = 3;
var b = a;
a = 5;
alert(a);
alert(b);</code></pre>
<p>このコードを実行すると何が表示されるでしょうか。これは引っ掛け問題とかではなく、簡単です。</p>
<p>このコードはまずaに3を代入します。次にbにaを代入しています。ここで、いまaは3ですから、bには3が代入されます。</p>
<p>その後、aには5が代入されます。ですから、最後にa,bの順に表示すると「5」「3」と表示されます。</p>
<p>それでは、次のコードはどうでしょうか。</p>
<pre class="line-numbers"><code>var a = {"aaa" : 10};
var b = a;
a.aaa = 5;
alert(a.aaa);
alert(b.aaa);</code></pre>
<p>似たようなことを、オブジェクトを使ってしています。</p>
<p>まず、aに「プロパティaaaを持つオブジェクト」を代入しています。そして、bにaを代入しています。その後、a.aaaに5を代入しています。</p>
<p>ここで、a.aaaを表示すると、さっき代入した5です。これはいいですが、次にb.aaaを表示すると、なんと<em>5が表示されます</em>。先ほどと同じように考えると、これはおかしいですね。変数aには<code>{"aaa": 10}</code>が入っていたのだから、次の<code>var b = a;</code>により変数bにも<code>{"aaa": 10}</code>が入っているように思えます。そのあと変数bはいじっていないのだから<code>b.aaa</code>は10となっていそうなところです。</p>
<p>ここに、先に述べた「オブジェクトは作成したあとから変更可能」ということが関係しています。</p>
<p>実は、この場合、変数aと変数bに入っているのは<strong>同じオブジェクト</strong>です。いま、1行目のオブジェクトリテラル<code>{"aaa": 10}</code>によって作成されたオブジェクトをオブジェクトOと呼ぶことにしましょう。変数aにはオブジェクトOが入りました。2行目では、変数bに変数aの中身を代入しています。ということは、変数bに入っているのもオブジェクトOなのです。ポイントは、2つの変数a, bに同じオブジェクトOが入っているということです。</p>
<p>3行目の<code>a.aaa = 5</code>という操作の意味は「<code>a</code>のプロパティ<code>aaa</code>に5を代入する」ということでしたが、変数aの中身はオブジェクトOでしたから、これは<em>オブジェクトOのプロパティ<code>aaa</code>に5を代入している</em>ことになります。</p>
<p>この操作により、オブジェクトOの中身（プロパティ<code>aaa</code>）が変わりました。これが、オブジェクトが変更可能ということです。</p>
<p>ここで、<code>b</code>の中身はオブジェクトOであり、オブジェクトOのプロパティ<code>aaa</code>はさっきの代入で5に変更されました。これが、<code>b.aaa</code>を表示すると5になる理由です。</p>
<p>結局、ポイントは、<code>var b = a;</code>で<code>b</code>には<code>a</code>と<em>同じオブジェクト</em>が入ったことと、そのオブジェクトが<em>変更</em>されたことです。</p>

<p>さらに理解するために、オブジェクトを使わない例をもう一度振り返ってみましょう。</p>
<pre class="line-numbers"><code>var a = 3;
var b = a;
a = 5;
alert(a);
alert(b);</code></pre>
<p>この例でも、2行目によって、変数bにはaと<em>同じ</em>ものが代入されたはずです。ここでは、それは3という数値です。この3という数値を<b>数値A</b>と呼ぶことにすると、変数aとbには両方とも数値Aが入っていることになります。オブジェクトの場合と異なるのは、数値Aの値は<em>変更されない</em>ということです。数値Aが3から4とか5になったりすることはありません。数値Aは永遠に3のままです。</p>
<p>ですから、3行目の<code>a = 5;</code>では、5は別の<b>数値B</b>であって、それを変数aに入れたということになります。この後、変数bに入っているのはいまだ数値Aですから、bは3ということになります。</p>

<p>これを応用すると、次のような例を書くことができます。</p>
<pre class="line-numbers"><code>var a = {"aaa": 10};
var b = <mark>{"aaa": 10}</mark>;
a.aaa = 5;
alert(a.aaa);
alert(b.aaa);</code></pre>
<p>こうすれば、<code>{"aaa": 10}</code>というオブジェクトリテラルが2回登場しているのでオブジェクトが2個別々に作られ、それぞれ変数a、変数bに代入されます。よって、変数aの中身と変数bの中身は別のオブジェクトとなり、一方を変更してももう一方に影響することはありません。</p>

<p>以上で説明したように、オブジェクトは変更可能なので、どの変数に入っているオブジェクトが<em>同じ</em>なのかということを意識する必要があります。実際のプログラミングでもミスをする人が多い点ですから、気をつけましょう。</p>


<h3>オブジェクトとプリミティブ</h3>
<p>オブジェクトは、変更可能であるという点で従来われわれが扱ってきた数値や文字列などとは異なっています。これらの、オブジェクト以外の値のことを<dfn>プリミティブ</dfn>（プリミティブ値）といいます。プリミティブには、プロパティ等の概念はありません。</p>
<p>プリミティブは、具体的には「3」とか「"aaaaaaaaa"」とか「true」「false」とかです。プリミティブにも数値とか文字列とか真偽値とか種類がありますが、この種類を「型」といいます。</p>

