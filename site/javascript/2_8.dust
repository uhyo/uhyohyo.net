<p>テーブルとは、こういうやつのことです。</p>
<pre class="language-html"><code>
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;test1&lt;/td&gt;
    &lt;td&gt;test2&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;test3&lt;/td&gt;
    &lt;td&gt;test4&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</code></pre>

<p>テーブルとはすなわち<b>表</b>です。このHTMLは次のような表を表しています。</p>
<table class="disp-table">
  <tr>
    <td>test1</td>
    <td>test2</td>
  </tr>
  <tr>
    <td>test3</td>
    <td>test4</td>
  </tr>
</table>

<h3>テーブルの木構造</h3>
<p>HTMLを見る限り、上のテーブルの木構造は次のようだと考えられます。ただし、タグとタグの間の改行によって生じるテキストノードは省略しています。</p>
<div class="tree">
table
<ul>
  <li>tr
    <ul>
      <li>td
        <ul>
          <li>#text
        </ul>
      <li>td
        <ul>
          <li>#text
        </ul>
    </ul>
  <li>tr
    <ul>
      <li>td
        <ul>
          <li>#text
        </ul>
      <li>td
        <ul>
          <li>#text
        </ul>
    </ul>
</ul>
</div>
<p>しかし、実際は違います。実は、実際には上のHTMLからは以下のような木構造が生成されます。</p>
<div class="tree">
table
<ul>
  <li><mark>tbody</mark>
    <ul>
      <li>tr
        <ul>
          <li>td
            <ul>
              <li>#text
            </ul>
          <li>td
            <ul>
              <li>#text
            </ul>
        </ul>
      <li>tr
        <ul>
          <li>td
            <ul>
              <li>#text
            </ul>
          <li>td
            <ul>
              <li>#text
            </ul>
        </ul>
  </ul>
</ul>
</div>
<p>table直下にあるのはtbodyという要素で、trはその下にあります。</p>
<p>詳しくはHTMLを勉強してほしいのですが、tableの中にはtbodyという要素があり、trはその中に入れます。このtbodyという要素は省略可能であり、まったく書かなくても暗黙のうちに存在すると見なされるのです。</p>
<p>他にもtheadやtfootという要素も、tbodyと並んでtableの中に存在する可能性があり、それらの中にもtrが存在する可能性があります。（thead, tfootについては<a href="2_9.html">次回</a>詳しく紹介します。）</p>
<div class="sidenote">
  <p>昔のHTMLではtableの直下にtrを書くことは認められておらず、上のように書いたら必ず暗黙のtbodyが補完されていました。</p>
  <p>最近のHTMLでは、tbodyを書く代わりにtrを直にtableの中に書くことも実は認められていますが、実際のブラウザは後方互換性の観点からtbodyを補完するものが多いようです。</p>
</div>
<p>これらの要素のせいで、テーブルの中ではtr要素がいろいろな場所に分散してしまう可能性があり、前回までに紹介した木構造の操作によってテーブルの行を一元的に扱うのは難しいです。そこで、テーブルの操作のための特別なプロパティやメソッドが用意されています。</p>

<h3>HTMLTableElement</h3>
<p>table要素のHTMLElementは、HTMLTableElementと呼ばれます。これは、いくつもの独自のプロパティやメソッドを持っています。</p>

<h4>rows</h4>
<p>そのうちの1つが、<dfn>rows</dfn>プロパティです。これは、そのテーブルが持つtr要素<strong>全て</strong>がまとめて集まっています。これを通してテーブルのtr要素を一元的に操作できます。</p>
<p>要素がいくつも集まっているということからNodeListが思い浮かぶと思いますが、このオブジェクトは<dfn>HTMLCollection</dfn>といいます。<small>（細かい違いとか歴史的経緯がありますが、）</small>これはNodeListと同じように扱えます。</p>
<p>例えば、</p>
<pre class="language-html"><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;table <mark class="ins">id="aaaaa"</mark>&gt;
      &lt;tr&gt;
        &lt;td&gt;test1&lt;/td&gt;
        &lt;td&gt;test2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;test3&lt;/td&gt;
        &lt;td&gt;test4&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;

    &lt;script type="text/javascript"&gt;
      var table = document.getElementById('aaaaa');

      var collection = table.<strong>rows</strong>;

      console.log(collection[0]);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>この場合、いつものようにgetElementByIdでtable要素を取得し、rowsを変数collectionに代入し、その0番目のノードのtagNameを表示しています。rowsはtr要素の集まりなので、当然tr要素が表示されます。実はHTMLCollectionの中の要素の順番はページ内の順番と一致している（ソースの中で先に書かれたものが先に来る）ので、表示されるtr要素は次のものです。</p>
<pre class="language-html"><code>
&lt;tr&gt;
  &lt;td&gt;test1&lt;/td&gt;
  &lt;td&gt;test2&lt;/td&gt;
&lt;/tr&gt;
</code></pre>
<p>こうして、テーブルのうちのtr要素を取得する方法がわかりました。たとえば、テーブルの中のtr要素を全て処理するようなプログラムも書けることでしょう。</p>

<h3>HTMLTableRowElement</h3>
<p>tr要素のHTMLElementは、HTMLTableRowElementといいます。</p>
<p>これもいろいろなプロパティやメソッドを持っています。</p>

<h4>cells</h4>
<p><dfn>cells</dfn>プロパティは、rowsプロパティのtd版という感じです。そのtr要素が持つtd要素（とth要素）のHTMLCollectionです。</p>
<p>ちなみに、入っている順は、先ほどと同様にページ内の順番（正確には<b>tree order</b>といいます）なので、つまり単に左順番に入っています。一番左が0番目、次が1番目・・・のようになっています。</p>
<pre class="language-html"><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;table id="aaaaa"&gt;
      &lt;tr&gt;
        &lt;td&gt;test1&lt;/td&gt;
        &lt;td&gt;test2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;test3&lt;/td&gt;
        &lt;td&gt;test4&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;

    &lt;script type="text/javascript"&gt;
      var table = document.getElementById('aaaaa');

      <mark class="ins">var tr = table.rows[0];
      var td = tr.cells[0];

      td.firstChild.nodeValue = "tttttttt";</mark>
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>左上のtd要素の中身が"tttttttt"に変わりました。</p>
<p>0番目のtr要素を変数trに代入し、その0番目のtd要素を変数tdに代入しています。</p>
<p>tdのfirstChildはテキストノードなので、そのnodeValueを変更することで左上のtd要素が変更されました。</p>

<h3>テーブルの操作</h3>
<p>さて、これで、テーブルの行やセル（1つ1つのtdやth要素のこと）をたどって、末端のテキストノードくらいは操作できるようになりました。</p>
<p>次に、行を増やしたり、セルを増やしたりといったテーブル自体の操作について解説していきます。</p>

<h4 id="anchor-insertrow">列・セルの追加</h4>
<pre class="language-html"><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;table id="aaaaa"&gt;
      &lt;tr&gt;
        &lt;td&gt;test1&lt;/td&gt;
        &lt;td&gt;test2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;test3&lt;/td&gt;
        &lt;td&gt;test4&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;

    &lt;script type="text/javascript"&gt;
      var table = document.getElementById('aaaaa');

      var newtr = table.<dfn>insertRow</dfn>( table.rows.length );

      for(var i=0;i&lt;2;i++){
        var newtd = newtr.<dfn>insertCell</dfn>( newtr.cells.length );
        newtd.appendChild( document.createTextNode('testtest'+i) );
      }
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>insertRow,insertCellという2つの新しいメソッドが登場しています。insertRowはtable要素のHTMLTableElementが、insertCellはtr要素のHTMLTableRowElementが持つメソッドだということがわかります。</p>

<p>insertRowは、テーブルに新しい列(tr要素）を追加して、そのtr要素を返すメソッドです。つまり、</p>
<div class="tree">
table
<ul>
  <li>tbody
    <ul>
      <li>tr
        <ul>
          <li>td
            <ul>
              <li>#text
            </ul>
          <li>td
            <ul>
              <li>#text
            </ul>
        </ul>
      <li>tr
        <ul>
          <li>td
            <ul>
              <li>#text
            </ul>
          <li>td
            <ul>
              <li>#text
            </ul>
        </ul>
      <li><mark>tr</mark> 　　　<em>← これ</em>（新しく追加されたtr）
  </ul>
</ul>
</div>
<p>を返すということになります。</p>
<p>createElementやappendChildなどをしなくても、insertRowを行った時点でtr要素が新しく作成されて、追加するところまでやってくれるわけですね。もちろん、このtr要素に子を追加すれば、ページの木構造にそれは追加されることになり、ページに反映されます。</p>
<p>insertRowは好きな場所に列を挿入することができます。入れる場所は、引数で<strong>数値</strong>で指定します。</p>
<p>指定のしかたは、その要素が「何番目になるか」というふうに指定します。たとえば0とすると、挿入した列が0番目になるということなので、一番最初に挿入されます。今回は、引数は<code>table.rows.length</code>です。table.rowsはtable要素が持つtr要素のリストなので、これはtr要素の数です。trはいま0番目から(length-1)番目まであるので、length番目に追加すると一番最後になるというわけです。</p>
<p>実は、これは<code>table.insertRow(<mark>-1</mark>)</code>としても構いません。つまり、番号に-1を指定すると最後に追加してくれるようになっています。さらに、<code>table.insertRow()</code>のように引数を省略してもよく、この場合も最後に追加されます。ただし、引数を省略できる機能は比較的新しい機能なので、古いブラウザだとこれは動作しない危険性があり、-1を渡すほうが安全です<small>（2017年6月現在）</small>。

<p>さて、こうしてできたtr要素は、その下にtd要素などは持っていません。そこで、次にtr要素にセルを追加します。</p>

<p>それは最後のfor文が行っています。このfor文は同じ処理を2回繰り返しています。iが0,iが1のときに処理が行われ、iが2になると終了します。</p>
<p>これは、同じような処理を2回書くのが面倒なので、for文で繰り返すようにしたというだけです。</p>

<p>中で使われている新しいメソッドは<dfn>insertCell</dfn>です。これはHTMLTableRowElementが持つメソッドで、tr要素にtd要素を追加して、それを返すというものです。使い方はinsertRowとよく似ています。引数に-1を指定したり引数を省略したりできるのも同じです。</p>
<p>つまり、newtdには新しくできた</p>
<div class="tree">
table
<ul>
  <li>tbody
    <ul>
      <li>tr
        <ul>
          <li>td
            <ul>
              <li>#text
            </ul>
          <li>td
            <ul>
              <li>#text
            </ul>
        </ul>
      <li>tr
        <ul>
          <li>td
            <ul>
              <li>#text
            </ul>
          <li>td
            <ul>
              <li>#text
            </ul>
        </ul>
      <li>tr
        <ul>
          <li><mark>td</mark> 　　　<em>← これ</em>
        </ul>
  </ul>
</ul>
</div>
<p>が代入されるということになります。</p>
<p>これも、insertRowと同じく空なので、中身のテキストノードを追加する必要があります。その処理が次の行です。td要素にappendChildで、createTextNodeで作ったテキストノードが追加されています。中身であるcreateTextNodeの引数は、「<code>'testtest'+i</code>」で、この変数iはループのカウンタだから、1回目（iが0）は'testtest0'、2回目（iが1）は'testtest1'となります。</p>
<p>つまり、最終的な木構造は次のようになります。</p>
<div class="tree">
table
<ul>
  <li>tbody
    <ul>
      <li>tr
        <ul>
          <li>td
            <ul>
              <li>#text
            </ul>
          <li>td
            <ul>
              <li>#text
            </ul>
        </ul>
      <li>tr
        <ul>
          <li>td
            <ul>
              <li>#text
            </ul>
          <li>td
            <ul>
              <li>#text
            </ul>
        </ul>
      <li>tr
        <ul>
          <li>td
            <ul>
              <li>#text <code>"testtest0"</code>
            </ul>
          <li>td
            <ul>
              <li>#text <code>"testtest1"</code>
            </ul>
        </ul>
    </ul>
</ul>
</div>
<p>画面の結果を見るとこのとおりになっているのがわかります。</p>

<h4 id="anchor-deleterow">列・セルの除去</h4>
<p>逆に、列やセルを除去する方法もあります。</p>
<pre class="language-html"><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;table id="aaaaa"&gt;
      &lt;tr&gt;
        &lt;td&gt;test1&lt;/td&gt;
        &lt;td&gt;test2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;test3&lt;/td&gt;
        &lt;td&gt;test4&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;

    &lt;script type="text/javascript"&gt;
      var table = document.getElementById('aaaaa');

      table.<dfn>deleteRow</dfn>(0);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
      </code></pre>
<p>「test1」「test2」の行が消えてしまいました。</p>
<p>これは、2行しかありませんね。1行目はtable要素の取得で、2行目で<dfn>deleteRow</dfn>というメソッドを呼び出しています。</p>
<p>引数は数字ですね。このメソッドは、(引数)番目の行を除去するというものです。</p>
<p>今回は引数が0なので、0番目の行、つまり最初の行が消えたというわけです。removeChildなどと同じように、子ノードがあってもまとめて除去されます。</p>

<h4>列の番号</h4>
<p>removeChildでは引数として除去したいノードそのものを渡したのに、insertRowやdeleteRowでは番号を引数として渡しています。これは、たまに、特にdeleteRowで不都合となることがあります。先に除去したいtr要素のHTMLElementが手に入った場合など、どうするのでしょう。</p>
<p>実は、それを解決してくれる<dfn>rowIndex</dfn>というプロパティをtr要素は持っています。ずばり、テーブルの中でそのtrが何番目かを表します。一番最初は例のごとく0番目です。これを使えば、簡単に何番目か知ることができます。</p>

<h4>セルの除去</h4>
<p>最後に、セルも同じように削除することができます。tr要素のオブジェクトが持つ<dfn>deleteCell</dfn>を使います。deleteRowと同じように番号を引数に渡します。</p>
<p>ちなみに、tr要素ではrowIndexだった自身の番号は、td,th要素では<dfn>cellIndex</dfn>にあたります。</p>

