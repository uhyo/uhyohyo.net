<p>今回は<dfn>compareDocumentPosition</dfn>というメソッドを紹介します。これはノードが持つメソッドで、題にある通り、ノードどうしの位置関係を知るというものです。いきなりサンプルを見てみましょう。</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p id="p1"&gt;p1&lt;/p&gt;
    &lt;p id="p2"&gt;p2&lt;/p&gt;

    &lt;script type="text/javascript"&gt;
      var <mark>p1</mark> = document.getElementById('p1');
      var <mark>p2</mark> = document.getElementById('p2');

      console.log(<mark>p1</mark>.<dfn>compareDocumentPosition</dfn>(<mark>p2</mark>) ); // 4
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>4が表示されます。この例から分かるように、返り値は数値です。</p>
<p>引数は一つで、<code><mark>node</mark>.compareDocumentPosition(<mark>other</mark>)</code>（nodeとotherはノードのオブジェクト）としたとき「<strong>nodeから見たotherの位置</strong>」を返します。どちらがどちらなのか覚えるのは少し大変です。忘れた場合はその都度調べるのもよいでしょう。それでは、この「4」はどんな位置であることを表しているのでしょうか。</p>
<p>ここで木構造を見てみます。</p>
<div class="tree">
body
<ul>
  <li>p1  ←<mark>node</mark>
  <li>p2  ←<mark>other</mark>
</ul>
</div>
<p>otherは、<strong>nodeより後ろ</strong>にあります。実は、このことをこの数値「4」が表しています。</p>
<p>しかし、4といわれても何のことかすぐには把握できません。そこで、<strong>定数</strong>があります。定数とは何かというと、<a href="5_2.html">五章第二回</a>で解説したもので、ある意味をもつ数値に名前をつけて、意味が分かりやすいようにしたものです。</p>
<p>この4はotherがnodeより後ろにあるという意味で、<strong><code>DOCUMENT_POSITION_FOLLOWING</code></strong>という定数が割り当てられています。この定数は、<strong>任意のノードのプロパティ</strong>としてJavaScriptから参照できます。つまり、次のように使います。</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p id="p1"&gt;p1&lt;/p&gt;
    &lt;p id="p2"&gt;p2&lt;/p&gt;

    &lt;script type="text/javascript"&gt;
      var p1 = document.getElementById('p1');
      var p2 = document.getElementById('p2');

      console.log(p1.compareDocumentPosition(p2) == p1.<mark>DOCUMENT_POSITION_FOLLOWING</mark> ); // true
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>今回は任意のノードとして、当事者(?)であるp1を使用しました。もちろんp2でもいいし他のでもいいです。</p>
<p>この結果がtrueだから、DOCUMENT_POSITION_FOLLOWINGが4であることが分かります。このように、結果と定数を比較することで、そのノードがどのような位置関係であるかが分かります。今回のようにDOCUMENT_POSITION_FOLLOWINGで比較すれば、「otherがnodeの後ろにある」ということがわかります。</p>
<p>定数は、次のものがあります。括弧内の数字は、具体的な数値です。</p>
<dl>
  <dt>DOCUMENT_POSITION_PRECEDING</dt>
  <dd>otherはnodeより<strong>前</strong>にあります。 (2)</dd>
  <dt>DOCUMENT_POSITION_FOLLOWING</dt>
  <dd>otherはnodeより<strong>後</strong>にあります。 (4)</dd>
  <dt>DOCUMENT_POSITION_CONTAINS</dt>
  <dd>otherはnodeを<strong>含んで</strong>います。 (8)</dd>
  <dt>DOCUMENT_POSITION_CONTAINED_BY</dt>
  <dd>otherはnodeに<strong>含まれて</strong>います。 (16)</dd>

  <dt>DOCUMENT_POSITION_DISCONNECTED</dt>
  <dd>otherとnodeは、<strong>同じ木構造にありません</strong>。 (1)</dd>
  <dt>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</dt>
  <dd>位置関係は<strong>実装依存</strong>です。 (32)</dd>
</dl>
<p>ちなみに、前にあるとか後にあるというときは、</p>
<div class="tree">
AAA
<ul>
  <li>BBB  ←<mark>node</mark>
  <li>CCC
    <ul>
      <li>DDD  ←<mark>other</mark>
    </ul>
</ul>
</div>
<p>のように、nodeとotherが同じ親をもつ兄弟でなくてもよいです。実際、この木構造をタグで表すと次のようになり、BBBの開始タグはDDDの開始タグより前にあります。</p>
<pre class="language-html"><code>&lt;AAA&gt;&lt;<mark>BBB</mark>&gt;&lt;/BBB&gt;&lt;CCC&gt;&lt;<mark>DDD</mark>&gt;&lt;/DDD&gt;&lt;/CCC&gt;&lt;/AAA&gt;</code></pre>
<p>このように定義された順序付けを文書順とかtree orderと言います。</p>

<p>また、DOCUMENT_POSITION_CONTAINS、DOCUMENT_POSITION_CONTAINED_BYの2つは、含む・含まれるという関係です。つまり、</p>
<div class="tree">
AAA ←<mark>other</mark>
<ul>
  <li>BBB ←<mark>node</mark>
  <li>CCC
    <ul>
      <li>DDD
    </ul>
</ul>
</div>
<p>のような場合、nodeはotherの子孫なので、otherはnodeを含んでいます。つまり、DOCUMENT_POSITION_CONTAINSです。逆に、</p>
<div class="tree">
AAA ←<mark>node</mark>
<ul>
  <li>BBB ←<mark>other</mark>
  <li>CCC
    <ul>
      <li>DDD
    </ul>
</ul>
</div>
<p>のような場合、otherが含まれる側だから、DOCUMENT_POSITION_CONTAINED_BYです。実際にやってみましょう。</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p id="p1"&gt;p1&lt;/p&gt;
    &lt;p id="p2"&gt;p2&lt;/p&gt;

    &lt;script type="text/javascript"&gt;
      var p1 = document.getElementById('p1');

      console.log( document.body.compareDocumentPosition(p1) ); // 20
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>この場合、</p>
<div class="tree">
body ←<mark>node</mark>
<ul>
  <li>p1 ←<mark>other</mark>
  <li>p2
</ul>
<p>という関係になっていて、otherがnodeに含まれているから、DOCUMENT_POSITION_CONTAINED_BYの16に当てはまります。</p>
<p>しかし、返ってくる値は<strong>20</strong>です。20とはなんでしょう。上の定数一覧のなかには20という定数はありません。実は、これは2つの定数が組み合わさった形です。</p>
<p>これは、なぜあの定数が「1,2,3,4,5...」という順番ではなく「1,2,4,8,16,32」というように飛んでいるのかということと関わってきます。</p>
<p>実はこれらの数値は<strong>二進数</strong>で表すと、「000001(1)」「000010(2)」「000100(4)」「001000(8)」「010000(16)」「100000(32)」というようになっています。それぞれ1桁だけ1になっています。</p>
<p>このような値の特徴は、複数足し合わされてももとの値に分解できるということです。例えば「001101」は、「001000」「000100」「000001」の3つが同時に入った数だといえます。</p>
<p>compareDocumentPositionもこの方式をとっています。今回の20は、二進数だと「010100」です。これは、「010000(16)」「000100(4)」の2つがあるということを表しています。</p>
<p>つまり、DOCUMENT_POSITION_CONTAINED_BYとDOCUMENT_POSITION_FOLLOWINGの両方があてはまる、つまりotherはnodeに含まれていて、かつnodeよりも後ろにあるということです。これがなぜかは、次のようにタグにしてみると分かりやすいです。</p>
<pre class="language-html"><code>
&lt;<mark>body</mark>&gt;&lt;<mark>p</mark>&gt;p1&lt;/p&gt; &lt;p&gt;p2&lt;/p&gt;&lt;/body&gt;
</code></pre>
<p>確かにp(other)はbody(node)より後ろにありますね。ですから、DOCUMENT_POSITION_CONTAINED_BYだけではなくDOCUMENT_POSITION_FOLLOWINGも成り立ったのです。</p>

<h3>ビット演算</h3>
<p>さて、20 (010100)という値が与えられたときに、これが例えば16 (010000)を“含む”かどうかを判定するにはどうすればよいのでしょうか。実は、こういうとき<strong>ビット演算</strong>を使います。</p>
<p>そのうちのひとつ、<strong>ビットごとの論理積</strong>は、2つの値を比較し、ビット（2進数の1桁）がどちらも立っている（1である）ビットのみが立った値を返します。例えば、20と16の論理積は、</p>
<pre><code>
0<mark>1</mark>0100 (20)
0<mark>1</mark>0000 (16)
-----------
0<mark>1</mark>0000 (16)
          </code></pre>
<p>となり、結果は16です。このように、2つの値で両方が1のビットのみ1になります。</p>
<p>ここで、1,2,4,8,16,32といった定数の値は、<strong>ひとつのビットのみが立っている値</strong>です。だから、任意の値とこのような値の論理積をとったとき、任意の値のそのビットが立っていれば結果のそのビットが立ち、立っていなければそのビットは立たず結果として全ての桁が立たない（0である）ので<strong>0になります</strong>。</p>
<p>これはif文の判定に利用できます。どこかのビットが立っていれば0ではない数値なので<strong>真</strong>で、立っていなければ0だから<strong>偽</strong>となり、処理を分岐させることが出来ます。</p>
<p>さて、このビットごとの論理積は、JavaScriptでは、2つの値をとって1つの値を返すから、<strong>演算子</strong>です。<strong><code>&amp;</code></strong>という演算子を使います。まとめると、otherがnodeに含まれているかどうか調べるには、</p>
<pre><code>node.compareDocumentPosition(other) <mark>&amp;</mark> node.DOCUMENT_POSITION_CONTAINED_BY</code></pre>
<p>これをif文の条件すればいいことが分かります。</p>

<h4>ビットごとの論理和</h4>
<p>また、論理積とセットで、<strong>ビットごとの論理和</strong>というものもあります。論理積が両方とも1のときのみ1になるのに対し、論理和は、片方でも1であれば1になります。例えば、</p>
<pre><code>
0<mark>1</mark>0000 (16)
000<mark>1</mark>00 (4)
-----------
0<mark>1</mark>0<mark>1</mark>00 (20)
</code></pre>
<p>という感じです。ここで、ビットが1つしか立っていない値どうしの論理和をとると、その両方を表す値ができます。この例はそういう例です。上で「複数の値が足し合わされた」と表現したものは、正確には論理和をとった値であるといえます。このように重複して立つビットがない場合、足すことと論理和をとることは同じ結果になります。演算子は<strong><code>|</code></strong>です。</p>

<h4>排他的論理和</h4>
<p>もはや今回の内容とは関係ありませんが、ついでにもう1つ紹介しておきます。それは<strong>排他的論理和</strong>です。これは論理和と似ていますが、排他的論理和は、「片方<strong>のみ</strong>のビットが立っているときその1」という処理を行います。例えば、25と15の排他的論理は以下の図より22となります。</p>
<pre><code>
0<mark>1</mark>1001 (25)
001<mark>1</mark><mark>1</mark>1 (15)
-----------
0<mark>1</mark>0<mark>1</mark><mark>1</mark>0 (22)
</code></pre>
<p>両方のビットが立っているときは0になります。演算子は<strong><code>^</code></strong>です。</p>
<p>面白い性質として、ある値との排他的論理和ととった値があるとき、もう一度同じ値で排他的論理和をとると、もとの数値に戻ります。</p>
<pre><code>
0<mark>1</mark>0110 (22)
00<mark>1</mark>11<mark>1</mark> (15)
-----------
0<mark>1</mark><mark>1</mark>00<mark>1</mark> (25)
</code></pre>
<p>上の<code>25^15</code>で得られた22で、 もう一度<code>22^15</code>として15と排他的論理和をとると25に戻っています。これは、<code>m^n^n</code>としたとき、<code>m^n^n = m^(n^n) = m^0 = m</code>という性質によるものです。</p>

<p>さて、話をcompareDocumentPositionに戻します。これの結果がある値に当てはまるかを知りたいときは、ビットごとの論理積を使うようにしましょう。</p>
<p>また、DOCUMENT_POSITION_PRECEDING、DOCUMENT_POSITION_FOLLOWINGについても注意が必要です。これが含まれていても、片方がもう片方を含んでいるという可能性があります。そういう場合でもOKという場合ならいいですが、そうでない場合もあると思います。</p>
<p>そういう場合、「DOCUMENT_POSITION_PRECEDINGを含み、かつDOCUMENT_POSITION_CONTAINSを含まない」などといった処理が必要になってくるので、注意しましょう。だから、例えばこうです。</p>
<pre><code>
var res = node.compareDocumentPosition(other);
if(res &amp; node.DOCUMENT_POSITION_PRECEDING <mark>&amp;&amp;</mark> <mark>!</mark>(res &amp; node.DOCUMENT_POSITION_CONTAINS)){
  // otherはnodeより前にあり、しかもotherはnodeを含んでいない場合の処理
}
</code></pre>
<p>ここで、よく使うのに今ごろやっと出てきた演算子<kbd>&amp;&amp;</kbd>を紹介します。上の&amp;1個のやつと似ていますね。こっちは「<strong>論理積</strong>」です。1個のほうは「ビットごとの論理積」なので区別しましょう。これは単純で、左右には2つの条件が来ます。これらが<strong>2つとも真なら真になる</strong>という演算子です。つまり、このif文全体としては、<code>res &amp; node.DOCUMENT_POSITION_PRECEDING</code>と<code>!(res &amp; node.DOCUMENT_POSITION_CONTAINS)</code>が両方真であれば条件が満たされるということです。とてもよく使います。</p>
<p>また、何気なく出てきた演算子<code>!</code>ですが、これは否定演算子で、ある値の前につけて、その値が真なら偽になり、偽なら真になります。つまり、<strong>真偽を逆にする演算子</strong>です。これは単項演算子の一種です。つまり<code>&amp;</code>などと違って、左右に値があるわけではなく、値は右のみに付けます。</p>
<p>したがって、<code>!(res &amp; node.DOCUMENT_POSITION_CONTAINS)</code>の意味は、「resが<code>node.DOCUMENT_POSITION_CONTAINS</code>を含まない」ということになりますね。</p>

<p>また、同じようにただの論理和<kbd>||</kbd>もあります。これは、条件のどちらか片方が真から真というものです。</p>

<div class="sidenote" id="anchor-sidenote-singi">
  <p>ここでは論理積・論理和・否定演算子について「真」とか「偽」とかいう言葉を使って説明しましたが、それはあまり正確ではありませんね。真か偽かというのは、より正確にいえば、真な値というのは<strong>真偽値に変換するとtrueになる値</strong>のことであり、偽な値というのは<strong>真偽値に変換するとfalseになる値</strong>ということです。<a href="2_14.html">二章第十四回</a>ではif文の条件について真や偽という概念を用いて説明しましたが、実はif文の条件部分に真偽値以外の値が渡されると真偽値に変換されるのです。真偽値への変換については<a href="9_7.html#anchor-type-conversion-boolean">九章第七回</a>で解説します。</p>
  <p>ちなみに、JavaScriptである値を真偽値に変換するには、<code>Boolean(値)</code>というようにBoolean関数に渡せばよいです。返り値は当然真偽値です。<code>Boolean(1)</code>が<code>true</code>になる一方<code>Boolean(0)</code>は<code>false</code>になるなどのことを確かめてみましょう。</p>
  <p>まず否定演算子<code>!</code>の挙動から説明します。これは簡単で、<code>!</code>の返り値は真偽値です。<code>!</code>は与えられた値を真偽値に変換し、それがtrueならfalseを返し、falseならtrueを返します。</p>
  <p>一方、論理積<code>&amp;&amp;</code>と論理和<code>||</code>はより複雑です。実は、<code>A &amp;&amp; B</code>の返り値はAかBかのどちらかです。具体的には、<code>A</code>を真偽値に変換してtrueなら<code>B</code>を返し、falseなら<code>A</code>を返します（<code>A</code>を真偽値に変換した結果を返すわけではないので注意してください）。たとえば、<code>3 &amp;&amp; "foo"</code>は<code>"foo"</code>となります。実はこの動作によって「AとBが両方真なら真な値を返し、そうでなければ偽な値を返す」という性質が成り立ちます。考えてみましょう。</p>
  <p>同様に、<code>A || B</code>は<code>A</code>を真偽値に変換してtrueなら<code>A</code>を返し、falseなら<code>B</code>を返します。</p>
  <p>また、<code>&amp;&amp;</code>と<code>||</code>は<strong>短絡実行</strong>と呼ばれる特徴を持ちます。これは、<code>A &amp;&amp; B</code>や<code>A || B</code>が<code>A</code>を返す場合には<code>B</code>は<em>評価されない</em>ということです。評価されないというのは、その部分はプログラムとして実行されないということです。</p>
  <p>例えば、<code>foo</code>という関数が存在しない場合、<code>foo()</code>はエラーになります。しかし、<code>true || foo()</code>は<code>foo()</code>を含んでいるにも関わらずエラーになりません。これは<code>foo()</code>の部分は評価されないからです。</p>
</div>

<p>さて、他の定数についても説明します。DOCUMENT_POSITION_DISCONNECTEDは、文字通り同じ木構造にない場合です。例えば、createElementで作ったばかりとか、removeChildで木構造から除去されたノードは木構造にありません。そういう場合はこれになります。同じ木構造に属していないので、どちらが前かといった位置関係が定義できないわけです。また、別のdocumentに属するノードでもこうなります。</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p id="p1"&gt;p1&lt;/p&gt;
    &lt;p id="p2"&gt;p2&lt;/p&gt;

    &lt;script type="text/javascript"&gt;
      var newp = document.createElement('p');

      console.log( document.body.compareDocumentPosition(newp) );
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>このサンプルでは、木構造上に存在するbody要素と、新しく作ったばかりのp要素を比較しています。返ってくる値は35か37のどちらかのはずです。</p>
<p>ここでは、この中にDOCUMENT_POSITION_DISCONNECTED(1)が含まれていることが重要です。</p>
<p>最後に残ったDOCUMENT_POSITION_IMPLEMENTATION_SPECIFICは意味としては「実装依存」ということですが、歴史的経緯のため存在しているのでここでは触れません。興味がある人は仕様書等を調べてみると良いかと思います。</p>

