<p>前回紹介したWeb Messagingには、まだ続きがあります。</p>
<p>それは、<dfn>チャンネルメッセージング</dfn>です。</p>
<p>これは何かというと、前回紹介したWeb Messagingにおいては、メッセージを送るpostMessageはwindowのメソッドであり、同じくメッセージを受けるのもwindowオブジェクトのmessageイベントです。</p>
<p>ここで、複数のウィンドウと同時に通信する場合を考えましょう。この場合、2つのウィンドウからくるメッセージが混在してしまい、判別する処理などが必要になり面倒です。</p>
<p>そこで、通信相手ごとに専用の回線を用意して、その中で通信することができます。これが<strong>チャンネル</strong>です。</p>

<h3>MessageChannel</h3>
<p>チャンネルを開設するには、<dfn>MessageChannel</dfn>というオブジェクトを用意します。このオブジェクトのインスタンスを作成すると、2つの<dfn>MessagePort</dfn>が作成され、<dfn>port1</dfn>と<dfn>port2</dfn>という2つのプロパティに入ります。</p>
<pre><code>
var channel=new <mark>MessageChannel</mark>();
channel.<mark>port1</mark>;	//MessagePort
channel.<mark>port2</mark>;	//MessagePort
</code></pre>
<p>MessagePortとは、チャンネルを通してメッセージを送るための窓口のようなものです。チャンネルメッセージングにおいては、windowオブジェクトではなくMessagePortにおいて<strong>messageイベント</strong>が発生します。</p>
<p>また、MessagePortは、postMessageメソッドも持っています。ここまで見て分かる通り、MessagePortは2つ組になっています。同じMessageChannelから作られたMessagePortがペアになっています。実質、MessageChannelには、このペアになったMessagePortを作る以外の機能はありません。</p>
<p>すなわち、あるMessagePortでpostMessageメソッドを利用すると、それで発せられたメッセージはもう1つのMessagePortに届き、messageイベントが発生します。このようにしてチャンネルメッセージングが行われるのです。</p>

<h3>MessagePort</h3>
<p>それでは、MessagePortの使い方を見てみましょう。messageイベントが発生するので、その扱いかたは前回紹介した場合と同じです。</p>
<p>しかし、postMessageには少しだけ違いがあります。前回のwindow.postMessageの場合は、第1引数が送るデータで第2引数がオリジンでした。しかし、MessagePortにおいては第2引数のオリジンはありません。なぜなら、MessagePortを送った時点（後述）で相手が誰かはわかっているからです。ですから、引数ひとつでメッセージを送るだけという単純な形で利用可能です。</p>
<p>また、MessagePortは、<dfn>start</dfn>と<dfn>close</dfn>というメソッド（いずれも引数無し）を持ちます。実は、MessagePortを利用する際は、まずこのstartメソッドを呼び出しておかないとメッセージを受信してくれないのです。closeは反対に、受信を終了してそのポートを無効化するメソッドです。</p>

<p>以上を踏まえて、挙動を確かめるための<a href="13_4_sample.html">サンプル</a>を用意しました。結果はconsole.logで表示されるのでコンソールを開きましょう。また、詳しくはソースを参照しましょう。</p>
<p>このサンプルで、port1のpostMessageで送ったメッセージはport2に届きます。逆も然りです。</p>

<h3>MessagePortを渡す</h3>
<p>さて、以上でMessagePortの挙動は理解できたと思います。しかし、このままでは使い物になりませんね。1つのページの中でいくら通信しても仕方ありません。これを有効に利用するには、前回同様異なるウィンドウの間で通信しないと意味がありません。</p>
<p>そのためには、<em>MessagePortを作って他のウィンドウに渡せばいい</em>のです。</p>
<p>この方法は、実は前回紹介したMessagePortを介さない通常のWeb Messagingです。つまり、まず普通のpostMessageでMessagePortを送ってやり、それを受け取った側は以後MessagePortを利用して個別のメッセージングをしようということです。</p>
<p>さて、postMessageでMessagePortを渡す方法ですが、じつは一筋縄ではいきません。普通に第1引数のメッセージで送ればいいように思いますが、前回「送ることが可能なもの」として紹介した中にMessagePortは含まれませんから、これでは送れません。</p>
<p>ここで、window.postMessageの<strong>第3引数</strong>が登場します。これは当然ながら省略可能であり、指定する場合は<strong>配列</strong>を渡します。配列であるという点に注意しましょう。</p>
<p>この配列の中にMessagePortを入れてやれば、向こうに届きます。受け取る側では、これはメッセージではありませんからイベントオブジェクトのdataプロパティには入っていません。window.postMessageの第3引数に渡されたものは、イベントオブジェクトの<dfn>ports</dfn>プロパティとして配列のまま届きます。このようにしてMessagePortを受け渡すことができました。</p>
<p>なぜMessagePortは第1引数で普通に受け渡せないかというと、第1引数のデータは全て<strong>クローン</strong>（コピー）して送られるのに対し、MessagePortではクローンではなく現物をそのまま送らなければならない、という理屈からだそうです。第3引数は、現物を送るための機能ということになっていますが、今はMessagePort専用です。第3引数に渡したオブジェクトは向こうに送られてしまったので、それ以降こちら側で使うことはできません。</p>

<p>以上を利用した<a href="13_4_sample2.html">サンプル2</a>を用意しました。詳細はサンプル2のソースを参照してください。</p>
<p>これでWeb Messagingについては終わりです。他のオリジンのページと通信したいときに役に立つかもしれません。</p>
<p>最後に、前回window.openによって他のブラウジングコンテキストを知る方法を紹介しましたが、実はもうひとつ他のブラウジングコンテキストを手に入れる方法があります。それはiframe要素を用いる場合です。詳しいことは<a href="7_1.html">七章第一回</a>を参照してください。</p>
