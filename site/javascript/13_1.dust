<p>今回は、かなりよく使われる技術のひとつである<dfn>XMLHTTPRequest</dfn>（略して<b>XHR</b>）を紹介します。</p>
<p>略して<b>XHR</b>と呼ばれることもあるこの技術は何かというと、<strong>JavaScriptでHTTP通信を行う</strong>ためのAPIです。Ajaxという言葉はもはや死語かもしれませんが、その根幹をなす技術です。</p>
<p>HTTP通信がどういうものかご存知でしょうか。ブラウザでインターネットを閲覧する場合はHTTP通信により行われます。HTTP通信は、基本的にはページを見たい側（クライアント）がウェブサイト（サーバー）に対して<b>リクエスト</b>を送り、それに対してサーバーからページの内容（<b>レスポンス</b>）が帰ってくるというものです。このようなHTTP通信をJavaScriptから行うことができるのです。</p>

<h3>リクエストを送る</h3>
<p>JavaScriptからHTTPリクエストを発行するには、XMLHttpRequestのインスタンスを作ります。</p>
<pre><code>
var xhr= new <mark>XMLHttpRequest</mark>();
</code></pre>
<p>そして、<dfn>open</dfn>メソッドでリクエストを開始します。このとき、<strong>パス</strong>と<strong>メソッド</strong>を渡してやります。</p>
<p>メソッドというのは、<strong>GET</strong>とか<strong>POST</strong>とかです。ほかにDELETE,PUT,HEAD,OPTION,TRACE,CONNECTがありますが、XHRから使うのは、GET,POSTのほかにせいぜいがHEADくらいでしょう。また、CONNECTとTRACEはセキュリティの観点から使えないことになっています。</p>
<p>GETというのはサーバーからデータを送ってもらうということであり、POSTというのは逆にサーバーへデータを送ることであるとされています。例えば、POSTは掲示板に投稿したりとかそういう時に使うそうです。しかし現実的には、GETでもデータを送ることができますし（HTMLのform要素ではmethod属性でgetかpostか選択可能です）、POSTでもサーバーは結果としてデータを送り返してきます。まあ、状況に応じて使い分けて下さい。</p>
<p>openメソッドは具体的には次のように使います。</p>
<pre><code>
var xhr= new XMLHttpRequest();
xhr.<mark>open</mark>("<mark>GET</mark>","/index.html");
</code></pre>
<p>第1引数がメソッドであり、第2引数がパスです。このように「/」から始まるパスはルートからの絶対パスですね。このサイトの場合、「http://uhyohyo.net/index.html」に該当します。なお、基本的にはリクエストが送られる先のサーバーは現在のオリジンに該当するサーバー（たとえばこのサイト上のページでXHRを利用した場合<code>http://uhyohyo.net</code>）です。</p>
<p>ちなみに今回は省略していますが、第3引数は非同期フラグ（後述）で、また必要な場合、第4引数にユーザー名、第5引数にパスワードを渡すことが可能です。これらは認証に利用されます。</p>

<p>実はopen関数を呼ぶだけだとリクエストは送信されません。リクエストを実際に送信するのが<dfn>send</dfn>メソッドです。</p>
<p>sendには引数が一つあり、<strong>リクエストの本文</strong>です。リクエストの本文というのは、例えばPOSTメソッドの場合、サーバーに送信するデータです。文字列など（後述）を送信することが可能です。GETやHEADの場合は本文は必要ありませんので、省略するかnullを渡します。</p>

<pre><code>
var xhr= new XMLHttpRequest();
xhr.open("GET","/index.html");
xhr.<mark>send</mark>();
</code></pre>
<p>これでリクエストが送信されました。</p>

<h3>結果を受け取る</h3>
<p>リクエストが送信されたのはいいですが、サーバーから戻ってくる結果はどうやって受け取るのでしょうか。基本的には、リクエストには時間がかかるので、<strong>非同期</strong>的に結果が帰ってきます。これは前の章でも出てきたのでもうおなじみだと思いますが、XHRにおいても<strong>イベント</strong>を用います。ここで、リクエストが完了して結果が戻ってきたときのイベントは<strong>load</strong>です。<code>onload</code>プロパティを設定するか、addEventListenerでイベントハンドラを登録します。</p>
<pre><code>
xhr.addEventListener("<mark>load</mark>",function(ev){
});
</code></pre>
<p>loadイベントはリクエストの送信後レスポンスが返ってきたら発生します。この時点で、リクエストの結果はXHRオブジェクトの<dfn>response</dfn>プロパティに入っています。今回の場合、結果は<em>文字列</em>で得られます。</p>
<p>ここまでをまとめた<a href="13_1_sample.html">サンプル</a>を見てみましょう。ページを開くと、HTMLが表示されたと思います。これは<a href="/index.html">/index.html</a>のソースです。すなわち、あのページからHTTP通信によって/index.htmlの内容を取得し、その内容を表示したわけです。</p>

<h3>結果の種類</h3>
<p>今回結果は文字列として得られましたが、実はどのような形で結果が欲しいのか指定することができます。今回はHTMLページを取得したので文字列が適していましたが、例えば画像などを取得したい場合はより適した形があるでしょう。</p>
<p>結果をどんな風に受け取りたいかはXHRオブジェクトの<dfn>responseType</dfn>プロパティに文字列を代入してやることで決定します。デフォルトは空で、その場合基本的には<code>"text"</code>と同様の扱いになります（後述）。いずれの場合でも、結果はresponseプロパティに入っていることになります。</p>
<p>responseTypeに設定できる文字列とその意味は以下の通りです。</p>
<dl>
  <dt>text</dt>
  <dd>結果をテキストで受け取ります。このとき、結果はresponseプロパティのほかresponseTextプロパティでも取得できます。</dd>
  <dt>json</dt>
  <dd>結果はJSONで送られてきて、それをパースした結果のオブジェクトを受け取ります。結果にJSON.parseを適用したものと同じです（JSONについて詳しくはまた今度）。</dd>
  <dt>arraybuffer</dt>
  <dd>結果を<a href="12_5.html#anchor-arraybuffer">ArrayBuffer</a>で受け取ります。この方法ならばバイナリデータも受け取れます。</dd>
  <dt>blob</dt>
  <dd>結果を<a href="12_5.html#anchor-file">Blob</a>で受け取ります。arraybufferとの違いは、Blobは<dfn>type</dfn>プロパティ（そのデータのMIMEタイプ）を持っておりこれが使用できるという点です。</dd>
  <dt>document</dt>
  <dd>HTMLまたはXMLのファイルを受け取ります。結果はパースされてHTMLDocument（送られてきたHTMLファイルに対応するdocument）またはXMLDocument（XML文書の場合）で受け取ります。HTMLになるかXMLになるかは、サーバーから送られてきたデータ（のMIMEタイプ）によって自動的に判定されます。HTMLかXMLかに関わらず、この場合はresponseXMLプロパティでも結果を受け取れます。</dd>
</dl>
<p>上の説明でresponseTextとresponseXMLというプロパティが何気なく出現しましたが、これは昔のXHRの名残です。responseプロパティがあれば全て受け取れるので使うことはあまりないでしょうが、昔に書かれたコードに出現することがあります。</p>

<h3>リクエストヘッダ</h3>
<p>HTTPでは、リクエストやレスポンスの付帯情報として<strong>ヘッダ</strong>を送ることができます。例えば、</p>
<pre><code>Accept-Language: ja;q=0.8, en;q=0.6</code></pre>
<p>みたいなやつです。これは明らかに<code><var>ヘッダ名</var>: <var>値</var></code>という形をしています。ヘッダはさまざまなものがありますので、どのようなヘッダがあるのかは各自で調べてください。</p>
<p>リクエストヘッダを設定するには、<dfn>setRequestHeader</dfn>メソッドを使います。ただし、タイミングはopenメソッドのあと、sendする前でなければいけません。</p>
<p>引数は、第一引数にヘッダ名、第二引数に値です。上の例だとこのようになります。</p>
<pre><code>
xhr.<mark>setRequestHeader</mark>("Accept-Language","ja;q=0.8, en;q=0.6");
</code></pre>
<p>ただし、XHRで利用できるヘッダは制限されており、完全に自由にヘッダを操作できるわけではありません。</p>

<h3>レスポンスヘッダ</h3>
<p>一方、レスポンスヘッダを取得するのが<dfn>getResponseHeader</dfn>です。引数はヘッダ名だけで、返り値は文字列またはnull（該当ヘッダが存在しない場合）です。レスポンスヘッダはレスポンスにくっついてくるので、当然このメソッドが利用できるのはレスポンスが返ってきたあとです。</p>
<pre><code>
var length = xhr.<mark>getResponseHeader</mark>("Content-Length");
</code></pre>
<p>こういう感じで使います。</p>
<p>また、全てのヘッダを一度に得る<dfn>getAllResponseHeaders</dfn>メソッド（引数無し）もありますが、次のような文字列で結果が得られるためやや使いにくいです。。</p>
<pre><code>
Content-Type: text/plain;charset=UTF-8
Content-Length: 5
</code></pre>

<h3>レスポンス</h3>
<p>ほかにレスポンスに関連するメソッドとして、あまり使う機会はないと思いますが<dfn>overrideMimeType</dfn>というメソッドがあります。これは引数を1つとり、結果のMIMEタイプを書き換えます。</p>
<p>というのも、HTTPのレスポンスは必ず<a href="12_5.html#anchor-mime-type">MIMEタイプ</a>を伴います。例えばブラウザでウェブサイトを開くとHTMLが正しく描画されるのは、サーバーからのレスポンスが<code>"text/html"</code>のMIMEタイプを伴って返ってくるからです。レスポンスのMIMEタイプはContent-Typeというレスポンスヘッダから取得できます。</p>
<p>overrideMimeTypeを使ってレスポンスのMIMEタイプを書き換えることでXHRの処理を変えることができる場合があります。例えば、サーバーがHTML文書を表す文字列を返すのにMIMEタイプが<code>"text/plain"</code>の場合、XHRのresponseTypeを<code>"document"</code>にしてもresponseとしてHTMLDocumentを取得できません。そのような場合に
<code>xhr.<mark>overrideMimeType</mark>("text/html");</code>
とすればデータがHTML文書として認識されるでしょう。</p>
<p>もっと実用的な例は思いつきませんので、このメソッドを使う機会はあまりないでしょう。</p>

<p>次に、<dfn>status</dfn>プロパティを紹介します。こちらは比較的よく使います。これは、帰ってきた結果の<strong>HTTPステータスコード</strong>を数値で得ます。例えば。正常にページが帰ってきたならば大抵は200です。ほかに、403とか404が有名です。注意すべきことは、400番台や500番台はページが見つからないなどの問題があったことを示すステータスコードですが、XHR的にはサーバーから何かしら結果が帰ってきたならば「通信成功」とみなされることです。失敗時の処理については後述しますが、XHRの失敗というのはサーバーが応答しないとか何も帰ってこないとかいう場合を指します。</p>
<p>また、<dfn>statusText</dfn>プロパティは、ステータスコードに対応するテキストでの説明です。これは各ステータスコードに対して定義されている文字列で、例えば200なら<code>"OK"</code>とか、404なら<code>"Not Found"</code>です。</p>

<h3>readyStateとその他のイベント</h3>
<p>さて、上では受信に成功したときに発生するloadイベントを紹介しました。ほかには次のようなイベントがあります。</p>
<dl>
  <dt>loadstart</dt>
  <dd>リクエストを開始した瞬間。</dd>
  <dt>progress</dt>
  <dd>データを受信しているとき（後述）。</dd>
  <dt>abort</dt>
  <dd>リクエストが中断して失敗しとき。</dd>
  <dt>error</dt>
  <dd>リクエストに失敗したとき。</dd>
  <dt>timeout</dt>
  <dd>タイムアウト（後述）によりリクエストが失敗したとき。</dd>
  <dt>loadend</dt>
  <dd>失敗か成功かにかかわらずリクエストが終了したとき。</dd>
  <dt>readystatechange</dt>
  <dd>後述</dd>
</dl>
<p>まとめると、処理完了時点で成功した場合にはloadイベントが発生し、失敗した場合は原因によって、abort（中断）またはtimeout（タイムアウト）またはerror（その他）イベントが発生します。loadendイベントは、成功・失敗のいずれの場合も発生するイベントです。loadendイベントはloadなどのイベントと同時（厳密にはloadなどの直後）に発生します。</p>
<p>ちなみに、abortイベントが発生する原因の一つとしては、<dfn>abortメソッド</dfn>（引数無し）を呼び出すことで自分からリクエストを中断させることができます。</p>
<p>成功しても失敗しても通信終了時に何らかの動作をしたい場合には、loadendイベントを利用するのが楽でしょう。loadendイベントにおいて成功か失敗か見分ける方法としては<b>status</b>プロパティを使う方法があります。通信成功した場合は前述の通り何らかのステータスコードが入っていますが、失敗した場合は<b>status</b>の値は0になっています。statusはまだリクエストしていない場合も0なので注意しましょう。</p>
<p>他の指標として、通信に失敗した場合にはresponseプロパティがnullになります。ただし、通信自体は成功したもののresponseがnullになる場合も多少あります（変なJSONが送られてきたとか、サーバーがステータスコード204を返した場合など）。</p>

<p>ちなみに、loadstartイベントが発生するのはsendメソッドが呼ばれたときです。</p>
<p>そして、<strong>readystatechange</strong>イベントについてですが、これはXHRオブジェクトの<dfn>readyState</dfn>というプロパティと関連しています。これは「現在の状態」を表す数値で、以下に列挙します。</p>
<dl>
  <dt>0 (UNSENT)</dt>
  <dd>まだopenメソッドが呼ばれていない状態。</dd>
  <dt>1 (OPENED)</dt>
  <dd>openメソッドが呼ばれたがsendメソッドは呼ばれていない状態。または、sendメソッドが呼ばれたあとまだレスポンスを受信していない状態。</dd>
  <dt>2 (HEADER_RECEIVED)</dt>
  <dd>sendが呼ばれた後、HTTPヘッダを全て受信し終えた状態。この状態からstatusプロパティやgetResponseHeaderメソッドなどが利用可能。まだデータ本体は受信していない。</dd>
  <dt>3 (LOADING)</dt>
  <dd>本文のデータを受信中である状態。</dd>
  <dt>4 (DONE)</dt>
  <dd>受信完了したか、リクエストに失敗して終了した状態。</dd>
</dl>
<p>見て分かるように、readyStateが4になるのはloadendイベントと同時といっていいでしょう。</p>
<p>さて、readystatechangeイベントは、その名の通りreadystateが変化したときに発生するイベントです。</p>
<p>実は昔はこのreadystatechangeイベントしか無かったため、例えばロード完了はloadイベントではなくreadystatechangeイベントを監視してreadyStateが4になったらロード完了だと判断していました。</p>
<p>今はあえてこのreadystatechangeイベントを使う機会は少ないかもしれませんが、最速でstatusを得たい（readyStateが2になったタイミング）とかそういう場合は使い道があるかもしれません。</p>

<p>また、実は、readyStateが変わっていないのにreadystatechangeイベントが発生する場合があります。</p>
<p>たとえば、send()が呼ばれた時点、つまりloadstartと同時にreadystatechangeも起こっています。これは「歴史的理由」によるそうです。</p>

<p>さて、タイムアウトとは制限時間のようなものです。サーバーに接続できたものの一定時間のうちにレスポンスが帰ってこなかったような場合はサーバーが応答しないと判断され、timeoutイベント（やloadendイベントなど）が発生して終了となります。</p>
<p>タイムアウト時間を設定するには<dfn>timeout</dfn>プロパティを使います。これはミリ秒の数値であり、例えば</p>
<pre><code>xhr.timeout=1000;</code></pre>
<p>としたならば1秒以内に処理を完了できないとタイムアウトで失敗するということです。デフォルトの値は0で、これは無制限（タイムアウトしない）という意味になります。</p>

<h3>イベントオブジェクト</h3>
<p>ところで、イベントですから、イベントオブジェクトが存在します。readystatechangeは古いイベントなので特筆すべきことはありませんが、その他のイベントは<dfn>ProgressEvent</dfn>という種類のイベントオブジェクトを有しており、以下に紹介する便利なプロパティを持っています。</p>
<p>ちなみに、イベントオブジェクトですから例によって<a href="3_5.html#anchor-target">target</a>プロパティがありますね。この場合、targetはそのXMLHttpRequestオブジェクトになります。</p>
<p>ProgressEventに特有なプロパティは主に3つです。一つ目は<dfn>loaded</dfn>です。これは数値で、<strong>すでに受信した本文のバイト数</strong>です。</p>
<p>次は<dfn>total</dfn>です。これは、受信すべきデータサイズの全体です。例えば、1024バイトのファイルのうち100バイトをすでに受信したとしたら、loadedは100でtotalは1024ということになります。</p>
<p>しかし、totalのはデータサイズの全体ですが、まだ全部受信していないのにどうしてデータサイズが分かるのでしょう。実はCotent-Lengthというレスポンスヘッダによりレスポンスのデータが判明します。レスポンスヘッダはレスポンスの本文より先に送られてきますので、データを全部受け取る前にデータサイズが分かるのです。ただし、これは裏を返せばレスポンスヘッダが来ないとデータサイズが分からないということなので、readyStateが2以上でないとtotalは使えません。</p>
<p>また、totalがすでに判明しているかどうかを表すプロパティとして<dfn>lengthComputable</dfn>があります。これがtrueならばtotalは利用可能で、falseならばtotalはまだ利用できません（このときtotalは0になっています）。これがreadyStateとは別にある理由は、レスポンスヘッダにContent-Lengthが含まれないためにヘッダが来てもデータサイズが分からないという事態も考えられるからです。</p>

<p>ProgressEventに特有なプロパティは以上の3つです。</p>
<p>これらが活躍するのは、主に上の<strong>progressイベント</strong>でしょう。progressイベントは、最短で0.05秒に1回発生することになっています（例外もたまにあります）。</p>
<p>このprogressイベントを用いてダウンロードの進捗を把握すれば、よくある「0%」からはじまって「100%」までいくやつが可能です。具体的にはこんな感じです。</p>
<pre><code>
var xhr=new XMLHttpRequest();
xhr.open("GET","/index.html");
xhr.addEventListener("<mark>progress</mark>",function(ev){
  console.log(<mark>ev.loaded</mark>,<mark>ev.total</mark>);
});
xhr.send();
</code></pre>
<p>こんな感じでconsole.logでloadedとtotalを表示してやれば、loadedがだんだん増えていく様子がわかるでしょう。ただ、あまりに小さいファイルだと一瞬で終わってしまって分からないかもしれません。実際には、progress要素などに表示するとよいでしょう。</p>

<h3>XMLHttpRequestUpload</h3>
<p>さて、イベントと関連して紹介するのが<dfn>XMLHttpRequestUpload</dfn>です。これはXHRオブジェクトとセットになっていて、<dfn>upload</dfn>プロパティに入っています。</p>
<p>このXMLHttpRequestUploadの機能は、<strong>イベントを発生すること</strong>です。発生するイベントの名前はXMLHttpRequestと同じです。</p>
<p>さて、実は、さっきのprogressイベントは、サーバーからこちらへ送られてくるデータを観測するものでした。では、POSTでこちらから巨大なデータを送る場合（後述のFormDataでファイルを送る場合とか）は進み具合を知ることはできないのでしょうか。</p>
<p>それを可能にするのがこのXMLHttpRequestUploadであり、クライアントからサーバーにデータを送る部分に関するイベントを発生してくれます。ただし、sendの引数がないなど送るデータが全くない場合はイベントは一つも発生しないので、注意しましょう。</p>
<p>loadstart, abort, error, timeoutについては、クライアントからサーバーへ送る部分とサーバーからクライアントへデータが送られてくるが細分化されていたりはしないので、通常のXMLHttpRequestのイベントと同じです。つまり、わざわざXMLHttpRequestUploadのほうのイベントを監視することもないでしょう。</p>
<p>また、readystatechangeはありません。残ったload,loadend,progressが、XMLHttpRequestUploadで違う部分です。要するに、XMLHttpRequestUploadの用途は主にprogressイベントを監視したり、loadイベントでアップロードの終了を検知することになります。</p>
<p>それでは、XMLHttpRequestUploadにおけるload,loadend,progressの意味を見ていきましょう。とはいっても、これは単純です。</p>
<p>progressイベントのloaded・totalは、受信済みデータ量・受信する総データ量の代わりに、送信済みデータ量・送信する総データ量を示します。XMLHttpRequestUplioadの場合、load・loadendの2つはタイミングが同じであり、こちら側から送るデータを全て送った段階で発生します。大きいデータを送信して時間がかかりそうな場合は、これを利用してインターフェースを作ると面白いでしょう。これについても、サンプルを示しておきます。</p>
<pre><code>
//変数dataには巨大なデータが入っていると仮定
var xhr=new XMLHttpRequest();
xhr.open("POST","/index.html");
xhr.<mark>upload</mark>.addEventListener("<mark>progress</mark>",function(ev){
  console.log(<mark>ev.loaded</mark>,<mark>ev.total</mark>);
});
xhr.send(data);
</code></pre>

<h3>クロスオリジンリクエスト</h3>
<p>次に、<strong>クロスオリジン</strong>のリクエストについて解説します。クロスオリジンとは、オリジンをまたぐということです。オリジンは<a href="7_1.html">七章台一回</a>に少しでてきました。オリジンはホスト名・ポート番号・プロトコルを合わせた概念であり、これが1つでも違う2つのサイトは違うオリジンであると見なされます。一般にオリジンが同じWebページは所有者が同じであるとみなされます。</p>
<p>ブラウザで動作するJavaScriptはセキュリティ上の制限を受けているため、原則として他のオリジンに存在するデータを見ることができません。例えば全く関係のないページを開いたらJavaScriptが裏でこっそりとAmazonにアクセスしてアカウント情報を盗まれるというなことが起こると困るからですね。このように、同じオリジンのデータしかアクセスできないという制限を<strong>同一オリジンポリシー</strong>（<i lang="en">Same-origin policy</i>）といいます。</p>
<p>しかし、XHRにおいては特定の条件を満たした場合のみ、あるオリジンのページから違うオリジンのページへHTTPリクエストを送ることができます。このような同一オリジンポリシーを超越したリクエストがクロスオリジンリクエストです。</p>
<p>具体的にどうすればクロスオリジンのリクエストができるかというと、<strong>リクエストを受ける側</strong>がHTTPレスポンスヘッダによりクロスオリジンリクエストの受け入れを表明する必要があります。例えば、</p>
<pre><code>
xhr.open("GET","http://example.com/");
</code></pre>
<p>という場合には、example.com側が変更を行わないといけないということです。このようにデータを見られる側がJavaScriptからのアクセスを制御することで、セキュリティを保ちつつクロスオリジンリクエストができるようになります。</p>
<p>具体的には、<dfn>Access-Control-Allow-Origin</dfn>というヘッダをレスポンスに追加します。これで、XHRを許可するドメインを列挙します。例えば、</p>
<pre><code>
Access-Control-Allow-Origin: http://example.com http://uhyohyo.net
</code></pre>
<p>のようにします。この例は、http://example.comとhttp://uhyohyo.netにあるWebページからのXHRは許可するという意味です。また、ドメインを列挙する代わりに「*」とすることもできます。これは、「全てのオリジンからのXHRを許可」ということです。</p>

<p>実はXHRオブジェクトには<dfn>withCredentials</dfn>というプロパティがあります。これはクロスオリジンのときに関係するプロパティで、falseまたはtrue、デフォルトはfalseです。</p>
<p>trueになると何が起こるかというと、CookieとかSSL証明書などの情報も一緒に送られるようになります。これらが必要な場合はwithCredentialsをtrueにしましょう。</p>
<p>ただし、注意するのは、このwithCredentialsがtrueの状態で、さらにAccess-Control-Allow-Originが"*"でない場合（ちゃんと列挙してある場合）には、さらに追加のHTTPヘッダが必要になります。</p>
<pre><code>
Access-Control-Allow-Credientials: true
</code></pre>
<p>このヘッダがないと失敗してしまいます。</p>

<h3>同期リクエスト</h3>
<p>XHRオブジェクトのopenメソッドの説明のときに、第3引数が「非同期フラグ」であると述べました。また、今回の説明ではXHRの結果はイベントを通じて得ることができる、すなわち非同期ですね。実はopenメソッドの第3引数を<b>false</b>にすると同期的なリクエストが行われます。逆に<b>true</b>だと今まで説明した通りの非同期的なリクエストになります。つまり、この引数は省略するとtrue扱いになるという珍しい引数です。</p>
<p>ただし、現在の仕様では<strong>普通のJavaScript実行環境ではXHRを同期リクエストで利用することはできません</strong>。つまり、第3引数にfalseを指定するとエラーになります。</p>
<p>こんな意味のない仕様がなぜ存在するかというと、ひとつは歴史的経緯、そしてもうひとつはWorkerプロセス内で利用するためです。Workerプロセスについてはまた今度紹介しますが、Workerプロセス内ではXHRを同期的に利用することができます。</p>
<p>とにかく、同期リクエストは普通は利用できませんが、利用する機会があったときのために簡単に説明しておきます。同期リクエストでは、send()が呼び出された時点でブロックされ、リクエストが完了すると戻ってきます。つまり、send()の直後にresponseプロパティを参照して結果を得ることができます。通信失敗した場合はerrorイベント等の代わりに<a href="9_8.html">例外</a>が発生します。</p>

<h3>sendで送るデータ</h3>
<p>最後にsendメソッドで送るデータについて解説します。HTTPでは、POSTの場合などにリクエストに伴ってデータ（本文）を送ることができました。これは次のように文字列で指定できます。</p>
<pre><code>
var xhr=new XMLHttpRequest();
xhr.open("POST","sample.cgi");
xhr.send("foo=bar&amp;hoge=piyo");
</code></pre>
<p>バイナリデータを送りたい場合、sendの引数にArrayBufferやBlobを渡すことができます。Blobの場合はMIMEタイプの情報を持っていますので、本文のデータのMIMEタイプもしっかり設定して送れます。</p>
<p>他に、HTMLDocumentやXMLのDocumentを渡すこともできます。そうなると、そのソースを送ってくれます。</p>
<p>そして、sendには今回初登場の<dfn>FormData</dfn>オブジェクトを渡すこともできるのです。</p>
<p>FormDataをsendに渡すと、HTMLでフォームを送信した場合と同様の本文を生成してくれます。というのも、HTMLのフォームのデータをPOSTで送る際は、特にファイル送信などが混ざってくると、multipart/form-dataという形式で送る必要があります。これは色々と複雑で、手で処理するのは面倒です。</p>
<p>そこで、送りたいデータを設定すればmultipart/form-dataの形式を作ってくれるのがFormDataです。FormDataを使うには、まずそのインスタンスを作ります。</p>
<pre><code>
var data = new <mark>FormData</mark>();
</code></pre>
<p>また、FormDataの第一引数に<a href="2_12.html#anchor-htmlformelement">HTMLFormElement</a>を渡すとその内容を持ったFormDataが得られます。つまり、そのFormDataをそのまま送るとそのフォームを送信したのと同じデータがサーバーに送られます。引数がない場合は、データは空の状態で作られます。</p>
<p>こうして作ったFormDataのインスタンスには、さらに<dfn>append</dfn>メソッドでデータを追加することができます。FormDataのデータは基本的にname-value形式です。例えば、
<code class="language-html">&lt;input name="foo" value="bar"&gt;</code>
というinput要素で表されるデータは、名前(name)が<code>"foo"</code>で値(value)が<code>"bar"</code>というわけです。これを追加するには、appendメソッドの第1引数に名前、第2引数に値を渡します。つまり上の例の場合こうなります。</p>
<pre><code>
data.<mark>append</mark>("foo","bar");
</code></pre>
<p>また、input要素はファイルを送信する機能がありましたね。appendメソッドではFormDataに<strong>ファイル</strong>をデータとして追加することもできます。このとき、第1引数は名前で同じですが、第2引数は<strong>Blob</strong>になります（もちろん、Blobを継承しているFileでもいいということに注意しましょう）。そして、第3引数にファイル名を与えることも可能です。すなわちこんな感じです。</p>
<pre><code>
//変数blobには何かのBlobが入っている
data.append("foo",blob,"file.txt");
</code></pre>
<p>このようにして作ったFormDataオブジェクトをsendに渡すと、multipart/form-dataの形式にして送ってくれます。つまり、HTMLのフォーム（enctype属性が<code>"multipart/form-data"</code>）を送信したときと同じ形式のデータを送ってくれます。</p>

<p>以上にわたってXMLHttpRequestを解説してきましたが、要するに使い道は、HTMLファイルとは別のデータをロードして使いたいとか、そういうときでしょう。自分のページ内のデータだけでなく、必要に応じてサーバーからデータを取得するような機能は昨今のウェブアプリケーションでは日常茶飯事です。結構使い道はあるので、活用しましょう。</p>
<div class="sidenote">
  <p>ちなみに、ずいぶん長い間XMLHttpRequestがHTTP通信を発行する唯一の方法でしたが<small>（Server-sent Eventsを除けば）</small>、最近は新世代のfetchというAPIが登場して取って代わられようとしています。これについてはまた今度紹介します。</p>
</div>

