<% @page.title="基礎第六回"
@page.prev="kiso5.html"
@page.next=[1,1] %>
<h2>基礎第六回</h2>
<h3>フォーム操作</h3>
<p>前回より本格的にHTMLとの連携をしていきます。</p>
<p>今回は、その中でも簡単なほうである<strong>フォーム</strong>の操作をします。フォームとは、次のようなやつです。</p>
<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form action="#"&gt;
      &lt;p&gt;
      &lt;input type="text" size="30"&gt;
      &lt;input type="button" value="ボタン"&gt;
      &lt;/p&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>入力ボックスやボタンがありますね。</p>
<p>これとJavaScriptが提携します。次のサンプルを見てみましょう。</p>
<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
    <mark class="ins">&lt;script type="text/javascript"&gt;
    function aaa(){
      <strong>document.form1.input1.value</strong> = "test";
    }
    &lt;/script&gt;</mark>
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form action="#" <mark class="ins">name="form1"</mark>&gt;
      &lt;p&gt;
        &lt;input type="text" size="30" <mark class="ins">name="input1"</mark>&gt;
        &lt;input type="button" value="ボタン" <mark class="ins">onclick="aaa();"</mark>&gt;
      &lt;/p&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>JavaScriptの記述が追加されたのが分かると思います。</p>
<p>ボタンを押すと、横の入力ボックスの文字が「test」になります。</p>
<p>ボタンに<strong>onclick属性</strong>があるので、クリックすると関数aaaが呼び出されるというのは分かると思います。では、そのaaa関数を見てみましょう。</p>
<p>その処理は1行しかありません。「<kbd><strong>document.form1.input1.value</strong></kbd>」という謎の変数に<kbd>"test"</kbd>を代入しています。</p>
<p>実は、これは変数ではなく決まった書き方で（厳密にはちょっと違いますが）、次のように書きます。</p>
        <pre><code><dfn>document</dfn>.<var>フォーム名</var>.<var>エレメント名</var>.<dfn>value</dfn></code></pre>
<p>フォーム名とエレメント名ですが、タグに指定されている<strong>name属性</strong>のことです。フォーム名とは当然フォームの名前なので、formタグのname属性である"form1"があてはまります。</p>
<p>エレメント名ですが、エレメントとは<strong>要素</strong>のことです。つまり、フォームに属する要素を指定するということです。今回の「"input1"」はinput要素の名前ですね。</p>
<p>これに代入すると、表示される文字列がそれにあわせて変わるということです。変数というわけではないですが、変数と同様に扱えます。</p>
<p>これを用いることで、ボタンを押したら何か処理をして結果を表示するということもできますね。</p>

<h4>よりよいフォーム操作</h4>
<p>上で紹介したやり方は、実は<strong>よくないやり方</strong>です。よく使われているのでサンプルとして紹介しましたが、<strong>使わないようにしましょう</strong>。冒頭の「とてもレベルが低い」ものの1つです。</p>
<p>というのも、実は上で紹介したやり方は<strong>省略形</strong>で、もっと正式で長ったらしい書き方があるのです。</p>
<p>それは、このような書き方です。</p>
        <pre><code>document.forms["<var>フォーム名</var>"].elements["<var>エレメント名</var>"].value</code></pre>
<p>違いとして、前回はフォーム名・エレメント名を<kbd>"</kbd>で囲みませんでしたが、今回は囲みます。</p>
<p>実はもっともっとよい方法もありますが、この基礎編では紹介しません。</p>


<h3>配列</h3>
<p><dfn>配列</dfn>とは、新しい変数の種類です（これまた厳密にはやや語弊がありますが、基礎編なので仕方ありません）。サンプルを見てみます。</p>
<pre><code>var aa = <strong>new Array</strong>("aaa","bbb","ccc");
alert(aa[0]);
alert(aa[1]);
alert(aa[2]);</code></pre>
<p>「aaa」「bbb」「ccc」のアラートが出ます。</p>
<p>まず、配列とはどういうものか説明します。簡単にいうと、<strong>ひとつの変数に複数の値を代入することができるもの</strong>です。複数の値が代入された変数を、<strong>配列</strong>といいます。</p>
<p>しかし、複数の値が入っていると使うときにどの値を使えばいいか分からないので、<strong>番号</strong>をつけて区別します。</p>
<p>上のサンプルの最後の3行はアラートを表示していますが、<code>aa[0]</code>は「<strong>aaの0番目</strong>」、同様に<code>aa[1]</code>は1番目、<code>aa[2]</code>は2番目ということです。注意してほしいのが、<strong>一番最初は1番目ではなく0番目</strong>ということです。</p>

<p><img src="img1.gif" width="237" height="147" alt="配列変数" class="ss">
  概念としては、普通の変数には値を入れる箱は1つだけですが、配列変数はひとつの変数が複数の箱を持っているというイメージです。それぞれの箱に別々の値を入れることができます。このひとつひとつのの箱を、<dfn>要素</dfn>といいます。</p>
<p>さて、配列変数の作り方ですが、普通に変数に代入するのとは違った作り方をします。</p>
        <pre><code><var>変数名</var> = <dfn>new Array</dfn>(0番目,1番目,2番目,3番目 ...)</code></pre>
<p>「<kbd>new Array( 〜 )</kbd>」で値を囲みます。値は何個あっても構いません。1個や2個だけでもいいですし（1個だけでも「要素が1個の配列変数」ということになります）、10個あってもいいです。「<kbd>,</kbd>」で区切ります。また、普通の変数と同じように、どんなものでも入れられます。</p>
<p>また、配列変数を作った後で、それぞれの要素をひとつの変数のように扱うこともできます。次のような書き方です。</p>
<pre><code>var aa = new Array("a","b","c");
aa[2] = "d";</code></pre>
<p>このコードでは、「aaの2番目の要素」に"d"を代入しています。このように、配列変数全体でなく、ひとつひとつの要素をひとつの変数のように扱うこともできます。</p>
<p>改めて要素の指定の仕方を見てみると、次のようになっています。</p>
        <pre><code><var>変数名</var>[ 数字 ]</code></pre>
<p>この数字のことを、<dfn>添字</dfn>などといいます。意味は、「<var>変数名</var>の<var>数字</var>番目」という意味になります。当然、この添字には<strong>変数も使うことができます</strong>。</p>

<h4>配列の長さ</h4>
<p>次のサンプルを見てみます。</p>
<pre><code>var aa = ["aaa","bbb"];
alert(aa.<dfn>length</dfn>);</code></pre>
<p>「2」のアラートが出ます。</p>
<p>このコード、1行目から謎の文が出ています。実はこれは、配列変数を作る<strong>別の書き方</strong>です。こっちのほうが便利で、よく使われます。</p>
        <pre><code><var>変数名</var> = [ 0番目, 1番目, 2番目 ... ]</code></pre>
<p>つまり、上のサンプルの文は</p>
        <pre><code>aa = new Array("aaa","bbb");</code></pre>
<p>とほぼ同じ意味だということです。</p>
<p>さて、次の行で「aa.length」というものをアラートで表示しています。「2」が出るので、どうやらこれは「2」を表しているようです。</p>
<p>実は、これは配列変数aaの<dfn>長さ</dfn>を表しています。長さとは、要素がいくつあるかということです。</p>
<p>つまり、この場合、配列変数aaには2つの要素があるから、「2」が表示されたというわけです。</p>
<p>配列変数の長さを得るには、次のように書きます。</p>
        <pre><code><var>配列変数</var><strong>.length</strong></code></pre>
<p>これは変数のようなもので、代入されているのは<strong>数値</strong>です。</p> 

<h3>コメント</h3>
<p>ここで、<dfn>コメント</dfn>というものを解説しておきます。コメントとは、スクリプト中に書いて置く<strong>メモ</strong>のようなものです。大規模なものになってくると、この部分ではどんなことをしているとか、そういったメモ書きが不可欠です。コメントがあるとないとでは、後で見た時のわかりやすさがかなり違います。</p>
<p>それでは、コメントの書き方を解説します。</p>
<pre><code>var a = 3;	<mark class="comment">//aに3を代入</mark>
<mark class="comment">//コメント
/*コメント
コメント　コメント*/</mark>
<mark class="comment">//alert(5);</mark>
alert(a);</code></pre>
<p>「3」とだけアラートが出ます。</p>
<p>コメントには、2種類の書き方があります。一つは、行の途中に「<strong><kbd>//</kbd></strong>」を書くと、その行の終わりまでがずっとコメントになります。</p>
<p>もう1種類は、「<strong><kbd>/*</kbd></strong>」と「<strong><kbd>*/</kbd></strong>」で囲んだ間もコメントになります。</p>
<p>前者はその行だけですが、後者は複数の行にまたがることができます。</p>
<p>サンプルでは、1行目では文の後ろにコメントが、2行目は行の先頭からコメントで、3〜4行目は2行にまたがるコメントであることがあります。5行目もコメントです。</p>
<p>コメントはプログラムに<strong>影響を与えない</strong>ので、このスクリプトは結局、1行目でaに3を代入し、6行目でそのaを表示するだけのプログラムということになります。</p>

<h3>配列の利用</h3>
<p>それでは、配列の実践的な利用を見ていきます。コメントを紹介したので、これからはコメントによる解説も交えていきます。</p>
<pre><code>var members = ["鳩山由紀夫", "麻生太郎", "福田康夫", "安倍晋三", "小泉純一郎", "森喜朗"];

var i = 0;	<mark class="comment">//カウンタ</mark>
while(i &lt; members.length){
    alert(members[i]);
    i++;
}</code></pre>
<p>実行すると、配列変数membersの中身が順番にアラートで表示されます。ちなみに、「鳩山由紀夫」はこれを書いている時点で現役の内閣総理大臣です。</p>
<p><a href="kiso5.html">基礎第五回</a>のwhile文も使われているのがわかります。解説なしでも内容がわかればかなり理解できているといえます。</p>

<p>まず、1行目では配列変数membersに配列を代入しています。0番目の要素が"鳩山由紀夫"、1番目の要素が"麻生太郎"・・・となっています。</p>
<p>さて、1行開けて変数iに0を代入しています。「カウンタ」というコメントがありますが、これは変数iがカウンタであるということをメモとして残しているわけです。このような、繰り返しのときに数が増えていき、回数や現在の番号などを表す変数がカウンタと呼ばれることがあります。</p>

<p>次のwhile文では、iが0で、members.lengthが6なので、この式は真です。したがって、中の処理が実行されます。</p>
<p>alertの引数は、<kbd>members[i]</kbd>です。iは0なので、0番目の要素ということになります。よって、「鳩山由紀夫」が表示されます。</p>
<p>次の行でiに1を足し、戻ります。members.lengthは6なので、iが5になるまでは常にwhileの式は真です。よって、members[1],members[2],.....members[5]が表示されていきます。</p>
<p>members[5]を表示した後、iは6になり、<kbd>i &lt; members.length</kbd>が偽になるので、while文が終了します。</p>

<p>このように、カウンタと繰り返しの文を使うことで、配列変数の要素ひとつひとつに処理を行うことができます。</p>

<h4>for文</h4>
<p>上のサンプルでは、繰り返しにwhile文を使いました。もちろんそれでも良いのですが、このように配列を扱うのにもっとよい繰り返しの文があります。それは<dfn>for文</dfn>です。</p>
<p>for文を使うと、上のサンプルは次のように書き換えられます。</p>
<pre><code>var members = ["鳩山由紀夫", "麻生太郎", "福沢康夫", "安倍晋三", "小泉純一郎", "森喜朗"];

<mark class="ins">for(var i=0; i &lt; members.length; i++){
    alert(members[i]);
}</mark></code></pre>
<p>for文の括弧の中には、3つの<strong>式</strong>が「<kbd>;</kbd>」で区切られて書かれています。</p>
<p>1つめの式がカウンタを初期化する（0を代入する）文で、2つめの式が繰り返しの条件、3つめの式がカウンタの値を増やす文であることがわかります。<kbd>{ 〜 }</kbd>の中には、処理の本体部分しかありません。</p>
<p>これはもう配列変数を扱うときにお決まりの書き方ですが、詳しく解説します。</p>
<pre><code><dfn>for</dfn>( <var>式1</var> ; <var>式2</var> ; <var>式3</var> ){
    文
}</code></pre>
<p><img src="img2.gif" width="171" height="346" alt="for文" class="ss">
  まず、for文に差し掛かると、<strong>式1</strong>が<strong>最初に1回だけ</strong>実行されます。for文の直前に書くのと同じです。そのため、カウンタのような変数を初期化する（0を代入する）のに適しています。</p>
<p>その後、<strong>式2</strong>の条件が判定され、真だと中の文を実行し、偽だとfor文を終了します。この処理は、while文と同じですね。</p>
<p>そして、中の処理が<strong>終わったタイミングで</strong>、<strong>式3</strong>が実行されます。while文で処理の最後にあった<kbd>i++;</kbd>をここに移動させることができます。</p>
<p>その後はまた先頭に戻り、式2の条件を判定するのを繰り返します。</p>
<p>ちなみに、第五回で解説したbreak文・continue文も使えます。continue文を使って途中で先頭に戻った場合でも、<strong>式3は実行されます</strong>。</p>
<p>このfor文は、配列変数とセットでよく使われる繰り返し文です。もちろんかなり便利な繰り返し文なので、他のさまざまな用途にも使えます。覚えておきましょう。</p>
