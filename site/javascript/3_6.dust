<p>今回は、mouseoverとmouseoutという2つのイベントについて詳しく解説します。</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
    &lt;style type="text/css"&gt;
      p{
        background-color:yellow;
        width:300px;
        height:300px;
      }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;

    &lt;p <mark>onmouseover</mark>="console.log('mouseover');" <mark>onmouseout</mark>="console.log('mouseout');"&gt;test&lt;/p&gt;

  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>このサンプルでは黄色い部分がp要素で、これにはmouseoverとmouseoutのイベントが設定されています。マウスがp要素の外からp要素の上にはいるとmouseover、p要素の上からp要素の外にでるとmouseoutが発生しているのがわかります。つまり、mouseoverとmouseoutというイベントは、ある要素の上にマウスが入ったときと出たときにそれぞれ発生するのです。ある部分にマウスが移動するとなにかが動くというような動作は、今でこそCSSを用いて作られることが多いですが、一昔前はJavaScriptのこれらのイベントを使って実装されていました。現在でも複雑なことをしたければこれらのイベントにお世話になる機会があるでしょう。</p>
<p>さて、ここで、body要素に注目してください。ページ上の黄色い部分はp要素ですが、それ以外の部分は<strong>body要素</strong>です。p要素はbody要素の子ではあるものの、マウスイベントを扱う場合はbody要素の領域はその直下の部分のみとなり、黄色い部分（p要素の部分）はbody要素の領域と見なされません。</p>
<p>body要素の上からp要素の上にマウスが移動する場合を考えてみましょう。マウスは依然としてbody要素の中にある（p要素はbody要素の中にあるので）と考えられますが、上述の領域の観点ではp要素の中（p要素の領域）はbody要素の領域ではないため、body要素から見ると、p要素という別の領域にマウスがいってしまったことになります。よって、この場合<strong>body要素ではmouseoutイベントが発生する</strong>ということになります。</p>
<p>このとき当然p要素ではmouseoverイベントが発生しています。つまり、2つの異なる要素でmouseoverイベントとmouseoutイベントが同時に発生することになります。</p>
<p>同様に、p要素の上からbody要素にマウスが移動するときはp要素ではmouseoutが発生する一方、body要素ではmouseoverが同時に発生します。</p>

<p>このように、mouseoverとmouseoutは対になって発生します。さらに、<a href="3_3.html">三章第三回</a>で解説した<strong>イベントバブリング</strong>の概念を加えると、p要素で発生したmouseoverやmouseoutは親へと伝わっていき、最終的にどちらもdocumentに到達します。</p>
<p>つまり、どこからどこへマウスが移動しようと、mouseoverとmouseoutがdocumentに伝わることになり、この2つは<strong>本質的に同じイベントである</strong>ということができます。</p>
<p>そこで、DOMでは、この2つを統一的に、まとめて扱う方法が用意されています。mouseover/mouseoutイベントのイベントオブジェクトには、<dfn>relatedTarget</dfn>というプロパティが用意されています。</p>
<p>このrelatedTargetは、今のイベントと対になるイベントが起こった要素を表しています。例えば、body要素からp要素にマウスを動かしたとき、p要素でmouseoverが発生したから、targetは当然p要素です。このとき、マウスがbody要素の上から離れたことで、対になるmouseoutがbody要素で発生するはずです。このbody要素がrelatedTargetになります。</p>
<p>より分かりやすく言えば、mouseoverイベントでは、マウスの移動先がtargetプロパティに入り、移動元がrelatedTargetプロパティに入ります。mouseoutイベントの場合は逆になります。次のサンプルで確かめてみてください。</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
    &lt;style type="text/css"&gt;
      p{
        background-color:yellow;
        width:300px;
        height:300px;
      }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;

    &lt;p&gt;test&lt;/p&gt;

    &lt;script type="text/javascript"&gt;
      var listener = function(ev){
          console.log("target:", ev.<mark>target</mark>, "relatedTarget:", ev.<dfn>relatedTarget</dfn>);
      };

      <mark>document</mark>.addEventListener('mouseover' , listener,false);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>余談ですが、このサンプルで試しているとp要素やbody要素だけでなくhtml要素が出現することがあるのに気づくと思います。実は、ページ上表示されている領域全てがbody要素ではありません。たまに罠になりますから気をつけましょう。</p>

