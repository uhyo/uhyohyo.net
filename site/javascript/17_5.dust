<p>今回も、前回紹介した<b>Shadow DOM</b>についての解説です。Shadow DOMにはまだ紹介していない便利機能があります。</p>

<h3>template要素</h3>
<p>しかしその前に、HTML5の<strong>template要素</strong>について紹介しておきます。これはCustom Elementsを使うときに便利な要素です。</p>
<p>template要素は、別のところで使いたいHTMLの断片をあらかじめ書いておくことができる要素です。template要素の中身はその場で表示するためにあるわけではないので、ページの表示時にはtemplate要素の中身は無視されます。</p>
<pre class="language-html line-numbers" data-line="9-12"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;これはテストです。&lt;/p&gt;
    &lt;template id="mytmp"&gt;
      &lt;p&gt;テンプレートの中身です。&lt;/p&gt;
      &lt;p&gt;テンプレートの中身その2です。&lt;/p&gt;
    &lt;/template&gt;
    &lt;script&gt;
      var elm = document.getElementById('mytmp');
      console.log(elm.hasChildNodes()); // <em>false</em>
      console.log(elm.content); // #document-fragment
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>この例を表示すると、ページには「これはテストです。」とだけ表示されてtemplate要素の中身は表示されないことが分かります。</p>
<p>実際、15行目でチェックしているように、template要素は子要素が無い状態になっています。template要素は特殊な要素であるため、中に書かれている構造が子要素にならないのです。子要素ではないということは、template要素の中身は真の意味で、文書中には存在しないということになります。よって、例えば<a href="2_6.html#anchor-getelementsbytagname">document.getElementsByTagName</a>などでも見つけることはできません。</p>
<p>その代わり、template要素のノード（HTMLTemplateElement）は<dfn>content</dfn>プロパティを持ちます。これは<a href="7_4.html">DocumentFragment</a>であり、実はtemplate要素の中身はここに入っています。具体的に言えば、上の例でいう<code>elm.content</code>の中身は以下に相当する構造になっているわけです。</p>
<pre class="language-html"><code>
&lt;p&gt;テンプレートの中身です。&lt;/p&gt;
&lt;p&gt;テンプレートの中身その2です。&lt;/p&gt;
</code></pre>

<p>template要素の機能はこれだけです。では、これをCustom Elements及びShadow DOMと組み合わせてみましょう（<a href="17_5_sample.html">サンプル</a>）。</p>
<pre class="language-html line-numbers" data-line="25-28"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;これはテストです。&lt;/p&gt;
    &lt;my-element&gt;&lt;/my-element&gt;

    &lt;template id="mytmp"&gt;
      &lt;p&gt;テンプレートの中身です。&lt;/p&gt;
      &lt;p&gt;テンプレートの中身その2です。&lt;/p&gt;
    &lt;/template&gt;
    &lt;script&gt;
      class MyElement extends HTMLElement {
        constructor(){
          super();

          // template要素を取得
          const tmp = document.getElementById('mytmp');
          // その中身をコピー
          const content = tmp.content.cloneNode(true);

          // ShadowRootを作って中身を追加
          this.attachShadow({
            mode: 'open',
          }).appendChild(content);
        }
      }

      customElements.define('my-element', MyElement);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>ポイントは、ShadowRootの中身を作るところです（25&ndash;28行目）。前回はinnerHTMLを使ってセットしていましたが、今回は違います。代わりに、template要素の中身を<a href="2_7.html#anchor-clone-node">cloneNode</a>によりコピーして、ShadowRootに追加しています。いちいちcloneNodeを使う理由は、my-element要素が複数回作られるかもしれないため、もとのデータ（template要素のcontentプロパティ）はそのまま残しておきたいからです。</p>
<p>これは、innerHTMLを文字列でベタ書きするよりも良いですね。第一に、コンストラクタのコードが短くなります。innerHTMLを使う場合はHTML文字列を全部コンストラクタ内に書く必要がありますが、この方法ならデータ量がどれだけだろうと上のコードと同じような記述で済みます。</p>
<p>また、パフォーマンス上の利点もあります。innerHTMLの場合はデータが文字列なので、innerHTMLにそれが代入されるとまずは文字列をHTMLとして解析してDOMの木構造を作る必要があります。対して、template要素の中身は既に解析されており、木構造として保持されています。先ほどから述べているように、template要素のcontentプロパティにDocumentFragmentとして保持されているわけですね。これをコピーして持ってくるということは、既に木構造の形で存在しているものをそのままコピーするだけで良いため、文字列を解析するよりも高速に行うことができるのです。</p>

<p>以上がtemplate要素とCustom Elements, Shadow DOMの組み合わせ方です。今後はこれを使っていきましょう。</p>

<h3>slot要素</h3>
<p>では、Shadow DOMの話に戻ります。今までのサンプルでは、Shadow DOMを用いる時点でカスタム要素の（普通の木構造の上での）中身は無視されていました。例えば、上の例を次のように変えても表示は何も変わりません。</p>
<pre class="language-html"><code>
&lt;my-element&gt;
  &lt;p&gt;ここは無視されます！！！！！😠😠😠&lt;/p&gt;
&lt;/my-element&gt;
</code></pre>
<p>しかし、実際のHTML要素は、その中身が無視される（というより中身を書かない）要素もあるものの、多くの要素はそうではありません。我々もそういう要素を作りたいですね。それを実現してくれるのが<dfn>スロット</dfn>の仕組みです。スロットは、shadowツリーの中に<strong>slot要素</strong>を配置することにより作ります（<a href="17_5_sample2.html">サンプル2</a>）。
<pre class="language-html line-numbers" data-line="10,15"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;slot要素のサンプル&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;これはテストです。&lt;/p&gt;
    &lt;my-element&gt;
      &lt;p&gt;my-elementの中身です。&lt;/p&gt;
    &lt;/my-element&gt;

    &lt;template id="mytmp"&gt;
      &lt;p&gt;↓↓↓ここにスロットがあります。&lt;/p&gt;
      &lt;slot&gt;&lt;/slot&gt;
      &lt;p&gt;↑↑↑ここにスロットがあります。&lt;/p&gt;
    &lt;/template&gt;
    &lt;script&gt;
      class MyElement extends HTMLElement {
        constructor(){
          super();

          const tmp = document.getElementById('mytmp');
          const content = tmp.content.cloneNode(true);

          this.attachShadow({
            mode: 'open',
          }).appendChild(content);
        }
      }

      customElements.define('my-element', MyElement);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>サンプル2を表示すると、次のように表示されているはずです。</p>
<pre class="language-none"><code>
これはテストです。

↓↓↓ここにスロットがあります。

my-elementの中身です。

↑↑↑ここにスロットがあります。
</code></pre>
<p>これが意味していることは、<em>my-elementの子要素がスロットの位置に表れている</em>ということです。</p>
<p>このように、shadowツリーの中にスロットを配置することで、本来の（shadowツリーではない方の）子要素をスロットの位置に配置することができます。ちなみに、shadowツリーではない本来の子孫たちのことは、shadowツリーと対比して<b>lightツリー</b>と呼ばれます。</p>
<p>さて、スロットがあれば、少しは意味のあるカスタム要素が作れそうですね。例えば、次の例は注意文を表示するカスタム要素x-warningを定義しています（<a href="17_5_sample3.html">サンプル3</a>）。</p>
<pre class="language-html line-numbers"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;slot要素のサンプル2&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;x-warning&gt;
      &lt;p&gt;注意文です！！！！！！！！&lt;/p&gt;
    &lt;/x-warning&gt;

    &lt;template id="warning-tmp"&gt;
      &lt;style&gt;
        section.wrapper {
          background-color: #ffffe3;
          color: #666600;
          border: 10px dashed #444400;
          padding: 20px;
        }
      &lt;/style&gt;
      &lt;section class="wrapper"&gt;
        &lt;h1&gt;注意&lt;/h1&gt;
        &lt;slot&gt;&lt;/slot&gt;
      &lt;/section&gt;
    &lt;/template&gt;
    &lt;script&gt;
      class Warning extends HTMLElement {
        constructor(){
          super();

          this.attachShadow({
            mode: 'open',
          }).appendChild(document.getElementById('warning-tmp').content.cloneNode(true));
        }
      }

      customElements.define('x-warning', Warning);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>このx-warning要素はCSSを用いて注意文を注意っぽい見た目で表示しています。また、「注意」という見出しも付いていますね。</p>
<p>ここで注意してほしいのが、上の例におけるx-warning要素の子要素はあくまでp要素ひとつであるということです。<small>（改行のテキストノードを除けば。）</small>Shadow DOMによって、その子要素がどのように料理されるかがカスタマイズされているのです。そして、子要素をどこで使うのかを示すのがslot要素です。</p>
<p>また、x-warning要素の中身をあとから書き換えた場合、x-warning要素の表示もそれに追随して変わります（ぜひ自分で試してみてください）。このことは、slot要素はあくまでx-warning要素の子要素をそこに直接当てはめているのであり、要素がshadowツリー内にコピーされているとかではないということを示しています。</p>

<h3>複数のスロットを扱う</h3>
<p>実は、shadowツリーの中には複数のスロットを作ることができます。これによりカスタム要素の表示を外からよりカスタマイズできます。</p>
<p>例えば、上の例では「注意」という見出しは固定でしたが、ここもカスタマイズしたいとしましょう。そのためには、「注意」に該当するスロットを作ります。</p>
<pre class="language-html line-numbers" data-line="22"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;slot要素のサンプル3&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;x-warning&gt;
      &lt;p&gt;注意文です！！！！！！！！&lt;/p&gt;
    &lt;/x-warning&gt;

    &lt;template id="warning-tmp"&gt;
      &lt;style&gt;
        section.wrapper {
          background-color: #ffffe3;
          color: #666600;
          border: 10px dashed #444400;
          padding: 20px;
        }
      &lt;/style&gt;
      &lt;section class="wrapper"&gt;
        &lt;h1&gt;&lt;slot name="title"&gt;注意&lt;/slot&gt;&lt;/h1&gt;
        &lt;slot&gt;&lt;/slot&gt;
      &lt;/section&gt;
    &lt;/template&gt;
    &lt;script&gt;
      class Warning extends HTMLElement {
        constructor(){
          super();

          this.attachShadow({
            mode: 'open',
          }).appendChild(document.getElementById('warning-tmp').content.cloneNode(true));
        }
      }

      customElements.define('x-warning', Warning);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>22行目が新しく作ったスロットです。ここでは2つの新要素が登場しました。</p>
<p>ひとつは、slot要素の<strong>name属性</strong>です。このようにスロットには名前を付けることができます。複数のスロットがある状況では、このようにスロットに名前を付けてスロットを区別してあげる必要があります。</p>
<p>もうひとつは、slot要素に子がある点です。今回の場合、子は従来の見出しである「注意」というテキストです。</p>
<p>まず、カスタム要素の子要素がスロットに入ると先ほど述べましたが、正確にはshadowツリーの中の<em>デフォルトスロット</em>に入ります。デフォルトスロットとは、name属性により名前が付けられていないスロットです。<small>（もし名前のないスロットを複数作ってしまった場合は一番最初のものとなります。）</small></p>
<p>それ以外のスロットに入るものを指定するには、次の例のように明示的に指定する必要があります（<a href="17_5_sample4.html">サンプル4</a>）。</p>
<pre class="language-html line-numbers" data-line="9"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;slot要素のサンプル3&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;x-warning&gt;
      &lt;span <mark>slot="title"</mark>&gt;ちゅうい&lt;/span&gt;
      &lt;p&gt;注意文です！！！！！！！！&lt;/p&gt;
    &lt;/x-warning&gt;

    &lt;template id="warning-tmp"&gt;
      &lt;style&gt;
        section.wrapper {
          background-color: #ffffe3;
          color: #666600;
          border: 10px dashed #444400;
          padding: 20px;
        }
      &lt;/style&gt;
      &lt;section class="wrapper"&gt;
        &lt;h1&gt;&lt;slot name="title"&gt;注意&lt;/slot&gt;&lt;/h1&gt;
        &lt;slot&gt;&lt;/slot&gt;
      &lt;/section&gt;
    &lt;/template&gt;
    &lt;script&gt;
      class Warning extends HTMLElement {
        constructor(){
          super();

          this.attachShadow({
            mode: 'open',
          }).appendChild(document.getElementById('warning-tmp').content.cloneNode(true));
        }
      }

      customElements.define('x-warning', Warning);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>今回、x-warning要素の子要素がひとつ増えました。それは9行目のspan要素です。注目すべきは、このspan要素に<dfn>slot属性</dfn>が付いているという点です。slot属性によりスロット名が指定されている場合、その要素はデフォルトスロットに入る代わりに指定した名前のスロットに入ります。よって、この場合「ちゅうい」というテキスト（正確にはそのテキストを含むspan要素）がtitleスロットに入ります。そのあとのp要素はslot属性が指定されていないため、デフォルトスロットに入ります。</p>
<p>なお、下の例のように、同じスロットに複数の要素を入れることができます。</p>
<pre class="language-html"><code>
&lt;x-warning&gt;
  &lt;span slot="title"&gt;ちゅうい&lt;/span&gt;
  &lt;span slot="title"&gt;ちゅうい2&lt;/span&gt;
  &lt;span slot="title"&gt;ちゅうい3&lt;/span&gt;
  &lt;p&gt;注意文です！！！！！！！！&lt;/p&gt;
&lt;/x-warning&gt;
</code></pre>
<p>こうすると見出しは「ちゅういちゅうい2ちゅうい3」となるでしょう。</p>
<p>また、スロットはlightツリーの一番上（つまり、カスタム要素の直接の子要素）にある必要があります。次のような位置にslot属性を持つ要素を配置しても無意味です。</p>
<pre class="language-html"><code>
&lt;x-warning&gt;
  &lt;p&gt;注意文です！！！！！<mark>&lt;span slot="title"&gt;！！！&lt;/span&gt;</mark>&lt;/p&gt;
&lt;/x-warning&gt;
</code></pre>

<p>そして、スロットの子は、そのスロットに対して中身が指定されなかったときに表示される値、すなわちスロットの<strong>デフォルト値</strong>です。上の例では、titleスロットの子は「注意」というテキストだったので、titleスロットに何も与えられなかった場合は見出しとしてデフォルトの「注意」が表示されることになります。</p>

<p>以上がスロットの使い方です。まとめると、カスタム要素はshadowツリーの中にスロットを用意することで、その要素に与えられた中身を利用することができます。また、スロットは複数用意することができ、デフォルトスロット以外に要素を入れたいときは対応するslot属性を使う必要があります。</p>

<h3>スロットとCSS</h3>
<p>前回、Shadow DOMとCSSの関係を見ました。前回の解説によれば、shadowツリーの中と外のスタイル定義は互いに影響を及ぼさないのでした。今、スロットを用いてshadowツリーの外の要素をshadowツリーの中に差し込むことができるようになりました。では、スロットに渡された要素は中なのでしょうか、それとも外なのでしょうか。</p>
<p>答えは外です。カスタム要素の子として存在する要素は、あくまで外の世界の住人です。スロットによりshadowツリーの中に差し込まれたとしても、それは依然として外の世界の存在なのです。そう考えると、スロットというのは外の世界の存在をその位置に招待するというようなイメージですね。</p>
<p>そのことを確かめてみましょう（<a href="17_5_sample5.html">サンプル5</a>）。</p>
<pre class="language-html line-numbers"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;スロットとCSSのサンプル&lt;/title&gt;
    &lt;style&gt;
      p.foo { color: red; }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;my-element&gt;
      &lt;p class="foo"&gt;私は外の世界の住人です。&lt;/p&gt;
      &lt;p class="bar"&gt;私も外の世界の住人です。&lt;/p&gt;
    &lt;/my-element&gt;
    &lt;template id="mytmp"&gt;
      &lt;style&gt;
        p.bar { color: blue; }
      &lt;/style&gt;
      &lt;slot&gt;&lt;/slot&gt;
    &lt;/template&gt;
    &lt;script&gt;
      class MyElement extends HTMLElement {
        constructor(){
          super();

          this.attachShadow({
            mode: 'open',
          }).appendChild(document.getElementById('mytmp').content.cloneNode(true));
        }
      }
      customElements.define('my-element', MyElement);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>このサンプルでは、1つ目のp要素（12行目）は赤色で表示され、2つ目のp要素はデフォルトの色（普通は黒色）で表示されるはずです。</p>
<p>これが意味することとして、まず1つ目のp要素には外の世界のCSS定義（6&ndash;8行目）が適用されていることが分かります。1つ目のp要素が赤色になったのは7行目のスタイル定義のせいですね。</p>
<p>一方、shadowツリーの中のスタイル定義（16&ndash;18行目）は2つ目のp要素（13行目）には適用されていないことが分かります。つまり、2つ目のp要素はスロットに入るとはいえ、依然としてshadowツリーの中のCSSの影響は受けないということです。</p>
<p>この結果はわりと直感的なのではないかと思います。今回の2つのp要素はあくまでmy-elementを使う側（外の世界）の所有物なので、外の世界によってスタイルが決められるのです。shadowツリーの中のスタイル定義の影響を受けるのはshadowツリーの中の存在だけです。</p>

<p>以上の説明で、カスタム要素をかなり自由に作れるようになったのではないかと思います。あとひとつ紹介すべきことがあるのですが、それは次回にしましょう。</p>
