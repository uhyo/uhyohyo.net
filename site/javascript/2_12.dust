<p>フォームについての説明は、<a href="kiso6.html">基礎第六回</a>にもありましたね。今回はよりDOM的な観点からフォームについて振り返ります。</p>

<h3>HTMLFormElement</h3>
<p>form要素のHTMLElementは、<dfn>HTMLFormElement</dfn>と呼ばれます。</p>
<p>このform要素ですが、今までと同様にgetElementByIdなどで取得することも可能ですが、実は専用のものもあります。</p>
<p>それは、documentが持つ<dfn>forms</dfn>というプロパティで、これは<strong>HTMLCollection</strong>です。例えば、</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form id="form1" action="?"&gt;
    &lt;/form&gt;

    &lt;script type="text/javascript"&gt;
      var form = document.<dfn>forms</dfn>.item(0);

      console.log(form);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>このようにform要素を取得することができます。変数formには0番目のform要素が代入されていることになります。0番目というのは、例によって文書順です。すなわち、ページ内で最初に存在するform要素が0番目になります。</p>
<p>実は、HTMLCollectionには番号で要素を取得するほかに、<em>名前で要素を取得する</em>機能を持ちます。それには<dfn>namedItem</dfn>というメソッドを用います。これは、引数で与えられた名前を持つ要素を探して返すものです。名前というのは、<b>id属性</b>または<b>name属性</b>のことです。今問題のform要素にはform1というidがついていますから、次のようにform要素を取得することもできます。</p>
<pre><code>var form = document.forms.<mark>namedItem</mark>("form1");</code></pre>
<p>さらに、これはnamedItemメソッドを陽に使わなくても、次のようにプロパティアクセスの形で書くことができます。</p>
<pre><code>var form = document.forms["form1"];</code></pre>
<p>もちろん、これは次のように書いても同じことです。</p>
<pre><code>var form = document.forms.form1;</code></pre>
<p>これで<a href="kiso6.html">基礎第六回</a>で出てきた<code><mark>document.forms["フォーム名"]</mark>.elements["エレメント名"].value</code>という書き方が部分的に説明できました。</p>

<h4>elements</h4>
<p>実は、HTMLFormElementは<dfn>elements</dfn>というプロパティを持っています。これは、そのフォームが持つ<dfn>コントロール</dfn>のHTMLCollectionです。コントロールとは、フォームの中にある操作出来るもののことで、select要素とか、input要素とか、textarea要素とか、button要素などが当てはまります。</p>
<p>これは、名前でフォームコントロールを指定して取得したいときに便利です。そして、これで先ほどの<code>document.forms["フォーム名"].<mark>elements["エレメント名"]</mark>.value</code>の部分が説明できました。</p>

<h4>HTMLFormElementのメソッド</h4>
<p>HTMLFormElementは、<dfn>submit</dfn>と<dfn>reset</dfn>という2つのメソッドを持っています。どちらも引数はありません。これらは、</p>
<pre><code>&lt;input type="<mark>submit</mark>" value="送信"&gt;
&lt;input type="<mark>reset</mark>" value="送信"&gt;
</code></pre>
<p>これらのボタンを押したのと同じ動作をします。</p>
<p>つまり、submitメソッドはそのフォームを送信し、resetメソッドはそのフォームをリセットします。</p>
<pre class="language-html"><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form action="http://www.google.com/"&gt;
    &lt;/form&gt;

    &lt;script type="text/javascript"&gt;
      var form = document.forms[0];

      form.<dfn>submit</dfn>();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>このサンプルは、実行するといきなりGoogleにジャンプします。これは、JavaScriptによってフォームが送信され、そのフォームの送信先がGoogleになっているからです。</p>

<h3>HTMLInputElement</h3>
<p>さて、それでは、1つ1つのコントロールの操作について見ていきましょう。</p>
<p>まずは、input要素です。input要素のHTMLElementは、<dfn>HTMLInputElement</dfn>といいます。このHTMLInputElementは多くのプロパティを持っていますが、input要素は、入力ボックスやボタン、チェックボックスなどさまざまな種類のコントロールになる可能性があり、それぞれの種類専用のプロパティなどがあります。</p>

<h4>汎用のプロパティ</h4>
<p>まず、どんな種類のinputでも使えるプロパティを見てみます。</p>
<p><dfn>form</dfn>プロパティは、そのコントロールが所属するフォームの要素、つまりHTMLFormElementが代入されています。これは木構造の形にかかわるプロパティですから、例によって書き換えはできません。所属するフォームを変えるには、そのフォームのノードを別のフォームの下にくっつける作業が必要になります。</p>

<p>また、<dfn>value</dfn>プロパティは、そのvalue属性を取得できます。ただし、入力ボックスの場合は、ユーザーが入力ボックスの中身を変更する可能性があります。その場合、<strong>現在の値（変更後の値）を取得します</strong>。変更前の値（もともとのvalue属性）を取得するには、<dfn>defaultValue</dfn>プロパティを使います。</p>
<pre class="language-html"><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form action="?"&gt;
      &lt;p&gt;
        &lt;input id="aaa" type="text" value="testtest"&gt;
        &lt;input type="button" value="check" onclick="check();"&gt;
      &lt;/p&gt;
    &lt;/form&gt;
      &lt;script type="text/javascript"&gt;
      function check(){
        var input = document.getElementById('aaa');
        console.log(input.<dfn>value</dfn>);
      }
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>今回のサンプルでは、ユーザーが変更した後で処理をするために、イベントを使用しています。詳しくは<a href="kiso5.html">基礎第五回</a>を参照して下さい。</p>
<p>これを実行すると、画面には"testtest"が入力された入力ボックスとボタンがあります。ボタンを押すと、check関数が呼ばれます。</p>
<p>check関数では、入力ボックスのHTMLElementをgetElementByIdによって取得し（そのためにinputにはid属性をつけています）、そのvalueプロパティを表示しています。入力ボックスを変更すると、変更後の値がそのまま表示されることがわかります。</p>

<p><dfn>disabled</dfn>プロパティは、disabled属性を取得します。しかし、disabled属性は、</p>
<pre class="language-html"><code>&lt;input <mark>disabled</mark> type="button" value="test"&gt;</code></pre>
<p>のように、値を持たず、あるかないかだけです。それをどう扱うかというと、disabledプロパティは、文字列ではなく、<strong>真偽値</strong>が入っています。すなわち、あればtrue、なければfalseです。書き換えできますが、この場合も真偽値を代入しなければなりません。</p>

<p><dfn>type</dfn>プロパティは、type属性に対応し、そのコントロールの種類が文字列で入っています。</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form action="?"&gt;
      &lt;p&gt;
        &lt;input type="text" value="test"&gt;
        &lt;input type="button" value="test"&gt;
        &lt;input type="checkbox" value="test"&gt;
        &lt;input type="radio" value="test"&gt;
      &lt;/p&gt;
    &lt;/form&gt;

    &lt;script type="text/javascript"&gt;
      var form = document.forms.item(0);

      for(var i=0; i &lt; form.<mark>elements</mark>.length; i++){
        console.log(form.elements[i].<dfn>type</dfn>);
      }
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>このサンプルでは、まずform要素を取得し、for文とform.elementsによってフォームが持つコントロールひとつひとつについて処理をしています。このようなfor文の書き方については、過去に解説していますね。iが0からform.elementsの最後の要素の番号まで増加するため、ひとつひとつの要素について処理をすることができるのでした。</p>
<p>このでは、そのひとつひとつの要素のtypeを表示しています。</p>
<p>「text」「button」「checkbox」「radio」と表示されるはずです。</p>

<p>さて、HTMLInputElementは<dfn>blur</dfn>、<dfn>focus</dfn>、<dfn>click</dfn>というメソッドも持っています。すべて引数はありません。blurは、そのコントロールから<strong>フォーカス</strong>を外し、逆にfocusは与えます。</p>
<p>clickは、そのコントロールを<strong>クリックしたことにします</strong>。例えば、ボタンなら押されるし、チェックボックスやラジオボタンも押されたことになります。ただし、入力ボックスの場合は効果がなく、何も起きません。</p>

<h4>入力ボックス</h4>
<p>入力ボックス（typeが"text", "password", "search", "url"などの場合）は、まず<dfn>readOnly</dfn>プロパティが使えます。これは、readonly属性を取得するものですが、disabledと同じく</p>
<pre><code>&lt;input <mark>readonly</mark> type="text" value="testtest"&gt;</code></pre>
<p>のような指定をするため、真偽値です。このプロパティは、属性名と異なりOが大文字になっていることに注意してください。このようにDOMでは、複合語の場合プロパティ名に大文字が含まれることがあります。</p>

<p>入力ボックスの場合は<dfn>select</dfn>というメソッドがあります。引数はありません。これは、入力ボックスの文字を全て選択状態にするというものです。</p>

<h4>チェックボックス・ラジオボタン</h4>
<p>チェックボックスやラジオボタン（typeが"checkbox"や"radio"）の場合、<dfn>checked</dfn>というプロパティを使えます。これは<strong>真偽値</strong>で、そのinputがチェックされていればtrue、されていなければfalseです。これは先程紹介したvalueプロパティと同様、<strong>現在の状態</strong>を取得します。最初の状態（もともとchecked属性で指定されていた状態）を取得するには、<dfn>defaultChecked</dfn>プロパティを使います。</p>

<h3>HTMLTextAreaElement</h3>
<p>HTMLTextAreaElementは、textarea要素のHTMLElementで、input要素（入力ボックスの場合）と近い使い方ができます。例えば、value属性があります。</p>

<h3>HTMLButtonElement</h3>
<p>HTMLButtonElementは、button要素のHTMLElementで、これもinput要素（ボタンの場合）と同じように扱えます。</p>

