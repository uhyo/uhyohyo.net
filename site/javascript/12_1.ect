<% @page.title="十二章第一回　classList"
@page.prev=[11,7]
@page.next=[12,2] %>
<h2>十二章第一回　classList</h2>
<p>今度<strong>HTML5</strong>の仕様が策定され、それに伴って、HTML用DOMにも新しい仕様が加えられました。そこで、この第十二章ではこの新しい仕様について解説します。</p>
<p>HTML5がよく分からないという人は、<a href="http://uhyohyo.sakura.tv/html/">HTML5講座</a>も書いたのでぜひ読んで下さい。</p>
<p>これらはHTML5で追加された仕様ですから、これらを使いたい時にはページをHTML5で書く必要があります。</p>
<p>また、HTML5とは直接の関係が無くとも、このHTML5の時代に出現してきた新しいAPIについても解説していきます。</p>

<p>さて、今回まず紹介するのは<dfn>classList</dfn>です。これは非常に便利です。その名の通り、HTML要素の<strong>class属性</strong>を扱うものです。</p>
<p>かなり前になりますが、<a href="2_6.html">第二章第六回</a>でclassNameプロパティを紹介しました。たとえば、</p>
        <pre><code>&lt;div <mark>class="aaa"</mark>&gt;&lt;/div&gt;</code></pre>
<p>というdiv要素ならばそのclassNameプロパティは"aaa"です。</p>
<p>ここに新しいクラスbbbを追加したいならば、<code>className += " bbb"</code>としてやることでclassNameは<code>"aaa bbb"</code>となります。</p>
<p>ところが、ここからクラスaaaを除去したい場合はどうでしょう。これには多少面倒な処理が必要になります。具体的には、<a href="4_3.html">四章第三回</a>で紹介した正規表現を用いることになるでしょう。</p>
<p>以前はそういった面倒な処理をする必要があったのですが、HTML5ではその必要がなくなりました。このような処理を分かりやすく簡潔に行うのがclassListなのです。classListはいくつかのメソッドを持ち、それらによってclass属性をいじることができます。</p>
<p>ちなみに、classListは<strong>DOMTokenList</strong>というオブジェクトの一種であり、これは「トークン（文字列）のリスト」を表すオブジェクトということになっています。classListというのは実は、その要素が属するクラスのリストを表すものですので、このDomTokenListの意味と合致するということで、classListはDOMTokenListの一種であるということになっています。すなわち、今からclassListのメソッドとして紹介するものは実はDOMTokenListのメソッドであるので、将来的に、classList以外にもDOMTokenListができた場合、それらにも同様のメソッドが使用できます。</p>

<h3>contains</h3>
<p>ということで、まず紹介するのは<dfn>contains</dfn>メソッドです。これは、そのリストにある文字列が含まれるかどうかを判定します。判定するということですから、結果は真偽値（trueかfalse）になりますね。</p>
<p>例えば、ある要素がクラス"long"に属しているかどうかは次のように書きます。</p>
        <pre><code>element.<mark>classList</mark>.<strong>contains</strong>("<mark>long</mark>")</code></pre>

<h3>add・remove</h3>
<p>そして、このclassListを通して要素が属するクラスを変更することもできます。これらは、classListにトークン（文字列）を追加、あるいは削除するという形で表されます。</p>
<p>追加には<dfn>add</dfn>・<dfn>remove</dfn>を使います。</p>
<p>例えば、ある要素にクラス"foo"を追加したい場合は次のようにします。</p>
        <pre><code>element.<mark>classList</mark>.<strong>add</strong>("<mark>foo</mark>");</code></pre>
<p>逆に、ある要素からクラス"foo"を削除したい場合にはこうです。</p>
        <pre><code>element.<mark>classList</mark>.<strong>remove</strong>("<mark>foo</mark>");</code></pre>
<p>これらも、従来のHTML+JavaScriptではややこしい処理をする必要がありました。</p>
<p>ちなみに、追加したいのに既にある・あるいは削除したいのに既に無い　という場合も、うまく処理してくれるので問題ありません。</p>
<p>従来はclassNameを文字列として直接いじらないといけなかったため、同じクラスを2回書いてしまうとかそういうことがあるかもしれませんでした。そういった問題から解放されるので、これはいいですね。</p>

<h3>toggle</h3>
<p>さらに便利かもしれないのが、<dfn>toggle</dfn>です。これは、指定したクラスの有る無しを切り替えるというものです。つまり、既にそのクラスがある場合は無くし、まだ無い場合はクラスを追加します。これにより、例えば「クリックすると表示・非表示を切り替え」なんてものを作りたい場合に、今表示しているかどうかを何かのクラスで表すとすれば、toggleだけでそれを実現することができます。</p>
<p>例えば</p>
        <pre><code>element.<mark>classList</mark>.<strong>toggle</strong>("<mark>foo</mark>");</code></pre>
<p>こうすることで、クラスfooが無い場合は追加、ある場合はそれを取り除きます。</p>

<h3>item</h3>
<p>これは使う機会があまり多くないかもしれませんが、リストの各要素には配列のように通し番号がふってあって、<dfn>item</dfn>メソッドで、各番号のトークン（クラス名）を得ることができます。また、そのための<dfn>length</dfn>プロパティもあります。</p>

<p>以上、classListを紹介しました。使いどころを見つければ非常に便利ですので、活用しましょう。</p>

<h3>getElementsByClassName</h3>
<p>おまけとして紹介するのが、<dfn>getElementsByClassName</dfn>です。これは、「あるクラスに属する要素を列挙する」というメソッドです。使い方はgetElementsByTagNameと同じですが、要素名の代わりにクラス名を引数として渡します。返り値は、getElementsByTagNameと同じくNodeListです。</p>
<p>これは非常に便利なもので、HTML5で仕様に組み入れられました。今までは、classListも無い中、全ノードを列挙して1つずつ探す必要がありましたが、これがあれば非常に楽です。ぜひ活用しましょう。</p>
