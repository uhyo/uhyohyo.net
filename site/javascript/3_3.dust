<p>今回は、<dfn>イベントバブリング</dfn>について解説します。DOMのイベントシステムの中でも面白いところなので、ぜひマスターしてください。</p>
<p>さっそくですが、次のサンプルを見てみましょう。</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body <mark>onclick="console.log('body');"</mark> style="background-color:#eee;border:10px solid black"&gt;
    &lt;div <mark>onclick="console.log('div');"</mark> style="background-color:yellow;width:300px;height:300px;padding:10px"&gt;
      &lt;p <mark>onclick="console.log('p');"</mark> style="background-color:aqua"&gt;test&lt;/p&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>body、div、pのそれぞれにonclick属性がついています。また、スタイルシートでいろいろ色分けしています。黄色い部分がdivで、水色の部分がpです。ついでに、bodyには枠もつけてみました。余談ですが、実際に見てみるとわかるように、bodyの領域というのは画面全体ではありません。body要素にイベントを設定する際に罠となることもありますから、注意してください。</p>
<p>上のHTMLのbody要素以下の木構造は次のようになっています。久しぶりに木構造を出すので改行のテキストノードなども省略していません。</p>
<div class="tree">
body
<ul>
  <li>#text （改行）
  <li>div
    <ul>
      <li>#text （改行）
      <li>p
        <ul>
          <li>#text <code>"test"</code>
        </ul>
    </ul>
</ul>
</div>

<p>さて、body要素をクリックすると'body'のログが、div要素なら'div'のログが、p要素なら'p'のログが出るように思います。しかし、やってみると、実際は少し違います。</p>
<p>body要素のときはいいのですが、div要素をクリックすると、「div」が出た後に「body」も出ます。さらに、p要素の場合、「p」「div」「body」と3つも出ます。</p>
<p>このことが意味するのは、<strong>ある要素でイベントが起こると、その親要素でもイベントが起こる</strong>ということです。</p>
<p>具体的には、次のようになっています。</p>
<p>例えばp要素をクリックした場合、</p>
<div class="tree">
body
<ul>
  <li>#text （改行）
  <li>div
    <ul>
      <li>#text （改行）
      <li>p <mark>←ここ</mark>
        <ul>
          <li>#text <code>"test"</code>
        </ul>
    </ul>
</ul>
</div>
<p>まず、ここでイベントが発生し、「p」が表示されます。なお、実際にクリックされたのはテキストですが、イベントが発生するのはそこの<strong>要素</strong>であるということになっています。テキストノードではイベントは発生しません。</p>

<p>その後、</p>
<div class="tree">
body
<ul>
  <li>#text （改行）
  <li>div <mark>←ここ</mark>
    <ul>
      <li>#text （改行）
      <li>p
        <ul>
          <li>#text <code>"test"</code>
        </ul>
    </ul>
</ul>
</div>
<p>このようにその親にイベントが<strong>伝わります</strong>。ここで、p要素の親はdiv要素ですから、div要素でもイベントが発生し、「div」が表示されます。</p>
<p>さらに、</p>
<div class="tree">
body <mark>←ここ</mark>
<ul>
  <li>#text （改行）
  <li>div
    <ul>
      <li>#text （改行）
      <li>p
        <ul>
          <li>#text <code>"test"</code>
        </ul>
    </ul>
</ul>
</div>
<p>このように、さらに親に伝わってbody要素でもイベントが発生し、「body」が表示されます。</p>
<p>今回は木構造をbody以下しか書いてませんが、実際にはbodyの上にはさらにhtml要素があるので、html要素でもイベントは発生しています。ただ、html要素にはイベント属性がないため、何も起こりません。</p>

<p>このように、イベントが親へ親へと伝わっていく流れを<dfn>イベントバブリング</dfn>といいます。</p>
<h4>イベントバブリングの利用</h4>
<p>では、このイベントバブリングは、実際にはどんなふうに利用できるのでしょうか。例えば、<strong>複数の要素のイベントをまとめて監視する場合</strong>に使えます。つまり、</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;
      &lt;p onclick="console.log('p');"&gt;test&lt;/p&gt;
      &lt;p onclick="console.log('p');"&gt;test&lt;/p&gt;
      &lt;p onclick="console.log('p');"&gt;test&lt;/p&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>こういう場合、3つのp要素がそれぞれイベント属性を持つのは無駄です。そこで、以下のようにその親であるdiv要素でイベントを監視すれば、1つのイベント属性にまとめることができます。というのも、p要素で発生したイベントはイベントバブリングにより親のdiv要素に伝わるからです。</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div <mark class="ins">onclick="console.log('p');"</mark>&gt;
      &lt;p&gt;test&lt;/p&gt;
      &lt;p&gt;test&lt;/p&gt;
      &lt;p&gt;test&lt;/p&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>ちなみに、さっきからイベント属性を例として使っていますが、addEventListenerでJavaScriptからイベントを登録する場合も同じです。</p>

<p>ただし、実は、上に示した例のようにp要素のイベントをdiv要素に動かしただけでは不完全です。なぜなら、書き換える前の例では「div要素の中のp要素」をクリックしたときにイベントが発生するのに対し、書き換えたあとの例では、div要素の中のp要素以外の場所をクリックしても反応してしまうからです。</p>
<p>この問題点を直す方法は、<a href="3_5.html">三章第五回</a>で解説します。今回はイベントバブリングの仕組みを紹介しました。</p>

