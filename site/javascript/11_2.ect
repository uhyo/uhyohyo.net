<% @page.title="十一章第二回　bind"
@page.prev=[11,1]
@page.next=[11,3] %>
<h2>十一章第二回　bind</h2>
<p>もう1つ便利なのが<dfn>bind</dfn>です。bindは<a href="9_5.html">九章第五回</a>でちらっと出てきたもので、ある関数が呼ばれたときのthisの値を固定するというもので、関数が持つメソッドです。</p>

<p>次の単純な例を見てみましょう。</p>
<pre><code>function showThis(){
  console.log(this);
}

var <mark>foo</mark> = showThis.<strong>bind</strong>("菅直人");

<mark>foo</mark>();
          </code></pre>
<p>「菅直人」がログされます。すまり、showThis内で、thisが"菅直人"になっていたのです。</p>
<p>ここで、bindの戻り値fooを関数として呼んでいることから分かるように、bindの戻り値もまた関数です。</p>
<p>bindの戻り値は、もとの関数（この場合showThis）と同じ関数なのですが、その中でのthisの値が指定したもので固定されています。</p>
<p>これは、setTimeoutや、addEventListenerなどの<strong>コールバック関数</strong>として、this値に依存する関数を使用したい場合に有用です。</p>

<h3>bindによる引数の固定</h3></p>
      <pre><p>実は、bindには他にも機能があります。それは、その関数を呼び出す際に、thisだけでなく引数も固定できるということです。次のサンプルを見て下さい。
          <code>function sum(x,y,z){
  return x+y+z;
}

var <mark>foo</mark> = sum.<strong>bind</strong>(null,10);

console.log(<mark>foo</mark>(20,30));
          </code></pre>
<p>まず、bindに第二引数が付いています。今回、もととなる関数sumにthisは出てこないので、bindの第一引数はnullとしています。</p>
<p>それでできた関数fooはsumと同じはたらきをするはずですが、引数を2つしか渡していません。それで、返ってくる値は60です。</p>
<p>何が起きているかというと、bindの第二引数である10が、fooを呼び出すときの第一引数として固定されたのです。</p>
<p>だから、foo呼び出し時に、関数本体であるsumの第一引数xには常に10が渡されます。残りの2つの引数は、fooの呼び出し時の引数がそのまま流れていきます。</p>

<p>たまに使いどころがあることでしょう。</p>
