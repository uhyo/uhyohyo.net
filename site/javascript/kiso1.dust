<h3>JavaScriptの書き方</h3>
<p>基礎のページでは、JavaScriptを1から解説します。JavaScriptはもともとインターネットブラウザ上で動くプログラミング言語として誕生しました。ここでは、それに倣ってブラウザ上、つまりウェブページの上でJavaScriptを動かしてみましょう。</p>
<p>ブラウザが表示するウェブページというのは、HTMLにより記述されています。この講座ではHTMLの解説はしません。HTMLが分からないという人は、軽くでいいのでどこかのウェブサイトで勉強しておくとよいでしょう。</p>
<p>さて、ウェブページ上でJavaScriptを動かすには、<strong>script</strong>という要素を使います。</p>
<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script type="text/javascript"&gt;
      alert("test");
    &lt;/script&gt;
    &lt;p&gt;test&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>これを適当なhtmlファイルに保存して開いてみると、「test」というアラートが出ます。</p>
<p>さて、scriptタグを置く場所ですが、head内に置くのがよく見られますが、基本的にどこでもいいです。body内に置いてもいいですし、bodyの一番最後に置くパターンも実はそれなりにあります。</p>

{!
<h3>IEをやめよう</h3>
<p>本題に入る前に、ちょっとブラウザの話題です。</p>
<p><strong>IE</strong>とは、「Internet Explorer」のことで、Windowsのパソコンを手に入れた後にインターネットを開くと出るやつです。</p>
<p>「ブラウザ」というインターネットを見るソフトの一種なのですが、このIEがよくないブラウザで、それにも関わらず（日本の）Windowsではデフォルトでこのブラウザが入っているため、多くの人がIEを使用しています。</p>
<p>JavaScriptの観点からどういう点がよくないかを述べると、一部の機能でIEは<strong>独自の方法</strong>を作ってしまっています。しかも<strong>標準の方法に対応していない</strong>ことがあります。</p>
<p>IEもバージョンアップを重ねており、最新のIE（2014年7月現在、IE11がでています）は他のブラウザと比べてもそんなに遜色ないのですが、古いIEはそれはそれはひどいものでした。この講座を書き始めたとき（2010年頃）はIEの最新バージョンが8で、他のブラウザが現代人だとしたらIEだけ明治時代に生きているというくらい違いました。普通のブラウザ向けの処理とIE向けの処理を別々に書いてやる必要があったのです。</p>
<p>今はマシになったといっても、IEにはもう一つ特徴があります。それは、<strong>古いIEが今でも使われている</strong>ということです。このサイトも未だに（2014年7月現在）IE8からのアクセスが数%あります。これは、以前のOSだとIEが最新版にならないことなどが関係しています（例えばWindows VistaはIE9までしかバージョンアップできません）。</p>
<p>ですから、IEはWebサイトを作る人達の間ではひどく嫌われています。無知な人はブラウザにも詳しくないためIEを使う割合が高いので、IEでは動かないようなWebサイトを見ても自分に原因があるとは思わずにクレームをつけてくるからです。特に商用のサイトなどになれば、そんな無知なユーザーでも無視するわけにはいかず、IEでも動くように余計な労力をかける必要があるのです。</p>

<p>さて、それではどうすればいいのかですが、自分は<strong>IEなんて使わないようにしましょう。</strong>「Firefox」や「Opera」「Google Chrome」などの別のブラウザを使うことをおすすめします。自分の愛用のブラウザは「Opera」と「Google Chrome」です。</p>
<p>FirefoxやChromeなどはJavaScriptの仕様に関してなかなか厳格です。IEを基準にして物事を考えるのは絶対にしてはいけないことです。それは標準的とは限らないからです。もちろん、何か作った時はIEでも動くか確かめるためにIEを使用するのは悪いことではありません。ただ、普段からIEを使うというのは避けるべきでしょう。</p>
<p>今後いろいろJavaScriptの解説をしていきますが、IEではまともに動かない場合があると思います。IEでも同じような動作をするようにする方法も無いこともないのですが、それは標準仕様ではないので、解説しません。</p>
<p>先ほど最新のIE11ならば他のブラウザと遜色ないと述べましたが、実は<a href="10_1.html">第十章</a>で解説するXPathに関してはIE11でも動作しません。このように、この講座を読むにあたってはIEだと不都合があるかもしれません。ぜひIEをやめましょう。</p>
!}

<!-- (IE8時代の名残)
<h4>IEのやめ方</h4>
<p>さて、IEをやめたくなりましたか？とりあえず、やめないとこのページはまともに見られないでしょう。</p>
<p>今IEだという人も、今までIEで困ったことなんかないから別にIEをやめなくてもいいと思う人もいるかもしれません。</p>
<p>実はそれは、<strong>作る側がIEに合わせてページを作っていたから</strong>なのです。つまり、考えられるのは、<strong>作る側もIEを使っていた</strong>という可能性か、<strong>作る側が、IEでも見られるように工夫した</strong>という可能性があります。</p>
<p>後者のようにいろいろなブラウザで見られるようにしようという考え方はクロスブラウザと呼ばれます。前者の場合は、そのサイトも所詮その程度のレベルであったということです。井の中の蛙どうしで遊んでいただけだったのです。</p>
<p>それでは、実際にIEをやめてみましょう。</p>
<p>IEをやめるとはどういうことかというと、そもそもIEは<strong>ブラウザ</strong>の一種なので、他の<strong>ブラウザ</strong>でもインターネットが見られるのです。そこで、IEはダメなブラウザだから、他のブラウザを使おうということなのです。</p>
<p>今までためてきた「お気に入り」（実はこの言い方もIEだけで、他のブラウザでは「<strong>ブックマーク</strong>」が普通です）がもったいないという人もいるかもしれませんが、最近のブラウザは、IEなどのお気に入りを継続使用できることが多いです。それだけIEをやめる人が多いということですね。</p>
<p>さて、ブラウザも他のソフトと同じように、インターネットからダウンロードしてきます。このときが、IEの最後の活躍というわけです。ブラウザ名で検索すると、公式ページがちゃんと出てきます。そこを開けば、あとはダウンロードしてインストールすればいいだけです。</p>
<p>ちなみに、ブラウザは2つ以上併用できます。ただ、メインのブラウザ（標準ブラウザ）をどれにするかという設定はあります。</p>
-->

<h3>アラートを出す</h3>
<p>先ほどのサンプルを見てみると、JavaScriptが書いてある&lt;script&gt;〜&lt;/script&gt;内には、次の一行しかありません。</p>
<pre><code>alert("test");</code></pre>
<p>この一行がアラートを出す処理をしています。ちなみに、JavaScriptは（というか、ほとんどのプログラミング言語は）基本的に上から順番に処理が実行されていきます。この一行ですが、初めから解説するとなるとたった一行でも非常に大変な解説になります。</p>
<p>ちなみに、このアラートですが、実際にWebページで使わないほうがよいでしょう。今回は分かりやすいので採用しましたが、これが出ると他の操作ができなくなり、非常に邪魔です。</p>

<h3>関数</h3>
<p>まず「<dfn>関数</dfn>」というものを解説します。とりあえず、関数とは何かしらの機能を我々に提供してくれるということを分かってください。関数がもつ機能を使うことを「<dfn>実行する</dfn>」とか「<dfn>呼び出す</dfn>」といいます。数学で「関数」という用語がありますが、それとはまた結構違うものです。</p>
<p>関数は次のようにして呼び出します。</p>
<pre><code><var>関数名</var>()</code></pre>
<p>今回の場合、「<dfn>alert</dfn>」が関数名です。つまり、alertという関数が持つ機能を呼び出すという意味です。</p>
<p>しかし、今紹介した形と、上のサンプルは多少違っています。上のサンプルでは、括弧の中に「"test"」というものが挟まっています。</p>
<p>これは「<dfn>引数</dfn>（ひきすう）」というもので、関数に与える情報です。</p>
<p>どういうことかというと、alertの場合、この関数はアラートを出すという機能を持つ関数ですが、ただalertを使っても、何を表示すればいいのか分かりません。そこで、この場合は何を表示するかという情報をalertに与える必要があります。これが引数です。もちろん、どういう引数を渡せばいいかは関数によって違います。</p>
<p>この場合、alertの引数は<code>"test"</code>ということになります。また、引数が2つ以上必要な場合もあります。その場合、「<kbd>,</kbd>」で区切ります。例えば、<var>aaa</var>という関数に3つの引数を渡したい場合、次のようにします。</p>
<pre><code><var>aaa</var>(引数1, 引数2, 引数3)</code></pre>
<p>ちなみに、このサンプルでは「<kbd>,</kbd>」の後に余計な空白が入っていますが、JavaScriptでは自由に空白を入れることができます。ただし、「aaa」という関数名を「aa&nbsp;a」というように分けることができません。単語を分けると2つの別の単語と見なされるからです。あくまで単語と単語<small>（より正確には、トークンとトークン）</small>の区切りなどに空白を入れることができます。</p>

<p>さて、引数が「"test"」ですが、実際にアラートに出るのは「test」です。両端の記号<small>（ダブルクォーテーションマーク）</small>が抜けていますね。これはなぜかというと、両端の記号は、「ここからここまでが<dfn>文字列</dfn>である」ということを表しています。</p>
<p>文字列とは、「test」のように「文字の並び」のことです<small>（ただし、0文字や1文字でも文字列です）</small>。つまり、「"test"」が引数だというのは、実は「『test』という文字列」を引数として渡していたのです。</p>
<p>この記号を省略してしまうと、意味が変わってしまいます。<strong>文字列は「<kbd>"</kbd>」で囲む</strong>ということを覚えましょう。<small>（ちなみに、<code>"test"</code>のようにプログラム中で<kbd>""</kbd>を用いて文字列を表している部分を<b>文字列リテラル</b>と呼びます。）</small></p>
<p>だから、前のコードの「"test"」を"あああああ"などに変えると任意に出る文字列を変えることができますが、「ああああ"」のように<kbd>"</kbd>で囲まないとエラーが出てしまいます。</p>

<p>また、次のようなことができます。</p>
<pre><code>alert(100);</code></pre>
<p>「<kbd>"</kbd>」で囲んでいないのに、ちゃんと「100」と表示されます。</p>
<p>これはなぜかというと、この100は、文字列ではない別のものに解釈されます。それは<dfn>数値</dfn>です。JavaScriptには、文字列のほかに数値というものがあります。これは文字列ではないので、<kbd>"</kbd>で囲む必要はありません。<small>（<code>100</code>のようにプログラム中で数値を表す部分は<b>数値リテラル</b>といいます。）</small></p>

<h3>文の区切り</h3>
<p>今までの解説で、最初のサンプルでまだ謎の部分が一つだけあります。最後の「<kbd>;</kbd>」です。</p>
<p>これは、ひとつの<dfn>文</dfn>が終わることを表す記号で、文の終わりにはこの記号をつけます。<small>（ただし、JavaScriptでは<kbd>;</kbd>を省略することが可能で、<kbd>;</kbd>を省略してプログラムを書く流儀もあります。）</small></p>
<p>文とは、処理の一単位です。<code>alert("test")</code>でひとつの文ということになります。次回からは、2つ以上の文からなるプログラムが出てきます。</p>
