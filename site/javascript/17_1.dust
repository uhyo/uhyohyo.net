<p>第十七章では、久しぶりに<strong>DOM</strong>の話題です。DOMは主に第一篇（第二章〜第十章）で詳しく紹介しました。第十二章のHTML5に関する内容は、これまでに紹介したDOMの内容を基礎としていました。というのも、第十二章で紹介したのはDOMを使ってHTMLの各機能を操作する方法、つまりDOMの枠組にHTML5を当てはめた結果です。実際、HTML5の仕様には、各要素の定義と同時にその要素のDOM定義も定められています。</p>
<p>DOMも数回のバージョンアップを経験しており、伝統的にDOMのバージョンはレベルと呼ばれています。レベルが高いほど、後に定めれた高度な内容となっています。今までDOMにはレベル1から3までありました。例えば<a href="2_2.html#anchor-getelementbyid">getElementById</a>など基礎的なものはレベル1で、第十章で紹介した<a href="10_1.html">XPath</a>、また<a href="7_5.html#anchor-text-content">textContent</a>などがレベル3にあたります。レベル3までのDOMは2004年までに策定完了しており、比較的古典的な概念でした。</p>
<p>そして今回、第十七章で紹介するのが<strong>DOM4</strong>です。DOM Level 3がさらに進化したものであるのは言うまでもありません。ちなみに、W3C仕様では、DOM3までは正式名称を「Document Object Model Level  3」といったのに対し、DOM4はそれが正式名称となっています。なお、HTML5と同様、WHATWGによるLiving Standardも策定されています。</p>
<p>また、DOMの大きなターゲットはやはりHTML文書の操作です。本章ではDOM4とHTMLの関わりについても紹介していきます。</p>

<h3>MutationObserver</h3>
<p>DOM4にはいろいろな新要素が追加されたわけですが、今回紹介するのは<strong>MutationObserver</strong>です。どんなものか詳しく紹介する前に、まずはその使い所を見てみましょう。</p>

<p>例えば、HTML5で新しく追加された<b>time要素</b>。これは、「時間」の情報を持った要素です。例えば、</p>
<pre class="language-html"><code>
&lt;<mark>time</mark> datetime="2015-05-09"&gt;今日&lt;/time&gt;
</code></pre>
<p>とした場合、この「今日」が2015年5月9日を示しているということを表します。ただ、このtime要素に対するブラウザ側の視覚的対応はあまり進んでいません。time要素により日時情報が指定されていても、ユーザーがそれを知るのは難しいでしょう。</p>
<p>そこで、JavaScriptでtime要素に対してtitle属性を付加し、マウスを乗せたら日時の情報が表示されるようにしましょう。CSSで見た目を<span style="border-bottom: 1px dashed currentColor" title="そしてマウスを乗せると情報が出ます。" role="presentation">こんな感じ</span>にしておけば、マウスを乗せたくなるかもしれません（スマートフォンはどうするかとかはここでは考えません）。</p>

<p>それを実現する典型的な方法は、ページを読み込み終わった時点でページの中の全てのtime要素を調べてひとつひとついじるというものです。</p>
<p>ページを読み込み終わった時点というのは、JavaScript的観点からは2種類あります。1つは、HTMLを読んで解析が終わりDOMツリー（documentを頂点とし、その下にhtml要素、その下にheadとbody……と続くDOMの木構造）が構築完了した段階で、この時点で発生するイベントを<strong>DOMContentLoaded</strong>といいます。もう1つは、ページを全て、画像や外部CSSなどの構成要素を全て読み込み終わった段階で、こちらで発生するイベントは<strong>load</strong>です。DOMContentLoadedはdocumentで発生し、loadはwindowで発生するという違いがあるので注意してください。</p>
<p>こういう風にDOMをいじりたい場合、画像やCSSが読み込まれているかどうかは関係ないため、DOMContentLoadedがよく使われます。</p>
<pre><code>
document.addEventListener("<mark>DOMContentLoaded</mark>",function(e){

},false);
</code></pre>

<p>文書中のtime要素を全て取得するには<a href="2_6.html#anchor-getelementsbytagname">getElementsByTagName</a>を使う方法もありますが、ここでは別の方法を紹介します。</p>
<p>それは<strong>querySelectorAll</strong>を使う方法です。これは、要素名の代わりにCSSのセレクタを指定して、全て集めてきてもらうことができます。今回の場合は要素名なのでgetElementsByTagNameと変わりませんが、querySelectorAllのほうはより複雑な条件を指定できます。</p>
<p>返り値はどちらも<a href="2_3.html#anchor-nodelist">NodeList</a>ですが、getElementsByTagNameで返されるものとquerySelectorAllで返されるものは、<em>動的かそうでないか</em>という違いがあります。getElementsByTagNameで返されるNodeListは動的ですが、querySelectorAllはそうではありません。</p>
<p>動的というのは、呼び出しの後に起きた変化が反映されるということです。つまり、getElementsByTagNameでtime要素の一覧を取得した後にtime要素が増えたり減ったりした場合、それに応じて返されたNodeListが勝手に変化するのです。一方querySelectorAllは動的でないので、返されたNodeListは返されたときの状態を保ち、勝手に変化しません。</p>
<p>さて、なんだかんだでtime要素のノード（HTMLTimeElement）を取得すると、そのdatetime属性は文字列でdateTimeプロパティに入っています。大文字小文字に注意しましょう。</p>
<p>……と言いたいのですが、現在（2017年10月）、主要ブラウザはこのdateTimeプロパティに対応していません。そこで、今回は<a href="2_10.html#anchor-getattribute">getAttribute</a>を使うことにします。また、本当は必ずしもdatetime属性が使われるわけではなく、</p>
<pre class="language-html"><code>
&lt;time&gt;2015-05-09 23:00&lt;/time&gt;
</code></pre>
<p>のように、datetime属性の代わりにtime要素の中に直接日時を表す文字列を書くこともあります。さらに、ひとえに日時を表す文字列といっても、ISO 8601形式をはじめとしてさまざまな書き方が既定されています。さらに、日時時刻ばかりでなく時間（何分とか何時間とか）を表す文字列かもしれません。</p>
<p>今回はサンプルなのであまり深く考えず、とりあえずdateTimeから取ってきて、Dateコンストラクタに渡してDateオブジェクトに変換して表示することにしましょう。これをまとめると以下のようになります。今回は<a href="16_2.html#anchor-array-from">Array.from</a>を使ってNodeListを簡単に扱うやり方を実践してみました。</p>
<pre><code>
document.addEventListener("DOMContentLoaded",function(e){
  const times = document.querySelectorAll("time");
  for(const time of Array.from(times)){
    const date=new Date(time.getAttribute("datetime"));
    time.title = date.toString();
  }
},false);
</code></pre>
<p>さて、できました。しかしこれは前座です。そもそもまだMutationObserverが出てきてませんね。</p>

<p>この例で何が問題かというと、ページを読み込んだ時点であったtime要素には対応できますが、逆にいうとそれ以外は対応できません。今の時代、ページはJavaScriptによってどんどん書き換えられます。この例では処理はDOMContentLoadedイベント発生時に走るだけなので、当然ながら途中で新しく追加されたtime要素に対応することができません。これで困ったという場面に遭遇するのは、多くの人がする経験でしょう。</p>
<p>この問題を解決するには。新しいtime要素（より一般には、新しい要素）がページ（DOMツリー）に追加されたことを検知する方法があればいいことになります。</p>
<p>実は、その方法がDOM3の時点ですでに提供されていました。Mutation Eventsと呼ばれるもので、新しい要素が追加されるとDOMNodeInsertedというイベントが発生し、それを検知することで前述のことを実現することができました。しかし、Mutation Eventsはパフォーマンスに問題があるとかで、現在では非推奨になっています。その代わりに推奨される方法としてDOM4で提供されているのが、Mutation Observerなのです。</p>
<p>Mutation Observerは、DOMに対する変更を検知し、コールバックにより通知してくれます。ではいよいよ、具体例を見てみましょう。</p>
<p>Mutation Observerを使うには、まずMutationObserverオブジェクトを作ります。</p>
<pre><code>
var mo = new <mark>MutationObserver</mark>(function(records){
});
</code></pre>
<p>ここでコンストラクタの第1引数にコールバック関数が渡されています。実は、DOMツリーに変更があるたびにこの関数が呼ばれます。第1引数（今回は<code>records</code>）として<strong>MutationRecord</strong>の配列です。MutationRecordはどんな変更が加えられたのかを示すオブジェクトです。</p>
<p>MutationRecordの見方は一旦置いておいて、まずはここで作ったMutationObserverの使い方を見てみましょう。</p>
<p>実際に監視を開始するには、<strong>observe</strong>メソッドを呼び出します。第1引数は監視するノード、第2引数はオプションオブジェクトです。</p>
<p>オプションでは、どのような変更を検知するかを指定できます。次のプロパティをtrueにすることで、その変更を監視できます。</p>
<dl>
  <dt>childList</dt>
  <dd>子要素が増減したときに検知します。子要素の中身が変わったというわけでは対象になりません（その子要素自身は、中身がどうなっても健在なので）。</dd>
  <dt>attributes</dt>
  <dd>属性が変更されたときに検知します。</dd>
  <dt>characterData</dt>
  <dd>テキストノードの内容が変更されたときに検知します（実はコメントノードも監視できます）。</dd>
</dl>
<p>注意すべきなのは、ここではobserveの第1引数に指定したノード<em>のみ</em>が監視されます。つまり、例えばbody要素を<code>childList:true</code>で監視した場合、body要素の直下に要素が追加された場合は該当するので検知しますが、遠い子孫は検知できません。また、characterDataでテキストの変更を検知するには、まさにそのテキストノードを監視対象にしなければいけません。</p>
<p>しかしこれでは、今の目標である「任意の位置に挿入されたtime要素に対して処理する」という目的を達成できません。そこで、次のオプションが有用です。</p>
<dl>
  <dt>subtree</dt>
  <dd>observeの第1引数に指定したノードだけでなく、その子孫のノードたちも一緒に監視します。</dd>
</dl>
<p>このsubtreeをtrueにすると、そこから下を全部監視できます。これを利用してdocumentを監視すれば、文書中の全てのノードの増減を検知できます。</p>
<p>こうしてスタートした監視は、<strong>disconnect</strong>メソッド（引数なし）を呼ぶことで中止できます。ここまでをまとめるとこうですね。</p>
<pre><code>
var mo = new <mark>MutationObserver</mark>(function(records){
  // ...
});
mo.<mark>observe</mark>(document, {
  childList: true,
  subtree: true,
});
</code></pre>
<p>では、いよいよコールバックが呼ばれたときの話です。MutationRecordオブジェクトは以下のプロパティを持ちます。</p>
<dl>
  <dt>type</dt>
  <dd>何が発生したかです。<code>"childList"</code>, <code>"attributes"</code>, <code>"characterData"</code>の3種類です。</dd>
  <dt>target</dt>
  <dd>変更が発生したノードです。childListの場合は、実際に追加あるいは削除されたノードの親ノードが該当することに注意してください。</dd>
  <dt>addedNodes</dt>
  <dd>typeがchildListの場合に、新たに追加されたノードが入ったNodeListです。</dd>
  <dt>removedNodes</dt>
  <dd>同様に、除去されたノードのNodeListです。</dd>
  <dt>previousSibling</dt>
  <dd>追加/除去されたノードのpreviousSibling（前の兄弟）にあたるノードです。存在しないことがあります。</dd>
  <dt>nextSibling</dt>
  <dd>同様に、追加/除去されたノードのnextSibling（次の兄弟）にあたるノードです。こちらも存在しないことがあります。</dd>
  <dt>attributeName</dt>
  <dd>typeがattributesの場合に、変更された属性の名前です。</dd>
  <dt>attributeNamespace</dt>
  <dd>変更された属性が<a href="6_2.html">名前空間</a>に属する場合、その名前空間です。</dd>
  <dt>oldValue</dt>
  <dd>typeがattributesかcharacterDataの場合、変更前の値です。</dd>
</dl>
<p>どのような変更が起きたかに関する情報が集まっています。注意点がいくつかあります。</p>
<p>まず、最後のoldValueを使いたい場合は、observeのオプションで追加のフラグを立てる必要があります。</p>
<dl>
  <dt>attributeOldValue</dt>
  <dd>typeがattributesのときにoldValueを使いたい場合。</dd>
  <dt>characterDataOldValue</dt>
  <dd>typeがcharacterDataのときにoldValueを使いたい場合。</dd>
</dl>
<p>余談ですが、DOM4は最近の仕様なので気を利かせてくれているのか、attributeOldValueをtrueにしたときはattributesオプションを省略できます。characterDataも同様です。しかし、attributeOldValueをtrueにしたのにattributesをわざとfalseにした場合は怒られます。</p>
<p>もう1つの注意点は、typeがchildListの場合、addedNodesやremovedNodesが複数入っている場合があるということです。例えば<a href="7_4.html">DocumentFragment</a>をappendChildやinsertBeforeで追加した場合は複数のノードがまとめて入るので、addedNodesが複数のノードからなるNodeListになりえます。ちなみに、DocumentFragmentを他のノードに追加したとき、その中身のみ追加され、DocumentFragmentは空になります。このときもしDocumentFragmentを監視していれば、複数のノードからなるremovedNodesを観測することができます。他に、addedNodesやremovedNodesが両方あるという場合もあります。これは<a href="2_7.html#anchor-replacechild">replaceChild</a>を使った場合です。このように多様な場合があるので、ちゃんとaddedChildとremoveChildの中身を（必要ならば）全て見るようにするのがよいでしょう。ちなみに、Range等を使った操作の場合、1回の操作で複数のMutationRecordが発生する場合もあります。そのため、配列として渡されたMutationRecordはちゃんと全部読むようにしましょう。</p>
<p>では、早速やってみましょう。新しく追加されたtime要素に対してもさっきと同様の処理をするサンプルを作ります。</p>
<pre><code>
var mo = new MutationObserver(function(records){
  for (const record of records){
    //typeが"childList"だったら……（今回は他のは監視していないけど一応）
    if(record.type==="childList"){
      //addedNodesを確認する
      for(const node of Array.from(record.addedNodes)){
        //time要素だったらさっきの処理をする
        if(node.nodeName === "TIME"){
          addTitle(node);
        }
      }
    }
  }
});
mo.<mark>observe</mark>(document,{
  <mark>childList</mark>:true,
  <mark>subtree</mark>:true
});

//time要素にtitleを加える処理
function addTitle(time){
  var date=new Date(time.getAttribute("datetime"));
  time.title=date.toString();
}
</code></pre>
<p>一見よさそうですね。しかし、実は<em>これではうまくいきません</em>。何がまずいかお分かりでしょうか。</p>
<p>まずいのは、例えば次のようなHTMLが挿入された場合です。</p>
<pre class="language-html"><code>
&lt;p&gt;ああ、&lt;time datetime="2015-05-09"&gt;今日&lt;/time&gt;はいい天気だなあ。&lt;/p&gt;
</code></pre>
<div class="tree">
p
<ul>
  <li>#text <code>"ああ、"</code>
  <li>time
    <ul>
      <li>#text <code>"今日"</code>
    </ul>
  <li>#text <code>"はいい天気だなあ。"</code>
</ul>
</div>
<p>このように木構造を図示してみせるのも久しぶりですね。実はこれを文書に追加した場合、<em>p要素が1つ追加された</em>と見なされます。addedNodesにはp要素しか入りません。中身の要素を一つ一つ教えてくれるなんてことはないのです。</p>
<p>なので、全ての要素を網羅したければ、追加された各要素の中身を自分で調べる必要があります。</p>
<p>それを考慮に入れた完成形が以下です。</p>

<pre><code>
var mo = new MutationObserver(function(records){
  for (const record of records){
    //typeが"childList"だったら……（今回は他のは監視していないけど一応）
    if(record.type==="childList"){
      //addedNodesを確認する
      for(const node of Array.from(record.addedNodes)){
        //テキストノード等の場合querySelectorAllがないので確認する
        if(node.querySelectorAll){
          <em>//ノードの中身からtime要素を探す</em>
          const times=node.querySelectorAll("time");
          for(const time of Array.from(times)){
            addTitle(time);
          }
        }
      }
    }
  }
});
mo.observe(document,{
  childList:true,
  subtree:true
});

//time要素にtitleを加える処理
function addTitle(time){
  var date=new Date(time.getAttribute("datetime"));
  time.title=date.toString();
}
</code></pre>

<p>これを使ったサンプルを用意したので、実際に試してみましょう。<a href="17_1_sample.html">サンプル</a></p>
<p>例のごとく、ソースを見るなりなんなりして研究してみてください。</p>
<p>今回MutationRecordのtargetは使わずにaddedNodesを見ましたが、targetはこれらの親が入っていました。attributesやcharacterDataの監視をする場合は、常に変更があった対象はtargetになるのでそちらを参照してください。</p>
<p>これでMutationObserverの紹介はだいたい終わりですが、最後に紹介しきれなかった部分を紹介して終わります。</p>
<p>まず、observeのオプションでtypeがattributesのとき、追加で指定できるオプションがあります。</p>
<dl>
  <dt>attributeFilter</dt>
  <dd>属性名（文字列）の配列です。指定すると、この配列で指定された属性しか監視されなくなります。</dd>
</dl>
<p>これにより、関係のない属性の変更を監視対象から外すことができます。</p>
<p>他に、MutationObserverのメソッドしてobserveとdisconnectを紹介しましたが、もうひとつ<strong>takeRecords</strong>というメソッドがあるのでこれも紹介します。ただし、このメソッドはあまり使い所が多くないでしょう。</p>
<p>takeRecordsは、既に発生したけどまだコールバックが呼ばれていないMutationRecordの配列を返します。</p>
<p>というのも、実はMutationObserverは、DOMに対して変更が発生したら何がなんでもすぐにコールバックを呼ぶわけではなく、今実行中の処理が終わるまでMutationRecordをためておいて、一段落してからコールバックを呼び出します。コールバックの引数がMutationRecordそのものではなくMutationRecordの配列となっているのはそのためであり、1回の実行で複数たまったら複数のMutationRecordがまとめてコールバックに渡されることもあります。</p>
<p>takeRecordsは、そのたまった状態のMutationRecordを取得するメソッドです。なお、takeRecordsの返り値として得られたMutationRecordはそれで消費されたことになり、それに対してコールバックはもう呼ばれません。</p>
<p><a href="17_1_sample2.html">サンプル2</a>を見てください。コンソールには以下の順番でログが出ます。</p>
<pre class="language-none"><code>
divを追加しました。
pを追加しました。
DIV が追加されました。
P が追加されました。
</code></pre>
<p>これは、divを追加したあと即座にコールバックが呼ばれるのではなく、実行が終了してからコールバックが呼ばれていることを示しています。言い換えるなら、MutationObserverによるコールバックは非同期的に呼ばれるということです。</p>
<p>次の<a href="17_1_sample3.html">サンプル3</a>では、div要素を追加したあとにtakeRecordsを呼んで結果を見ています。これは次のような結果になります。</p>
<pre class="language-none"><code>
divを追加しました。
takeRecordsの返り値は 1 件ありました。
pを追加しました。
P が追加されました。
</code></pre>
<p>MutationObserverのコールバックにより表示されていた「DIV が追加されました。」のログが消えました。これは、takeRecordsの返り値としてdivの分のMutationRecordが消費されたことによります。</p>
<p>takeRecordsは、コールバックが呼ばれるのを待ちきれない、今すぐ処理したいという場合に使えるかもしれません。</p>
<p>MutationObserverの説明は以上です。</p>

