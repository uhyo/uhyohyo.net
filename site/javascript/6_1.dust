<p>六章では、DOMにおけるXMLとXHTMLの扱いについて解説していきます。そこで、まずXML・XHTMLとは何かということを解説していきます。</p>

<h3>XML</h3>
<p><strong>Extensible Markup Language</strong>(<dfn>XML</dfn>)は、HTMLと同じように<strong>タグ</strong>を使ってさまざまなデータを表すことができる仕組みです。</p>
<p>さまざまなデータとは、本当になんでもいいのです。XMLによってつくられたデータは、さまざまなことに利用されます。例えば、プログラムがデータを保存するのに使ったりされます。ただ、最近はデータフォーマットとしてはより軽量なJSONに役目を奪われている感があります。</p>
<p>XMLでは、自分でタグ名や属性名を決められます。具体的なXML文書の例を示します。</p>
<pre class="language-xml"><code>
&lt;?xml version="1.0" ?&gt;
&lt;users&gt;
  &lt;ユーザー&gt;
    &lt;名前&gt;Aさん&lt;/名前&gt;
    &lt;年齢&gt;23&lt;/年齢&gt;
  &lt;/ユーザー&gt;
  &lt;ユーザー&gt;
    &lt;名前&gt;Bさん&lt;/名前&gt;
    &lt;年齢&gt;100&lt;/年齢&gt;
  &lt;/ユーザー&gt;
&lt;/users&gt;
</code></pre>
<p>まず一見して違和感を覚えるのは、タグ名が日本語であるものがあるということですね。前述のようにXMLではタグ名も自由に決めることができるので、このように日本語も可能です。とはいっても、やはり普通に半角英数字で書くということのほうが多いと思います。そのほうが国際的ですしね。</p>
<p>最初の行の<code class="language-xml">&lt;?xml version="1.0" ?&gt;</code>は、XMLでは書くことになっているもので、この文書がXMLであることを表すものです。XML文書には、これが必要です。</p>
<p>次に、この文書全体は<code class="language-xml">&lt;users&gt; 〜 &lt;/users&gt;</code>で囲われています。このように、文書全体を囲う要素を<strong>ルート要素</strong>などといいます。HTMLでもルート要素はありましたね。全体が<code class="language-html">&lt;html&gt; 〜 &lt;/html&gt;</code>で囲まれているから、html要素がルート要素だといえますね。</p>

<p>そして、そのなかには<code class="language-xml">&lt;ユーザー&gt; 〜 &lt;/ユーザー&gt;</code>の組が2つあります。実は今回例としたこの文書は、ユーザーの一覧を例にしたものでした。</p>
<p>XMLでデータをつくると、このような階層構造（木構造）を簡単に表現できます。今回の場合、</p>
<div class="tree">
users
<ul>
  <li>ユーザー
    <ul>
      <li>名前
      <li>年齢
    </ul>
  <li>ユーザー
    <ul>
      <li>名前
      <li>年齢
    </ul>
</ul>
</div>
<p>という木構造になっていて、usersがユーザーのリストで、それぞれのユーザーは名前と年齢というデータを持っているということは簡単に分かります。</p>
<p>人間が見た目にも分かりやすいというのも利点のひとつかもしれません。</p>

<p>ここで、「users」「ユーザー」「名前」「年齢」というタグ名は誰が決めたのでしょうか。今回に限って言えば筆者、一般にそのプログラムで使うデータを作る場合、そのプログラムを作った人が、そのXMLをどんな構造にするか、どんなタグ名を使うかということも決めます。有名になったりすると、複数のプログラムで共通の書き方が使われるかもしれません。広く普及してスタンダードになったものもたくさんあります。そうなると、標準化されて別の名前が付けられたりします。例えばSVGという画像フォーマットがありますが、その中身はXMLファイルです。XMLでこう書いたらこういう画像になる、というルールが決められてそれが標準となったので、いまSVGとして広く知られています。</p>
<p>また、どのような構造にするかも決めます。今回の場合ルート要素がusersで、usersの子はいくつかのユーザー要素で、それぞれのユーザー要素は名前と年齢を持つ、ということになります。</p>
<p>構造がしっかりと決まっていれば、プログラムからそれを読み込むのも容易でしょう。</p>

<h3>DOMでXMLを扱う</h3>
<p>DOMでは、HTMLだけでなくXMLも扱えます。つまり、こんな感じです。ここで、何らかの方法で上のXML文書を表すDocumentを手に入れたとして、それが<code>xmlDocument</code>に入っているとします。</p>
<pre><code>
var users = xmlDocument.<mark>documentElement</mark>;	//documentElementはルート要素だから、今回の場合users要素の<strong>ノード</strong>になります。このノードというのも、HTMLを扱うときのノードと同じ概念です。
users.<mark>getElementsByTagName</mark>('ユーザー');		//usersが持つユーザー要素のリストを返します。2つのユーザー要素がありますね。
</code></pre>
<p>xmlDocumentを実際に取得する方法をここでは書いていないため、実際に実行できるサンプルではないので理解しにくいかもしれませんが、こんな感じでXMLも扱えます。</p>
<p>1行目の<code>documentElement</code>というのは、<a href="3_5.html">三章第五回</a>で出てきました。あるDocumentのルート要素を得るものです。</p>


<h3>XHTML</h3>
<p>また、<dfn>XHTML</dfn>というものがあります。もともとHTMLはXMLとは似ていても少し違うものでしたが、そこで、HTMLをXML文書の一種として書けるようにしたものを作りました。それがXHTMLです。したがって、XHTMLは、XMLとしても通用するということになります。</p>
<p>ただし、XHTMLは一時期鳴り物入りで登場したものの、あまり普及しませんでした。代わりにHTML5が台頭したため、XHTMLは廃れてしまいました。なのでXHTMLの説明をしても仕方ないかもしれませんが、書いてしまったのでここで紹介しておきます。</p>

<h4>HTMLとの相違点</h4>
<p>基本はHTMLと同じですが、XMLの厳密な仕様に対応させるために、多少の相違点が生まれます。</p>
<p>例えば、<strong>要素名や属性名は小文字にする</strong>ということです。HTMLでは<code class="language-html">&lt;HTML&gt; 〜 &lt;/HTML&gt;</code>と<code class="language-html">&lt;html&gt; 〜 &lt;/html&gt;</code>は同じものとして扱われましたが、そういうわけにはいかなくなります。</p>
<p>というのも、そもそも<strong>XMLが大文字と小文字を区別する</strong>からこのようなことになっています。「HTML」と「html」を違うものとして扱うXMLにあわせるためには、「大文字と小文字どちらでもOK」というわけにはいかなくなったのです。</p>
<p>そこで、XHTMLでは全て<strong>小文字に統一</strong>されました。厳密にXHTMLを解釈した場合、タグ名が大文字の場合、「こんなタグ知らない」といわれて正しく表示されないということになります。</p>

<p>また、もうひとつ大きな違いがあります。それは、<strong>終了タグが絶対に必要</strong>だということです。</p>
<p>HTMLでは、終了タグは省略可能なものがあり、例えば</p>
<pre class="language-html"><code>
&lt;ul&gt;
  &lt;li&gt;あああ&lt;/li&gt;
  &lt;li&gt;いいい&lt;/li&gt;
  &lt;li&gt;ううう&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>というリストがあった場合、li要素の終了タグは</p>
<pre class="language-html"><code>&lt;ul&gt;
  &lt;li&gt;あああ
  &lt;li&gt;いいい
  &lt;li&gt;ううう
&lt;/ul&gt;</code></pre>
<p>のように省略ができました。しかし、XHTMLではこれらの省略は認められません。そもそもXMLにはHTMLとは異なり終了タグの省略という仕様がないからです。</p>
<p>そもそもXMLは自分で要素名を決められる汎用的な仕様だから、あらかじめタグ名によってこのタグは省略可能だとかそういうことは決められませんね。</p>
<p>また、これは、もともと終了タグがないタグも例外ではありません。</p>
<p>例えば、HTMLでは終了タグがない<code class="language-html">&lt;img src="aaa.gif" alt="aaa"&gt;</code>のようなものにも終了タグが必要です。どうすればいいかというと、imgは「中身がない要素」として扱い、</p>
<pre class="language-html"><code>&lt;img src="aaa.gif" alt="aaa"&gt;<mark>&lt;/img&gt;</mark></code></pre>
<p>のように開始タグの直後に終了タグを置きます。</p>
<p>ただ、このように中身が何もない場合、次のような省略記法が許されています。</p>
<pre class="language-html"><code>&lt;img src="aaa.gif" alt="aaa" <mark>/</mark>&gt;</code></pre>
<p>開始タグと終了タグがひとつになり、もともとのHTMLの書き方に近くなりました。これはどんなタグでも同じです。XHTMLは廃れましたが、これの影響を受けてHTMLなのに<code class="language-html">&lt;br /&gt;</code>のように書かれているサイトがたまに見られます。HTMLではこのような記法をする必要はありませんが、一応許容されています。</p>

<p id="anchor-cdata-section">ついでに、style要素やscript要素を書くときにも注意が必要です。style要素やscript要素の中身を次のようにしないといけません。</p>
<pre class="language-xml"><code>
&lt;script type="text/javascript"&gt;<mark>&lt;![CDATA[</mark>
  var aaa = 123;
  console.log(aaa*2);
<mark>]]&gt;</mark>&lt;/script&gt;
</code></pre>
<p>script要素の中身の全体が<code class="language-xml">&lt;![CDATA[ 〜 ]]&gt;</code>で囲まれています。これで囲んだ部分は<strong>CDATAセクション</strong>といって、style要素やscript要素の中身は普通これにします（絶対というわけではありませんが）。</p>
<p>一応、これら以外でもCDATAセクションは使えます。これの意味ですが、CDATAセクションの中では特別な意味を持つ文字も記述できることになっています。つまり、<code>&lt; &gt;</code>などはタグを記述するのに使われる記号だから、普通<code>&amp;lt; &amp;gt;</code>のように書く必要がありますが、CDATAセクションの中ではこれらはそのまま書くことが出来ます。だから、</p>
<pre class="language-xml"><code>
&lt;script type="text/javascript"&gt;&lt;![CDATA[
  var a = 10;
  if(a <mark>&lt;</mark> 5){
    ...
  }else if(a <mark>&gt;</mark> 15){
    ...
  }
]]&gt;&lt;/script&gt;
</code></pre>
<p>のように書くことが出来ます。script要素の中に<code>&lt;</code>や<code>&gt;</code>という記号が登場している点に注意してください。</p>
<p>厳密に考えれば、<code>&lt;</code>や<code>&gt;</code>はタグを書くための記号なので、タグ以外でこれを使うのは文法的におかしいはずです。これはHTMLでは許容されていますが、XML（およびXHTML）では許容されていません。そこで、これらの記号を書くことができるCDATAセクションを使うわけです。</p>
<p>CDATAセクション内には<code>&lt;</code>や<code>&gt;</code>なども書けますが、、例外として<code>]]&gt;</code>は直接書けません。CDATAセクションの終わりだと解釈されてしまうからですね。</p>
<p>ちなみに、逆に言うと、CDATAセクションを使わない場合上のscript要素は次のように書く必要があります。</p>
<pre class="language-xml"><code>
&lt;script type="text/javascript"&gt;
  var a = 10;
  if(a <mark>&amp;lt;</mark> 5){
    ...
  }else if(a <mark>&amp;gt;</mark> 15){
    ...
  }
&lt;/script&gt;
</code></pre>

<p>今回はXMLやXHTMLについて解説しました。次回はXML特有の事情と、それのDOMにおける扱い方を解説します。</p>
