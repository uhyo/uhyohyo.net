<p>八章では、<dfn>Range</dfn>というものを解説します。今回は、そもそもRangeとはどういうものかを解説します。</p>

<h3>Rangeとは</h3>
<p><dfn>Range</dfn>とは、文書中における「<strong>範囲</strong>」を表すものです。例えば、</p>
<pre class="language-html"><code>あい&lt;strong&gt;うえ&lt;/strong&gt;お。</code></pre>
<p>というソースががあれば、</p>
<pre><code>あい<strong>うえ</strong>お。</code></pre>
<p>のように表示されます。このとき、例えば</p>
<pre><code>
あい<strong>う　</strong><mark><strong>え</strong></mark><mark>お</mark>　。
　　　<mark>↑</mark>　　<mark>↑</mark>
  ここから　　ここまで
  </code></pre>
<p>のような感じである範囲を表せます。</p>
<p>要するに「『え』から『お』まで」なので、案外単純なように見えます。しかし、DOMという観点からこれを見ていくと、上の木構造は</p>
<div class="tree">
<ul>
  <li>#text <code>"あい"</code>
  <li>strong
    <ul>
      <li>#text <code>"う<mark>え</mark>"</code>
    </ul>
  <li>#text <code>"<mark>お</mark>。"</code>
</ul>
</div>
<p>となっていて、この範囲は（木構造上で）離れた複数のノードにまたがっています。こうなると、一筋縄ではいかないのが想像がつくと思います。このようなものを扱うのが、Rangeなのです。</p>

<h3>範囲の表し方</h3>
<p>Rangeは「開始点」と「終了点」で表します。今回の例の場合は、開始点は「『え』の前」、終了点は「『。』の前」ということになりますね。</p>
<p>Rangeでは、開始点や終了点は<dfn>コンテナ</dfn>と<dfn>オフセット</dfn>を使って表されます。</p>
<p>これらの意味は、実は、文字列を表す、テキストノードなどの場合と、それ以外の場合に分けられます。まず、それ以外の場合について見ていきます。例えば、</p>
<div class="tree">
AAA
<ul>
  <li>BBB
  <li>CCC
  <li>DDD
</ul>
</div>
<p>という木構造があり、AAAの子ノードたちの間に開始点があったとします。このとき、開始点と成り得る場所は、</p>
<div class="tree">
AAA
<ul>
  <li class="no-branch"><mark>←BBBの前</mark>
  <li>BBB
  <li class="no-branch"><mark>←BBBとCCCの間</mark>
  <li>CCC
  <li class="no-branch"><mark>←CCCとDDDの間</mark>
  <li>DDD
  <li class="no-branch"><mark>←DDDの後</mark>
</ul>
</div>
<p>が考えられます。このように、文字列中の位置だけでなく、兄弟ノードにおいての、ノードとノードの間の位置も点と成り得ます。</p>
<p>さて、このとき、<strong>コンテナ</strong>は、これらの兄弟の<strong>親ノード</strong>です。今回の場合、AAAですね。そして、<strong>オフセット</strong>は数値です。これは、最初の子ノードの前を0として、その次を1,その次を2,・・・と順番に番号をつけていったものです。つまり、</p>
<div class="tree">
AAA <mark>←これがコンテナ</mark>
<ul>
  <li class="no-branch"><mark>← 0</mark>
  <li>BBB
  <li class="no-branch"><mark>← 1</mark>
  <li>CCC
  <li class="no-branch"><mark>← 2</mark>
  <li>DDD
  <li class="no-branch"><mark>← 3</mark>
</ul>
</div>
<p>ということです。ノードとノードの間の位置は必ずこのように表せます。</p>

<p>次に、文字列中の位置（文字と文字の間）の表し方を解説します。</p>
<div class="tree">
EEE
<ul>
  <li>#text <code>"あいうえお"</code>
  <li>#text <code>"かきくけこ"</code>
</ul>
</div>
<p>という木構造があって、例えば<code>"あいうえお"</code>のテキストノードの中に点をおきたいとします。このとき、<strong>コンテナ</strong>は<strong>そのテキストノード</strong>です。つまり、</p>
<div class="tree">
EEE
<ul>
  <li>#text <code>"あいうえお"</code> <mark>←これ</mark>
  <li>#text <code>"かきくけこ"</code>
</ul>
</div>
<p>ですね。</p>
<p>このとき、その文字列の中でも、</p>
<pre><code>
&#x2061;　あ　い　う　え　お
↑　↑　↑　↑　↑　↑
0　 1　 2　 3　 4　 5
</code></pre>
<p>これだけ可能性があります。数字が振ってありますが、これがそのまま<strong>オフセット</strong>になります。つまり、一番最初の位置が0、その次が1,・・・という具合ですね。</p>

<p>これで開始点や終了点をコンテナ・オフセットを使って表す方法が分かりました。では、前の例のRangeを実際に表してみましょう。</p>
<div class="tree">
<ul>
  <li>#text <code>"あい"</code>
  <li>strong
    <ul>
      <li>#text <code>"う<mark>え</mark>"</code>
    </ul>
  <li>#text <code>"<mark>お</mark>。"</code>
</ul>
</div>
<p>この例では、Rangeの範囲は「えお」の部分でした。まず、開始点のコンテナは</p>
<div class="tree">
<ul>
  <li>#text <code>"あい"</code>
  <li>strong
    <ul>
      <li>#text <code>"うえ"</code> <mark>←これ</mark>
    </ul>
  <li>#text <code>"お。"</code>
</ul>
</div>
<p>で、オフセットは1です。</p>
<p>と考えると、オフセットは1であることが分かります。</p>
<p>同様に、終了点は、コンテナが</p>
<div class="tree">
<ul>
  <li>#text <code>"あい"</code>
  <li>strong
    <ul>
      <li>#text <code>"うえ"</code>
    </ul>
  <li>#text <code>"お。"</code> <mark>←これ</mark>
</ul>
</div>
<p>で、オフセットは1ですね。</p>

<h3>Rangeの作り方</h3>
<p>これで、Rangeの範囲の表し方が分かりました。いよいよ、JavaScriptでのRangeの作り方を解説します。</p>
<p>Rangeを作るには、documentの持つメソッド<dfn>createRange</dfn>を使います。引数はなく、戻り値で新しくできたRangeが帰ってきます。</p>
<pre><code>var r = document.<strong>createRange</strong>();</code></pre>
<p>こうしてできたRangeは、初期状態では開始点と終了点が共に「文書の一番前」に設定されています。コンテナとオフセットで表すと、コンテナはdocumentで、オフセットは0ということになっています。つまり、</p>
<div class="tree">
document <mark>←コンテナ</mark>
<ul>
  <li class="no-branch"> <mark>←開始点・終了点</mark>
  <li>html
    <ul>
      <li>head
        <ul>
          <li>…
        </ul>
      <li>body
        <ul>
          <li>…
        </ul>
    </ul>
</ul>
</div>
<p>ですね。</p>
<p>また、もうひとつのRangeの作り方としてnewを使う方法があります。つまり、<code>var r = <mark>new Range</mark>();</code>ということです。</p>
<p>ただRangeを作っても、開始点や終了点がまともでなければ使い物になりません。そこで、開始点・終了点を変更するメソッドがあります。それぞれ、<dfn>setStart</dfn>と<dfn>setEnd</dfn>です。</p>
<p>どちらも、引数は2つです。一つ目は<strong>コンテナ</strong>、二つ目が<strong>オフセット</strong>です。</p>
<pre><code>
var r = document.createRange();
r.<strong>setStart</strong>(document.body,0);
r.<strong>setEnd</strong>(document.body,document.body.childNodes.length);
</code></pre>
<p>という感じで使います。ちなみに、このソースでやっていることは分かりますか？　開始点は、body要素の一番最初に設定しています。終了点のコンテナも同じbody要素ですが、オフセットがdocument.body.childNodes.lengthとなっています。</p>
<p>これはどういうことかというと、あるノードの最初の子ノードを0番目の子ノードとしたとき、</p>
<div class="tree">
AAA
<ul>
  <li class="no-branch"> <mark>←オフセット: 0</mark>
  <li>BBB …0番目
  <li class="no-branch"> <mark>←オフセット: 1</mark>
  <li>CCC …1番目
  <li class="no-branch"> <mark>←オフセット: 2</mark>
  <li>DDD …2番目
  <li class="no-branch"> <mark>←オフセット: 3</mark>
</ul>
</div>
<p>となっていて、オフセットがnの位置は、n番目の子ノードの直前になっています。ここで、childNodes.lengthは子ノードの数なので、一番最後の子ノードは(length-1)番目ということになります。つまり、<code>childNodes.length</code>を指定することで、その要素の一番後ろに位置を設定していたのです。</p>
<p>結局、このRangeは、body要素の中身全体を包んでいるということになります。</p>
<p>なお、開始点が終了点より後ろになるように設定したり、終了点が開始点より前になるように設定することもできません。もしそのように設定しようとした場合、例えば開始点が終了点より後ろになるようにしようとした場合は、終了点もその場所まで押し下げられます。逆も然りです。ちなみに、このように、開始点と終了点が一致しているRangeを「つぶれている」（collapsed）というそうです。</p>
<p>だから、上のコードでは、createRangeで作ったノードは開始点と終了点が共に文書の一番前だからつぶれているRangeで、そのあとsetStartで開始点をbody要素の最初に設定しようとしたとき、終了点より開始点が後になってしまうから、一旦終了点もbody要素の最初の位置にきていたのです。その後setEndで終了点のみbody要素の最後の位置になります。</p>

<p>また、現在の開始点や終了点を知る方法もあります。これらは、Rangeのプロパティとして参照できます。<dfn>startContainer</dfn>,<dfn>startOffset</dfn>,<dfn>endContainer</dfn>,<dfn>endOffset</dfn>の4つのプロパティをRangeは持っており、それぞれ開始点のコンテナ、開始点のオフセット、終了点のコンテナ、終了点のオフセットです。</p>
<p>ただし、これらは<strong>書き換えできません</strong>。これを直接いじって開始点・終了点を変えることはできないのです。</p>

<h4>その他のメソッド・プロパティ</h4>
<p>他にもいろいろRangeをいじるメソッドがあります。</p>
<p><dfn>setStartBefore</dfn>,<dfn>setEndBefore</dfn>は、それぞれ開始点・終了点を、あるノードの直前に移動します。引数はそのノードです。例えば、</p>
<pre><code>
var r = document.createRange();
r.<strong>setStartBefore</strong>(document.body);
</code></pre>
<p>とした場合、body要素の前だから、開始点は</p>
<div class="tree">
html
<ul>
  <li>html <mark>←コンテナ</mark>
    <ul>
      <li>head
      <li class="no-branch"><mark>←開始点</mark>
      <li>body
    </ul>
</ul>
</div>
<p>ということになります。即ち、コンテナはhtml要素で、オフセットは1ですね。</p>
<p>また、<dfn>setStartAfter</dfn>,<dfn>setEndAfter</dfn>というメソッドもあります。これは、上の2つは逆にあるノードの直後に移動します。</p>

<p>さらに、使う機会があるかは知りませんが、<dfn>collapse</dfn>というメソッドがあります。これは、そのRangeをつぶれた状態にする、つまり開始点と終了点が同じ状態にするものです。このとき、開始点に合わせるか終了点に合わせるかという問題があるので、それを1つの引数で指定します。これは<strong>真偽値</strong>で、trueなら開始点、falseなら終了点に合わされます。</p>
<p>また、そのRangeが今つぶれているかどうかは、<dfn>collapsed</dfn>というプロパティに真偽値で入っています。</p>

<p>さらにさらに、<dfn>selectNode</dfn>と<dfn>selectNodeContents</dfn>という2つのメソッドがあります。どちらも引数はノード一つです。これらのメソッドでは、開始点と終了点が同時に変更されます。</p>
<p>selectNodeは、Rangeを、そのノードを囲む（選択した）状態にするというものです。例えば、</p>
<pre><code>
var r = document.createRange();
r.<strong>selectNode</strong>(document.body);
</code></pre>
<p>としたとき、</p>
<div class="tree">
html
<ul>
  <li>html
    <ul>
      <li>head
      <li class="no-branch"><mark>←開始点</mark>
      <li>body
      <li class="no-branch"><mark>←終了点</mark>
    </ul>
</ul>
</div>
<p>となります。body要素全体が範囲になっていることがわかります。開始点と終了点のコンテナはいずれもhtml要素で、開始点はオフセット1、終了点はオフセット2となります。</p>
<p>selectNodeContentsは、そのノードの外側から囲むのではなく、内側から囲みます。つまり、例えば</p>
<pre><code>
var r = document.createRange();
r.<strong>selectNodeContents</strong>(document.body);
</code></pre>
<p>としたときは、</p>
<div class="tree">
html
<ul>
  <li>html
    <ul>
      <li>head
      <li>body <mark>←コンテナ</mark>
        <ul>
          <li class="no-branch"><mark>←開始点</mark>
          <li>…
          <li>…
          <li>…
          <li class="no-branch"><mark>←終了点</mark>
        </ul>
    </ul>
</ul>
</div>
<p>という感じになります。コンテナはどちらもbody要素になります。</p>

<p>今回は、Rangeの作り方を解説しました。次回から、Rangeの使い方を解説していきます。</p>

