<h3>プロパティの一覧を取得する</h3>
<p>ES5の特徴は、オブジェクト、特にプロパティに対する操作が強化されたことです。</p>
<p>まず、オブジェクトに存在するプロパティの一覧を取得することを考えましょう。例えば、</p>
<pre><code>
var obj={
  <mark>foo</mark>:"bar",
  <mark>baz</mark>:3,
};
</code></pre>
<p>というオブジェクトにはfooとbazという2つのプロパティがあります。このように、あるオブジェクトが持っているプロパティを全て調べるということが必要になる機会は少なくないでしょう。</p>
<p>このとき実は、古典的な方法としては<strong>for-in文</strong>があります。これは以下のような形の文です。</p>
<pre><code>
for(var <mark>変数名</mark> <strong>in</strong> <mark>オブジェクト</mark>){
}
</code></pre>
<p>forという名前から察せるように、これはループの一種です。左の変数に、右のオブジェクトが持っているプロパティの<strong>名前</strong>が入り、全てのプロパティについてループします。例えば次のコードを実行してみましょう。</p>
<pre><code>
var obj={
  <mark>foo</mark>:"bar",
  <mark>baz</mark>:3,
};

for(var <mark>key</mark> <strong>in</strong> <mark>obj</mark>){
  console.log(key);
}
</code></pre>
<p>実行すると、</p>
<pre><code>
foo
baz
</code></pre>
<p>と出ることでしょう。つまり、変数keyに<code>"foo"</code>が入った状態で1回、<code>"baz"</code>がはいった状態で1回、内部の文が実行されたことになります。</p>
<p>これを使えばプロパティごとに処理をすることが可能です。もちろん、プロパティ名ではなくその値が欲しいならば次のようにします。</p>
<pre><code>
for(var <mark>key</mark> <strong>in</strong> <mark>obj</mark>){
  console.log(<mark>obj[key]</mark>);
}
</code></pre>
<p id="anchor-object-keys">従来（ES5以前）はプロパティの一覧にアクセスする方法はこれだけでしたが、ES5においては新しい方法が用意されました。</p>
<p>それは<dfn>Object.keys</dfn>メソッドです。これは、引数として渡されたオブジェクトが持つプロパティの名前の一覧を配列にして返すメソッドです。ちなみに、このときの順番はfor-in文で列挙される順番と同じことが保証されています。</p>
<p>これを使って上のfor-in文と同じことをしたければ、こうです。</p>
<pre><code>
var obj={
  foo:"bar",
  baz:3,
};

var names=<mark>Object.keys</mark>(obj);

console.log(names);	// ["foo","baz"] のように出力される

names.forEach(function(name){
  console.log(obj[name]);
});
</code></pre>
<p>しかし実は、for-in文とObject.keysには1つ決定的な違いがあります。それは<a href="9_3.html">継承</a>が関わる場合です。</p>
<p>このサンプルを思い出しましょう。</p>
<pre><code>
//敵を作る
function Teki(n){
  this.name = n;
}
//現れる
Teki.prototype.appear = function(){
  console.log(this.name+"が あらわれた！");
};
//攻撃
Teki.prototype.attack = function(){
  console.log(this.name+"のこうげき！ダメージをうけた！");
};

var <mark>zako</mark> = new Teki("ザコ");
</code></pre>
<p>ここで、<code>zako</code>が持つプロパティはどれでしょうか。</p>
<pre><code>
console.log(Object.keys(zako));// ["name"]
</code></pre>
<p>これの結果は<code>["<mark>name</mark>"]</code>です。つまり、Tekiコンストラクタ内で付加されたnameプロパティのみが<code>zako</code>に存在すると言われています。</p>
<p>しかし、ここですこし考えるべきことがあります。</p>
<p>このオブジェクトzakoがnameプロパティしか持っていないならば、appearメソッドやattackメソッドはどうなるのでしょう。</p>
<pre><code>console.log(zako.appear,zako.attack);</code></pre>
<p>このようにすると、ちゃんと関数が表示されることが確認できますから、appearやattackも、zakoのプロパティとして利用できるはずです。</p>
<p>ここで、nameと、appearやattackの間にある違いは、「オブジェクトの<em>自分自身のプロパティかどうか</em>」という点ですね。appearやattackというのは、nameとは異なり<em>prototypeを介してアクセスしている</em>プロパティなのです。</p>
<p>つまり、appearやattackというのは実はzakoそれ自体がもつプロパティではなく、あくまでTeki.prototypeが持っているプロパティであって、zakoからはそれを間接的に参照できるということです。</p>
<p>この違いは以前はあまり気にするようなことではなかったですが、ES5の時代になって気にすることが増えたような気がします。</p>
<p>さて一方、for-in文で同じことをやってみるとしましょう。</p>
<pre><code>
for(var key in <mark>zako</mark>){
  console.log(key);
}
</code></pre>
<p>今度は、nameだけでなくappearやattackも表示されることが確認できたと思います。つまり、<strong>for-in文はそのオブジェクト自身がもつプロパティだけでなくprototypeを介して参照するプロパティも列挙する</strong>ということです。</p>
<p>しかし、理解度の高い方はここで新たな疑問が生じたことでしょう。上で示したサンプルを思い出しましょう。</p>
<pre><code>
var obj={
  foo:"bar",
  baz:3,
};

for(var key in obj){
  console.log(key);
}
</code></pre>
<p>これはfor-in文ですから、objから参照できるプロパティはprototype経由のものも遡って表示されなければなりません。また、<a href="9_3.html">九章第三回</a>で述べたようにこのオブジェクト<code>obj</code>はObjectのインスタンスです。となると、for-in文は当然Object.prototypeをさかのぼって探しに行くはずです。</p>
<p>Object.prototypeがもつプロパティとしては<a href="9_7.html#anchor-object-translation">toString</a>などがあります。次のようにするとその存在を確認できます。</p>
<pre><code>console.log(Object.prototype.toString);</code></pre>
<p>もちろん、さきほどのobjからもtoStringが参照できます。</p>
<pre><code>console.log(obj.toString);</code></pre>
<p>ではなぜ、prototypeまでさかのぼって列挙するはずのfor-in文でも、このtoStringなど（他にもいろいろありますが）は列挙されなかったのでしょうか。それが次の話題です。</p>

<h3 id="anchor-property-attribute">プロパティの属性</h3>
<p>実は、すべてのプロパティには<strong>属性</strong>というものが付属しています。属性は、プロパティの性質を決めるものです。</p>
<p>まず紹介するのが<dfn>enumerable属性</dfn>です。日本語にすると「列挙可能性」とかそういう感じです。この属性はtrueかfalseかで、<strong>enumerableがfalseの属性はfor-in文やObject.keysで列挙されない</strong>のです。</p>
<p>我々が普通に作るプロパティは全てenumerableがtrueのプロパティになります。しかし、Object.prototypeが持つメソッドとか、JavaScriptの言語仕様としてすでに存在しているようなプロパティは、基本的に列挙の邪魔にならないようにenumerableがfalseになっています。さっき発生した謎の答えはこれです。</p>

<p>属性は全部で3つあります。<dfn>writable</dfn>, <dfn>enumerable</dfn>, <dfn>configurable</dfn>で、いずれもtrueかfalseかです。</p>
<p>デフォルトは全てtrueで、普通にプロパティに代入するだけでは全てtrueのプロパティしか作れません。</p>
<p>writableは「書き込み可能かどうか」ということで、writableがfalseのプロパティは書き換えられません。また、configurableは「設定可能かどうか」です。この2つの具体的な動作は後述します。</p>

<h3 id="anchor-property-descriptor">プロパティデスクリプタ</h3>
<p>ES5より前のJavaScriptにおいてはこれらの属性は完全に内部的なもので、スクリプト側からどうこうすることはできませんでした。しかしES5ならば、属性に干渉することができます。</p>
<p>属性（など）をいじるには、<dfn>プロパティデスクリプタ</dfn>を使います。これはプロパティの属性を含む諸々の情報を表すオブジェクトです。これを得るには、<dfn>Object.getOwnPropertyDescriptor</dfn>メソッドを使います。</p>
<pre><code>
var desc = <mark>Object.getOwnPropertyDescriptor</mark>(obj, "foo");
</code></pre>
<p>第一引数のobjというのは、プロパティを持つオブジェクトで、第二引数はプロパティ名です。つまり、この呼び出しによって、
<code><mark>obj</mark>["<mark>foo</mark>"]</code>
についての情報を要求しているわけです。もちろん結果は返り値で戻ってきます。</p>
<p>先ほどの</p>
<pre><code>
var obj={
  foo:"bar",
  baz:3,
};
</code></pre>
<p>のobjのプロパティfooについて、Object.getOwnPropertyDescriptor(obj,"foo")の結果は次のようなオブジェクトです。</p>
<pre><code>
{
  <mark>writable</mark>: true,
  <mark>enumerable</mark>: true,
  <mark>configurable</mark>: true,
  <mark>value</mark>: "bar"
}
</code></pre>
<p>見てわかるように、さきほどの3つの属性についての情報が入っていて、全てtrueであることがわかります。もうひとつ<strong>valueプロパティ</strong>があって、これがプロパティの値となっています。</p>
<p>なお、これは情報提供用にObject.getOwnPropertyDescriptorによって作られたオブジェクトなので、このオブジェクトの内容を書き換えても何も起こりません。プロパティデスクリプタを変更する方法は後で説明します。その前にもう1つ例を見ましょう。</p>
<pre><code>
console.log(Object.getOwnPropertyDescriptor(Object.prototype,"toString"));
</code></pre>
<p>Object.prototypeがもつtoStringメソッドです。これの結果はこうなります。</p>
<pre><code>
{
  <mark>writable</mark>: true,
  <mark>enumerable</mark>: <strong>false</strong>,
  <mark>configurable</mark>: true,
  <mark>value</mark>: function toString() { [native code] }
}
</code></pre>
<p>先ほど説明したようにenumerableがfalseになっていることが分かります。valueのfunction toString() { [native code] }というのは、これがtoStringの本体にあたる関数ですが、中身はブラウザの内部処理なのでJavaScriptでは表現できないという意味です。</p>
<p>ちなみに、メソッド名にOwnと入っていることからも分かる通り、オブジェクト自身のプロパティしか得られません。このように、基本的にプロパティをいじるときはそのオブジェクト自身のプロパティが対象になります。</p>

<p id="anchor-object-defineproperty">では次に、プロパティデスクリプタを変更する方法を紹介します。それは<dfn>Object.defineProperty</dfn>メソッドです。</p>

<p>例えば、writable属性がfalseであるプロパティhogeを、objに追加するには次のようにObject.definePropertyを呼び出します。</p>
<pre><code>
<mark>Object.defineProperty</mark>(obj,"<mark>hoge</mark>",{
  writable:<mark>false</mark>,
  enumerable:true,
  configurable:true,
  value:"hogehoge"
});
</code></pre>
<p>このように3つの引数をとります。第一引数、第二引数はgetOwnPropertyDescriptorと同じくオブジェクトとプロパティ名ですが、第三引数に<strong>新しいプロパティデスクリプタ</strong>となるオブジェクトを渡す必要があります。definePropertyを呼び出すと、その新しいプロパティデスクリプタにしたがってプロパティが書き換えられます。</p>
<p>この場合objに新しいプロパティhogeが作られ、<code>obj.hoge</code>は<code>"hogehoge"</code>が入っています。</p>
<p>それではwritableの効果を確かめてみましょう。</p>
<pre><code>
var obj={
  foo:"bar",
  baz:3,
};

Object.defineProperty</mark>(obj,"<mark>hoge</mark>",{
  writable:<strong>false</strong>,
  enumerable:true,
  configurable:true,
  value:"hogehoge"
});

console.log(obj.hoge);	//"hogehoge"と表示される

obj.hoge="piyopiyo";	//代入してみる

console.log(obj.hoge);	//結果は…?
</code></pre>
<p>結果をみると分かると思いますが、<code>obj.hoge</code>に違うものを代入したはずなのに変わりません。これがwritableをfalseにしたことの効果です。<small>（注：<a href="11_9.html">strictモード</a>の場合何も起こらないのではなくエラーが出ますが、それについてはまた今度解説します。）</small></p>

<p>それでは最後にconfigurableについて解説します。configurableは日本語でいうと「設定可能」といった感じです。</p>
<p>これはすごい力をもっていて、configurableがfalseであるプロパティの属性はいじれません。すなわち、definePropertyしようとするとエラーになります。</p>
<p>加えてwritableもfalseにしておけば、もはやそのプロパティの内容は絶対に不変であることが保証されたようなものです。</p>
<p>例えば、Object.prototypeのようにいじられたら大惨事になるプロパティは、いじれないようにwritableとconfigurableがfalseになっています。</p>

<p>また、実は、<a href="9_6.html">ゲッタとセッタ</a>についてもdefinePropertyを用いて設定できます。</p>
<p>というのも、その時は既存のオブジェクトにゲッタ・セッタを設定するのに__defineGetter__と__defineSetter__という2つのメソッドを使っていましたが、これは名前が明らかに怪しいことからもわかるように、非標準のメソッドでした。それに対してES5においてdefinePropertyを用いた正式な設定方法が用意されたのです。</p>
<p>ゲッタやセッタを設定したいときは、プロパティデスクリプタのget,setというプロパティに関数を入れてやります。例えば、<a href="9_6.html">九章第六回</a>の真偽値しか入れられないプロパティのサンプルは次のように書けます。</p>
<pre><code>
var obj = { _a : 0 };
Object.defineProperty(obj,"a",{
  enumerable:true,
  configurable:true,
  <mark>get</mark>:function(){ return this._a; },
  <mark>set</mark>:function(n){
    if(n===true || n===false){
      this._a = n;
    }
  }
});
</code></pre>
<p>getとsetがある場合writable属性は無視されます。もちろん、ゲッタとセッタがあるのでvalueも要りません。</p>

<p>今までの例ではObject.definePropertyで新しいプロパティを作りましたが、既存のプロパティに対してObject.definePropertyを使うこともできます。このとき、第3引数に渡すオブジェクトはプロパティデスクリプタを<em>部分的に</em>指定することができます。これにより、プロパティの属性を部分的に書き換えることができます。</p>
<pre><code>
var obj={
  foo: "bar",
};

Object.defineProperty</mark>(obj,"foo",{
  configurable:false,
});

console.log(Object.getOwnPropertyDescriptor(obj, "foo"));
</code></pre>
<p>上の例では、Object.definePropertyによりobjのfooプロパティのconfigurableプロパティをfalseに設定しました。他の属性（あるいはvalueプロパティ）は設定されていないのでそのままになります。</p>
<p>新規にプロパティを作るときにこのようにプロパティデスクリプタの一部を省略した場合は、省略された属性はfalseとして扱われます。</p>

<h3>その他のメソッド</h3>
<p>さて、属性の説明が一段落したところで、その他の関連メソッドを紹介します。</p>
<p id="anchor-object-defineproperties">まず<dfn>Object.defineProperties</dfn>です。さっきのdefinePropertyが複数形になっただけであることからもわかるように、複数のプロパティのプロパティデスクリプタを一斉に変更できます。つまりこんな感じです。</p>
<pre><code>
<mark>Object.defineProperties</mark>(obj,{
  <mark>foo</mark>:{
    value: "bar",
    configurable:true
  },
  <mark>bar</mark>:{
    value:3,
    enumerable:true
  }
});
</code></pre>
<p>第一引数は親となるオブジェクトです。第二引数はオブジェクトで、設定したいプロパティ名をキーにしてプロパティデスクリプタを値としてもつ辞書オブジェクトとなっています。この例ではプロパティfooとbarに対してプロパティデスクリプタを設定しています。</p>
<p>さらに、Object.keysに関連して、<dfn>Object.getOwnPropertyNames</dfn>を紹介します。これは、基本はObject.keysと同じですが、<strong>enumerableがfalseのプロパティも列挙する</strong>という点で違いがあります。どちらを使うかは場合によりますが、たいていはObject.keysで事足りることと思います。</p>

<h3>Objectのインスタンスのプロパティ</h3>
<p>さて、今まではObjectが直接持っているメソッドを紹介してきましたが、ここでObjectのインスタンスがもつメソッド（すなわち<code>Object.prototype</code>がもつメソッド）を1つ紹介します。</p>
<p id="anchor-object-hasownproperty">まず紹介するのは<dfn>hasOwnProperty</dfn>です。これはプロパティの名前を引数として渡すと、そのプロパティを持っているかどうかを真偽値で返すメソッドです。</p>
<pre><code>
//敵を作る
function Teki(n){
  this.name = n;
}
//現れる
Teki.prototype.appear = function(){
  console.log(this.name+"が あらわれた！");
};
//攻撃
Teki.prototype.attack = function(){
  console.log(this.name+"のこうげき！ダメージをうけた！");
};

var zako = new Teki("ザコ");

console.log(zako.<mark>hasOwnProperty</mark>("name"));	//true
console.log(zako.<mark>hasOwnProperty</mark>("appear"));	//false
console.log(zako.<mark>hasOwnProperty</mark>("attack"));	//false
</code></pre>
<p>この例を見てわかるように、prototypeチェーンを遡ったりしないことは、Ownと名前に入っていることからも明らかです。また、このメソッドはenumerableがfalseなプロパティであっても正しく判定してくれます。</p>
<p id="anchor-in">対照的に、<strong>in演算子</strong>というのがあります。これも同じようにプロパティが存在するかどうかを確かめる動作をしますが、prototypeチェーンまでさかのぼって探すという違いがあります。</p>
<pre><code>
//敵を作る
function Teki(n){
  this.name = n;
}
//現れる
Teki.prototype.appear = function(){
  console.log(this.name+"が あらわれた！");
};
//攻撃
Teki.prototype.attack = function(){
  console.log(this.name+"のこうげき！ダメージをうけた！");
};

var zako = new Teki("ザコ");

console.log("name" <mark>in</mark> zako);	//true
console.log("appear" <mark>in</mark> zako);	//true
console.log("attack" <mark>in</mark> zako);	//true
console.log("foo" <mark>in</mark> zako);	//false (fooというプロパティは無いので)
</code></pre>
<p>このin演算子はfor-in文のinとはあまり関係ないので注意しましょう。</p>


<p>もう1つ、<dfn>propertyIsEnumerable</dfn>を紹介します。読んで字の如しというようなメソッド名ですが、hasOwnProperty同様にプロパティ名を渡すと、そのプロパティがenumerableであるかどうかをtrueかfalseで返します。そもそもプロパティがない場合はfalseとなります。</p>
<p>まあこれはあまり使う機会がないかもしれません（getOwnPropertyDescriptorでも情報が取れますし）。</p>

<p>以上で、オブジェクトのプロパティや属性に関する説明は終了です。しかし次回も似たような話が続きます。</p>

