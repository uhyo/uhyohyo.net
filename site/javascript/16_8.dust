<p>今回は比較的短いですが、<b>オブジェクトリテラル</b>について解説します。オブジェクトリテラルはこういうやつですね。</p>
<pre><code>
{
  foo: 'bar',
  hoge: 3,
}
</code></pre>
<p>ES2015にはオブジェクトリテラルにも便利な記法が追加されましたので、それを解説します。</p>

<h3>最後のカンマ</h3>
<p>その前に、皆さんは気づいていたでしょうか。オブジェクトリテラルの<em>最後のカンマ</em>について気づいていたでしょうか。</p>
<pre><code>
{
  foo: 'bar',
  hoge: 3<mark><em>,</em></mark> // <em>←これ</em>
}
</code></pre>
<p>です。オブジェクトリテラルの中身は<code><var>プロパティ名</var>: <var>値</var></code>というのをカンマで区切って複数並べる形をしていましたが、一番最後にもこのようにカンマを付けることができます。</p>
<p>かなり昔のJavaScriptではできなかったので後方互換性を気にして最後のカンマを付けない人もいましたが、最近はそのような心配をする必要はほぼ無くなりましたので遠慮なく最後のカンマを付けましょう。</p>
<p>最後のカンマを付けられるのは非常に便利です。なぜなら、リテラルの一番最後に新しいプロパティを追加するときに、最後のカンマがないと「前のプロパティにカンマを追加する」「新しいプロパティを書く」という2ステップが必要になるからです。</p>

<h3>プロパティ名</h3>
<p>もうひとつ復習ですが、オブジェクトリテラルのプロパティ名の書き方は次の3種類があります。</p>
<pre><code>
var obj = {
  // 直書き
  foo: 'Hey!',
  // 文字列
  'foo bar': 123,
  // 数値
  12: 'hello',
};
</code></pre>
<p>直書きで書けるプロパティ名には限りがあります。例えばスペースを含むプロパティ名は無理です。一方、文字列を指定する記法では上の例のように任意のプロパティ名を使うことができます。</p>
<p>これはあまり知られていませんが、プロパティのところに数値リテラルを書くことができます。例えば上の例ではプロパティ名に<code>12</code>と書いてあり、これは<code>"12"</code>というプロパティ名に解釈されます。</p>
<p>数値リテラルを書いた場合はその数値を文字列に変換したものがプロパティ名になります。次のような例に注意してください。</p>
<pre><code>
var obj = {
  <mark>1e5</mark>: 'foo',
};

console.log(obj); // {<em>100000</em>: 'foo'}
</code></pre>

<h3>Computed Property Name</h3>
<p>では、まずcomputed property nameの話をします。これは、<a href="16_4.html">シンボル</a>のところでも少しでてきましたが、プロパティ名を計算によって決められる記法です。具体的には、<code>[<var>式</var>]: <var>値</var></code>のようにプロパティ名を<code>[ ]</code>で囲い、その中に式を書きます。式の結果がプロパティ名となります。</p>
<pre><code>
var str1 = 'foo', str2 = 'bar';
var obj = {
  [<mark>str1 + str2</mark>]: 12345,
}

console.log(obj); // {<em>foobar</em>: 12345}
</code></pre>
<p>今までの記法ではプロパティ名は完全に決め打ちでしたから、この方法により動的なプロパティ名をオブジェクトリテラル内で使えるのは画期的です。また、プロパティ名を文字列ではなくシンボルにしたい場合にこの記法は必須となります。</p>

<h3>変数の省略</h3>
<p>JavaScriptを書いていると、次のようなパターンが頻出します。</p>
<pre><code>
var foo = '何かの値';

var obj = {
  foo: foo,
};
</code></pre>
<p>この例では新しいオブジェクトobjを作る際に、そのオブジェクトのプロパティfooの値を変数fooの値で初期化しています。プログラム中ではfooと2回連続して書かれており、何か間抜けです。</p>
<p>このようなことが起こる典型的な場面は、何か複雑なオブジェクトを作る際にオブジェクトリテラルの中で全ての計算を行うと見難くなるので各プロパティをあらかじめ計算しておくという場合です。この場合、プロパティfooに入れるべき値を計算して変数fooに入れておいて、オブジェクトリテラルを書くときにはプロパティfooには変数fooの値を入れるようにするということです。</p>
<p>上の例は、ES2015では次のように書くことができます。
<pre><code>
var foo = '何かの値';

var obj = {
  <mark>foo</mark>,
};
</code></pre>
<p><code>: <var>値</var></code>の部分が消えました。このように、プロパティ名と、そのプロパティに入れるべき値が入った変数名が同じ場合は省略することができます。</p>
<p>こんなの何に使うんだと思うかもしれませんが、実際にプログラムを書いてみると意外と使います。</p>

<h3 id="anchor-method-shorthand">関数の省略記法</h3>
<p>プロパティとして関数を入れたい場合の省略記法があります。次の2つのオブジェクトリテラルは基本的には同じ意味となります。</p>
<pre><code>
var obj1 = {
  func: function(foo, bar){
    return foo + bar;
  },
};

var obj2 = {
  func(foo, bar){
    return foo + bar;
  },
};
</code></pre>
<p>上が従来の記法であり、funcというプロパティに<code>function(foo, bar){ return foo + bar; }</code>という関数を入れています。下の記法はその省略形です。分かりやすくていいですね。</p>
<p>ただし、下の記法で作られた関数は<em>コンストラクタとして使用できない</em>という違いがあります。プロパティ（というかメソッド）がコンストラクタになるという場面はあまり無いと思いますが、もしそのようなことをしたい場合は注意しましょう。</p>

<p>また、<a href="16_6.html">ジェネレータ関数</a>に対応する省略記法もあります。</p>
<pre><code>
var obj1 = {
  func: function*(){
    // ...
  },
};

var obj2 = {
  <mark>*</mark>func(){
    // ...
  },
};
</code></pre>

<p>なお、これらの省略記法に対しても上で紹介した3種類のプロパティ名の記法が全て使えます。よって、こんなことも可能です。</p>
<pre><code>
var obj = {
  'foo bar'(){
    return 0;
  },
  1e5(){
    return 1e5;
  },
  [Symbol.iterator](){
    throw new Error('Hi');
  },
};
</code></pre>
<p>やや余談になりますが、関数オブジェクトは<b>name</b>というプロパティを持ちます。その名の通り関数の名前です。次のようにfunction宣言で作られた関数は宣言された名前を持ちます。</p>
<pre><code>
function foo(){
}

console.log(foo.name); // "foo"
</code></pre>
<p>関数式で作った関数は名前がない場合（俗にいう無名関数ですね）もありますが、実は直接変数に代入する場合は適切に名前をつけてもらえます。</p>
<pre><code>
var func1 = function(){};
var func2 = (function(){ return function(){}; })();
var func3 = function <mark>foobar</mark>(){};

console.log(func1.name); // "func1"
console.log(func2.name); // ""
console.log(func3.name); // "foobar"
</code></pre>
<p>プロパティについても基本的には同様です。ただし、nameプロパティ名は文字列ですので、シンボルをプロパティ名にした場合は名前無しになります。にもかかわらず、well-known symbolの場合は特殊な名前が付くこともあります。</p>
<pre><code>
var mysymbol = Symbol();

var obj = {
  foo: function(){
  },
  'foo bar'(){
    return 0;
  },
  1e5(){
    return 1e5;
  },
  [mysymbol](){
    return 300;
  },
  [Symbol.iterator](){
    throw new Error('Hi');
  },
};

console.log(obj.foo.name); // "foo"
console.log(obj['foo bar'].name); // "foo bar"
console.log(obj[1e5].name); // "100000"
console.log(obj[mysymbol].name); // ""
console.log(obj[Symbol.iterator].name); // "[Symbol.iterator]"
</code></pre>

<h3>変数名・プロパティ名とエスケープ記法</h3>
<p>はるか昔、<a href="4_1.html#anchor-escape-sequence">文字列</a>の回で<b>エスケープシーケンス</b>を紹介したのを覚えているでしょうか。特に、コードポイントを指定する記法では、<code>\u1234</code>のような形で文字を表すことができます。</p>
<pre><code>
console.log("foo<mark><em>\u28ff</em></mark>bar"); // "foo<em>&#x28ff;</em>bar"
</code></pre>
<p>恐ろしいことに、コードポイント記法はプロパティ名や変数名に直に書くことができます。</p>
<pre><code>
var foo<mark>\u{1d40d}</mark>bar = 'some value';
console.log(window['foo<em>&#x1d40d;</em>bar']); // 'some value'

var obj = {
  foo<mark>\u{1d439}</mark>: 123,
};
console.log(obj.foo&#x1d439;); // 123
</code></pre>
<p>ただし、直に書く場合のコードポイントは識別子に使用可能な文字を表していなければいけません。なお、識別子 (<i lang="en">idenfitier</i>）はプログラム中に直に書いた変数名などを指す用語です。例えば、スペース（U+0020）は識別子に使用可能な文字ではないですから、次のようにしてもエラーになります。</p>
<pre><code>
var foo<em>\u0020</em>bar = 3;
</code></pre>
<p>この記法は見難いし使いどころがないような気がしますが、稀に使われるかもしれないので頭の片隅に置いておくのがよいでしょう。</p>
