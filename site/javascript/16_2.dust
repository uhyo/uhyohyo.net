<p>今回は<strong>イテレータ</strong>を紹介します。イテレータ（<i lang="en">iterator</i>）とは、ざっくり言うと一連の複数のデータからなるものです。</p>
<p>そう言われて思い浮かぶのは<b>配列</b>でしょう。配列は複数のデータが並んだオブジェクトです。</p>
<p>他にも<b>文字列</b>なども、文字の並びとみなせばイテレータと言えなくもありません。</p>
<p>ES2015ではこれらを抽象化して<b>イテレータ</b>として仕様化されました。</p>

<h3>for-of文</h3>
<p><dfn>for-of文</dfn>はES2015で新たに追加された構文で、イテレータの中身を1つずつ取り出して処理する文です。その名前から連想される通り、for文やfor-in文と似た使い方ができます。次の例を見てください。</p>
<pre><code>
var arr=[0,1,2,3,4];
<mark>for</mark>(var value <mark>of</mark> arr){
  console.log(value);
}
</code></pre>
<p>この文を実行すると、0から4までが順番に出力されます。普通のfor文を使うよりも圧倒的に楽ですね。</p>
<p>文字列は文字の並びなので、次のように文字列にfor-of文を使うこともできます。</p>
<pre><code>
<mark>for</mark>(var value <mark>of</mark> "foobar"){
  console.log(value);
}
</code></pre>

<p>この場合は文字列に含まれる文字が1文字ずつ出力されます。</p>
<p>なお、for-of文でもcontinue文やbreak文が使用可能です。</p>

<h3>イテレータオブジェクト</h3>
<p>実はさっきは嘘をついていました。配列や文字列は厳密にはイテレータではなく、<b>iterable</b>です。そして、for-of文に渡すべきなのもイテレータではなく<b>iterable</b>です。iterableとは、簡単にいうと<em>イテレータにより順に取り出すことができるもの</em>です。for-of文にiterableが渡されると、それに対応するイテレータが作られ、そのイテレータにより値が順番に取り出されるのです。</p>
<p>イテレータもやはりオブジェクトです。実は、配列の場合は<dfn>values</dfn>メソッドにより対応するイテレータを得ることができます。</p>
<p>イテレータは<dfn>next</dfn>メソッドを持ちます。nextメソッドは「次」の値を取得することを意味します。</p>
<p>試しに呼んでみましょう。</p>
<pre><code>
var iterator = [1,2,3,4,5].<mark>values</mark>();
console.log(iterator.<mark>next</mark>());
</code></pre>
<p>nextメソッドの結果はオブジェクトです。この場合、次のような結果になるはずです。</p>
<pre><code>
{
  <mark>value</mark>: 1,
  <mark>done</mark>: false
}
</code></pre>
<p>イテレータのnextメソッドの返り値は、このように<b>value</b>プロパティと<b>done</b>プロパティを持つオブジェクトになります。valueプロパティがイテレータが返す値です。今回は、初めてnextメソッドを読んだので配列の最初の値である1となっています。nextメソッドをもう1回呼ぶと次のオブジェクトが返るでしょう。</p>
<pre><code>
{
  <mark>value</mark>: 2,
  <mark>done</mark>: false
}
</code></pre>
<p>このように、nextメソッドを1回呼ぶたびに配列が1つずつ読み進められます。</p>
<p>doneプロパティは2回ともfalseですね。これは真偽値で、繰り返しが「終了」したかどうかを表します。というのも、イテレータの繰り返しには終わりがある場合があるのです。配列の場合、配列を最後まで読んでしまったらもう次がないですね。このような場合に、もう次がないのにnextメソッドが呼ばれた場合、イテレータはdoneプロパティがtrueのオブジェクトを返します。その場合valueはundefinedになります。</p>
<p>よって、上のfor-of文の例はイテレータを手動で回すことで次のように書くことができます（実際に処理系の内部で起こっていることは少し違うかもしれませんが）。</p>
<pre><code>
var arr=[1, 2, 3, 4, 5];
var iterator=arr.values();
var result;
while(true){
  result=iterator.next();
  if(result.done){
    break;
  }
  console.log(result.value);
}
</code></pre>
<p>ただ、現在（2017年10月）配列のvaluesメソッドは多くのブラウザで実装されていないようです。ただ、次に紹介する2つのメソッドは存在します。</p>
<p>それが<dfn>keys</dfn>メソッドと<dfn>entries</dfn>メソッドです。valuesメソッドは配列の各要素を順番に返すイテレータを作りましたが、keysは添字のイテレータを返します。つまり、単に0,1,2,…という値を返すイテレータになります。当然長さ分だけ繰り返したら終了です。</p>
<p>entriesメソッドは添字と値をペアにした配列を値として返します。これは繰り返すときに配列の値でだけでなく添字もほしいときに使えます。具体的には：</p>
<pre><code>
for(var arr of ["foo","bar","baz"].<mark>entries</mark>()){
  console.log(arr);
}
</code></pre>
<p>というコードを実行すると、次のように表示されるでしょう。</p>
<pre><code>
[0,"foo"]
[1,"bar"]
[2,"baz"]
</code></pre>

<h3>イテレータを作る</h3>
<p>さて、それでは自分でイテレータを作ってみましょう。実は、nextメソッドを備えたオブジェクトならイテレータになります。</p>
<p>例えば、次のオブジェクトはフィボナッチ数を順に返すイテレータです。</p>
<pre><code>
{
  a:1,
  b:0,
  <mark>next</mark>:function(){
    var n=this.a+this.b, oldb=this.b;
    this.a=oldb, this.b=n;
    return {
      <mark>value</mark>: oldb,
      <mark>done</mark>: false
    };
  }
}
</code></pre>
<p>このオブジェクトのnextメソッドは常にdoneがfalseのオブジェクトを返しますから、無限イテレータであることが分かります。しかし無限イテレータは無限ループを引き起こす場合もあり、扱いに注意が必要です。</p>

<p>残念なことに、上のイテレータをfor-of文に渡してもエラーが出ます。 for-of文に渡さなければならないのはイテレータではなくiterableだからです。</p>

<p><dfn>iterable</dfn>は先に述べたように、<strong>イテレータにより順に取り出すことができるオブジェクト</strong>です。for-of文はiterableを受け取って、それに対応するイテレータを取り出してそれを回して処理します。</p>
<p>最後にfor-of文に配列を渡した例がありましたが、配列もiterableの一種です。配列に対応するイテレータは先に説明したようにvaluesメソッドで得られるのでした。実は、普通のイテレータが管理するのは「どこまで読んだか」だけで、データは配列本体にあります。このことは次のサンプルから分かります。</p>
<pre><code>
var arr = [3, 1, 4, 1, 5];
<em>// arrのイテレータを作る</em>
var iterator = arr.entries();
<em>// arrを変更</em>
arr[0] = 0;

<em>// 手動でイテレータを回す</em>
var result;
while(true){
  result=iterator.next();
  if(result.done){
    break;
  }
  console.log(result.value);
}
</code></pre>
<p>配列からイテレータを作ったあとに配列を変更していますが、イテレータを回すと配列に対する変更の影響を受けていることが分かります。</p>
<p>この例から分かるように、イテレータというのは本来データを保持するオブジェクトからデータを取ってくる役割を持っています。なので、先のフィボナッチ数のような例はあまり適切ではないかもしれません（イテレータ自体がデータを生産しているので）。</p>
<p>for-of文の場合も、実はイテレータそのものではなくiterableでないと受け付けてくれません。for-of文以外にもiterableが活躍する場面はありますが、イテレータ単体で使う機会というのはなかなかないでしょう。</p>
<p>さて、どうすればiterableなオブジェクトを作れるかですが、<strong>対応するイテレータを取り出す方法</strong>を与えればiterableになります。まあ上の説明からして当然ですね。具体的には、<b>@@iteratorメソッド</b>なるものを持つオブジェクトがiterableなオブジェクトです。このメソッドを呼び出すと対応するイテレータが返るようにすればiterableになります。</p>
<p>@@iteratorというメソッド名らしからぬ名前が出てきましたが、これを解説するには<a href="16_4.html">シンボル</a>の知識が必要なので後回しにします。少し先取りすると、<code>Symbol.iterator</code>をプロパティ名とするようなメソッドを作ればよいです。</p>

<h3>iterableの活用例</h3>
<p>iterableを自分で作る方法は少し後回しにして、iterableのfor-of文以外の活用法を紹介します。</p>
<p id="anchor-array-from"><dfn>Array.from</dfn>というメソッドがあります。これは、配列ではないものから配列を作るメソッドです。<a href="11_7.html">Object.create</a>みたいに、コンストラクタに直接くっついているメソッドですね。</p>
<p>Array.fromは、iterableを渡されるとそれから配列を作ることができま。具体的には、イテレータを回して得た値が順番に入った配列になります。例えば、文字列もiterableであり、イテレータにより1文字ずつ返されるということを紹介したので、文字列をArray.fromで配列にしてみましょう。</p>
<pre><code>
console.log(<mark>Array.from</mark>("foobar"));
</code></pre>
<p>結果は以下のような配列になります。</p>
<pre><code>
["f","o","o","b","a","r"]
</code></pre>
<p>また、Array.fromには第二引数として関数を指定することができます。これは配列に対するmap操作のような感じで、イテレータから取り出された値を引数にしてその関数が呼び出され、その返り値が配列に入るようになります。これにより、イテレータから取り出した値に対して何らかの処理を噛ませてやることができます。例えば先ほどの例で各文字を全て大文字にしたい場合、文字列を大文字して返すメソッドtoUpperCaseを使用して次のように書けます。</p>
<pre><code>
console.log(Array.from("foobar",function(char){
  return char.toUpperCase();
}));
</code></pre>
<p>この結果は
<code>["F","O","O","B","A","R"]</code>
になります。まあこの場合は<code>Array.from("foobar".toUpperCase())</code>と書けばいいのであまり関数を使う意味が無かったですね。</p>
<p>なお、関数の第二引数には、Array.prototype.mapと同様に添字が渡されます。また関数呼び出し時のthis値を、Array.fromの第三引数で指定できます。</p>

<p>また、iterableとは関係ない話になりますが、Array.formはiterableだけでなく、<b>array-likeなオブジェクト</b>からも配列を作ることができます。array-likeなオブジェクトとは、"0","1",…という連番のプロパティとlengthプロパティを持ち、配列のように利用できるオブジェクトです。これはDOM関連でよく出現します。例えば<a href="2_3.html">NodeList</a>などです。これらのarray-likeなオブジェクトは、配列と同様に扱うことができるものの、配列ではないので配列が持つ各種のメソッドを使用することができないという欠点がありました。また、基本的にはiterableではありません（DOMなどは、JavaScriptにイテレータの概念ができるずっと前から定義されていたので仕方がないことですが）。Array.fromを用いて配列に変換することでこれらの恩恵を受けることができます。例えば次の例です。</p>
<pre><code>
console.log(Array.from({
  "0":"foo",
  "1":"bar",
  "2":"baz",
  length:3
}));
</code></pre>
<p>これを実行する
と<code>["foo","bar","baz"]</code>
という配列が得られ、array-likeなオブジェクトを配列に変換できたことがわかります。</p>
<p>なお、注意点として、先ほど例に出したNodeListは実はメソッドの戻り値として返されたあとに変化する可能性があります。適当なページで次のコードを実行すると、<code>ps.length</code>が変化していることが分かります。</p>
<pre><code>
ps = document.getElementsByTagName("p");
console.log(ps.length);
document.body.appendChild(document.createElement("p"));
console.log(ps.length);
</code></pre>
<p>Array.fromで配列に変換した場合、もとのオブジェクトとは関係のない新しい配列が作られるのでその後に元のオブジェクトが変更されたとしても当然反映されません。この点は注意してください。</p>

<h3>補足</h3>
<p>上のArray#entriesの例で次のようなコードがあったのに気づいたでしょうか。</p>
<pre><code>
for(var arr of ["foo","bar","baz"].<mark>entries</mark>()){
  console.log(arr);
}
</code></pre>
<p>for-of文に渡すのはiterableであってイテレータ自体を渡すのではないと説明したのに、ここでfor-of文にイテレータを渡しています。</p>
<p>実はこのように、配列や文字列などの組み込みのiterableから得られるイテレータはそれ自体iterableになるように作られています。当然、対応するイテレータは自分自身になります。</p>
<p>このように、iterableから得られるちゃんとしたイテレータは、それ自体がiterableとなっているのが望ましいですね。先にも述べたように、そのようなiterableの作り方はまた今度です（<a href="16_4.html">一六章第四回</a>で説明します）。</p>

<hr>

<p>今回は以上です。ここではイテレータの例として配列と文字列しかやっていないので、なんだか当たり前でイテレータの凄さが分かりにくいかもしれませんが、イテレータは色々と応用がききます。後々紹介できるといいですね。</p>

