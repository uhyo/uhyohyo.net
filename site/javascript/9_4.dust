<h3>プロトタイプ指向とクラス指向</h3>
<p>第1回で<b>プロトタイプ指向</b>と<b>クラス指向</b>という2種類のオブジェクト指向的考え方に触れました。これらは必ずしもはっきりと区別できるものではありませんが、JavaScriptはプロトタイプ指向と考えられています。</p>
<p>プロトタイプ指向の特徴は、オブジェクトの「種類」のふるまいが別のオブジェクト（プロトタイプ）によって決められることです。というのも、JavaScriptにおいてはこれまで解説したように、<a href="9_2.html">prototype</a>によりある種類のオブジェクトが持つメソッド等を定義できました。プロトタイプ指向ではprototypeも結局のところただのオブジェクトなので、自由に操作できます。</p>
<p>このようなプロトタイプ指向の考え方を広めたプログラミング言語としてSelfという言語が有名です。ただ、それらに比べるとJavaScriptのプロトタイプ指向は少し後述のクラス指向に寄っているといえます。</p>

<p>一方、プロトタイプ指向と対立する概念としてクラス指向というものがあります。代表的なのはJavaなどです（JavaScriptとは別物なので注意しましょう）。</p>
<p>クラスベースでは、オブジェクトのふるまいは<dfn>クラス</dfn>を作ることで表現されます。クラスは、そのクラスのインスタンスが持つプロパティ・メソッドを定義します。基本的にクラスはオブジェクトとは異なるものであり、したがってクラスをオブジェクトのように操作することは困難です<small>（ただし、Rubyのようにメタプログラミング機能が発達している言語ではその限りではありません。このような言語によりプロトタイプ指向とクラス指向の境界が曖昧になっています）</small>。これがクラス指向がプロトタイプ指向と大きく異なる点です。</p>

<h3>継承</h3>
<p>前回紹介したように、JavaScriptでは継承はprototypeを利用することで実現していました。つまり、prototypeの仕組みを用いれば自然と継承が実現できるということです。</p>
<p>一方クラスベースでは、基本的に言語の機能として継承があり、言語レベルで特殊な扱いが必要になります。</p>

<h3>DOMにみるオブジェクト指向</h3>
<p>少しDOMの話もしましょう。実は、DOMの構造もオブジェクト指向的です。</p>
<p>例えば、全てのノードがappendChildなどのようなメソッドを持っています。これは、実はノードはNodeのインスタンスであり、したがって<code>Node.prototype</code>にappendChildがあるのだろうと想像がつきます。</p>
<p>また、ノードには要素ノードやテキストノードなどの種類がありました。これらはそれぞれElementとTextのインスタンスであり、さらにこれらはNodeを継承しています。例えば<code>console.log(Element.prototype instanceof Node);</code>はtrueを表示するでしょう。</p>

