<h3>例外とは</h3>
<p>今回は<dfn>例外</dfn>の解説です。例外とは何かというと、簡単にいうと<strong>エラー</strong>のことです。皆さんも今までに経験があるかもしれませんが、エラーが出るとプログラムはそこで強制的に終了してしまいます。しかし、それだと困る場面があります。そこで、エラーが発生しても対応できる方法があります。</p>

<h3 id="anchor-throw">throw文</h3>
<p>そこでまず解説するのが、<dfn>throw文</dfn>です。throwとは英語で「投げる」という意味です。throwで何かが投げられると、<strong>エラーが発生</strong>したことになります。</p>
<pre><code>
var a=3;
<strong>throw</strong> <mark>a</mark>;
console.log(a);
</code></pre>
<p>この例では、aを投げています。throwでエラーが発生したのでそこでプログラムが終了し、その後のconsole.logは実行されません。なお、別に投げるのは変数である必要はなく、式なら何でも投げることができます。例えば、<code>throw 3;</code>としても構いません。</p>
<p>このようにして、エラーを発生させることができました。エラーはthrowで何を投げても発生します。それでは、何を投げるのがよいのでしょうか。</p>

<h3>Errorオブジェクト</h3>
<p>ここで登場するのが<dfn>Errorオブジェクト</dfn>、つまり<strong>Errorのインスタンス</strong>で、その名の通りエラーを表すオブジェクトです。throw文ではこれを投げるのが普通です。実際、処理系によって発生するエラー（プログラム中のthrow文以外によって発生するエラー）で投げられるのは全てErrorオブジェクトのインスタンスです（場合によっては、Errorを<a href="9_3.html">継承</a>したオブジェクトのインスタンス）。</p>
w:
<p>Errorのインスタンスには<strong>message</strong>というプロパティがあり、これが<strong>エラーメッセージ</strong>を表します。なので、自分で作ったErrorオブジェクトを投げるときもエラーメッセージを設定してあげましょう。</p>
<pre><code>
var err = new <strong>Error</strong>();
err.<mark>message</mark> = "エラーが発生しました。";
<mark>throw</mark> err;
</code></pre>
<p>実際、これを実行するとコンソールに次のようなメッセージが表示されるでしょう。</p>
<pre><code>
Uncaught Error: エラーが発生しました。
</code></pre>
<p>また、エラーメッセージはいちいちmessageプロパティに代入するのではなく、次のようにコンストラクタの引数で設定することができます。</p>
<pre><code>
throw new Error(<mark>"エラーが発生しました。"</mark>);
</code></pre>
<p>これは言うまでもなく、コンストラクタErrorの働きによってエラーメッセージがmessageプロパティに代入されています。もしErrorを自分で作るならば、</p>
<pre><code>
function Error(mes){
  this.<mark>message</mark> = mes;
}
</code></pre>
<p>という感じですね。</p>

<h3>try-catch文</h3>
<p>さて、これでエラーの発生のさせ方は分かりました。しかし、ただエラーを出すだけでは例外処理とはいえません。</p>
<p>今まで見てきたように、通常エラーが発生したら実行は止まります。しかし、JavaScriptで<strong>エラーの発生を検知</strong>して処理するという方法があります。それは、<dfn>try-catch文</dfn>です。これは次のように書きます。</p>
<pre><code>
<mark>try</mark>{
  処理1
}
<mark>catch</mark>(<mark>e</mark>){
  処理2
}
</code></pre>
<p>この文はtryブロックとcatchブロックの2つの部分からなることが分かります。では、この文がどのように実行されるのかを説明します。</p>
<p>まずtryの中の処理1が実行されます。その中でエラーが起きなければ、この文の処理は終了です。処理2は実行されません。</p>
<p>一方、処理1でエラーが起きた場合、通常通り処理1はそこで中断されます。そして、処理はcatch中の処理2に移行します。throw（投げる）したエラーをcatch（受け止める）するという感じです。</p>
<p>処理2は<code>catch(e){ }</code>の中に書いてありますが、この<code>(e)</code>とは何でしょう。実は、括弧の中に書くのは<b>変数名</b>です。ここでは<code>e</code>でなくても構いません好きな名前をつけましょう。処理1の中でエラーが起きて処理2が実行されるとき、エラーで投げられたものはここで指定した変数に代入されます。これは前述の通り、大抵はErrorオブジェクトですね。この変数というのは引数名と同じようなものだと思ってください。投げられたものが代入されるための新しい変数を作ってあげることになります。</p>

<p>それでは試してみましょう。</p>
<pre><code>
try{
  throw new Error("ぎゃーーーー");
  console.log("ここは実行されません");
}catch(<mark>e</mark>){
  console.log("エラーが発生しました！！！！！");
  console.log(<mark>e</mark>);
}
</code></pre>
<p>これを実行すると、「エラーが発生しました！！！！！」というハイテンションなログに続けて「ぎゃーーーー」というエラー内容が表示されるはずです。</p>
<p>これは、まずtryブロック（処理1）が実行され、throwにより中断され処理2に移行したことが分かります。throwがないバージョンと動作を比較してみるのもよいでしょう。</p>

<p>もうひとつ、こんな例も見てみましょう。</p>
<pre><code>
try{
  <mark>console.log(a);</mark>
  console.log("ここは実行されません");
}catch(<mark>e</mark>){
  console.log("エラーが発生しました！！！！！");
  console.log(<mark>e</mark>);
}
</code></pre>
<p>このサンプルではthrow文がない代わりに、console.logで変数aを表示しようとしています。この場合、変数aは存在しませんのでエラーとなります。先に説明したようにthrow文以外の要因でエラーが投げられることがあり、これもその一例です。このような場合でもtry-catch文で扱うことができます。</p>
<p>今回発生したエラーを表示してみると「ReferenceError」というようなことが書いてあると思います。これはReferenceErrorのインスタンスであり、また、Errorを継承しています。<a href="9_3.html#anchor-instanceof">instanceof</a>を使って確かめてみましょう。</p>
<pre><code>
try{
  console.log(a);
}catch(<mark>e</mark>){
  console.log(<mark>e</mark> instanceof ReferenceError);
  console.log(<mark>e</mark> instanceof Error);
}
</code></pre>

<p>さて、例外を利用したもう少し実用的な例を考えてみましょう。<a href="9_6.html">九章第六回</a>のサンプルを持ってきました。</p>
<pre><code>
var obj = {
  _a : 0,
  get a(){return this._a; },
  set a(n){
    if(n===true || n===false){
      this._a = n;
    }
  }
};
</code></pre>
<p>このオブジェクトobjのプロパティaに真偽値以外は代入できなくするというサンプルでした。これを、真偽値以外を代入しようとするとエラーが発生するようにしてみましょう。それは次のようにすればいいですね。</p>
<pre><code>
var obj = {
  _a : 0,
  get a(){return this._a; },
  set a(n){
    if(n===true || n===false){
      this._a = n;
    }else{
      throw new Error("その値は代入できません！");
    }
  }
};
</code></pre>
<p>こうすることで、間違って変な値を代入したときにエラーが発生しプログラムが止まるので、バグに気付きやすくなります。</p>
<p>また、例えばユーザーが入力した値がおかしかったらエラーをユーザーに通知したい場合はtry-catch文が利用できます。プロパティへの代入でエラーが発生したらそれをcatchして何らかの方法でユーザーに通知すればいいのです。</p>

<h3>finally</h3>
<p>さて、実はtry-catch文には少し異なる形があります。それが<dfn>try-catch-finally文</dfn>です。これは、catchブロックの次に第3のブロックとしてfinallyブロックがあるというものです。finallyエラーが起きた場合でも起きなかった場合でも最終的に実行される部分となります。つまり、以下の文において処理1でエラーが起きなかった場合は処理1→処理3となり、処理1でエラーが起きた場合は処理1（中断）→処理2→処理3となります。</p>
<pre><code>
try{
  処理1
}
catch(e){
  処理2
}
<mark>finally</mark>{
  処理3
}
</code></pre>
<p>また、上の例からcatchを省略した<dfn>try-finally文</dfn>もあります。これは、処理2で何もしないのと同様です。</p>

