<h3>条件分岐</h3>
<p><dfn>条件分岐</dfn>とは、場合場合によって処理を変えるということです。次のサンプルを見てみましょう。</p>
<pre><code>a = 5;
if(a == 3){
    alert("test");
}</code></pre>
<p>実行してみると、<code>alert("test");</code>という行があり、「test」とアラートが表示されるはずなのに、表示されません。</p>
<p><code>a = 5;</code>の行は何かわかっているので、<code>if(a == 3){</code>と<code>}</code>の行が関係がありそうです。</p>
<p>これはifという関数を<code>a == 3</code>という引数で呼び出そうとしているわけではありません。</p>
<p>これは<dfn>if文</dfn>です。</p>

<p>if文は、次のような書き方の文です。</p>
<pre><code>if( <strong>式</strong> ){
    文（いくつでも）
}</code></pre>
<p><small>（ここで「おや、この定義は違うじゃないか、{ 〜 }の部分はBlockであってif文の定義には含まれない」などと思った人は、基礎なんか読んでないでさっさと<a href="./1_1.html">第一章</a>に進んでください。）</small></p>
<p>意味は、「<strong>式</strong>の値が<dfn>真</dfn>ならば、<kbd>{ 〜 }</kbd>の中の文を処理する」というものです。逆に、<dfn>偽</dfn>ならば処理しません。</p>
<p>真であるとは、どういうことかというと、それが<strong>正しい</strong>ということです。逆に、偽であるとは、それが<strong>正しくない</strong>ということです。</p>
<p>では、その式ですが、「a == 3」とあります。この<kbd>==</kbd>ですが、実は新しい<strong>演算子</strong>です。代入演算子の「<kbd>=</kbd>」とは直接関係ありません。</p>
<p>この演算子、左オペランド（左側の値）と右オペランド（右側の値）が<strong>等しければ</strong>、<dfn>true</dfn>を返し、そうでなければ<dfn>false</dfn>を返します。<small>（ただし、いろいろと面倒な事情が裏にあります。詳細なことは基礎編ではやりませんが、詳しくは<a href="./9_7.html">九章第七回</a>を参照してください。）</small></p>
<p>ここで、trueとfalseという単語が出てきました。これは、変数の名前ではなく、値の名前です。</p>
<p>これらは<strong>文字列</strong>と<strong>数値</strong>に続く第三の種類の値で、trueとfalseの2つをあわせて<dfn>真偽値</dfn>といいます。trueは<strong>真</strong>（正しいこと）を表し、falseは<strong>偽</strong>（正しくないこと）を表します。プログラムに<code>true</code>などと書いた場合、変数trueではなく、trueという値を指していることになります。ちなみに、このように何らかの値を直接指し示す書き方を<strong>リテラル</strong>といいます。<code>true</code>や<code>false</code>は<b>真偽値リテラル</b>です。他の種類のリテラルもすでに登場しています。<code>3</code>などの<b>数値リテラル</b>、<code>"あいう"</code>などの<b>文字列リテラル</b>です。</p>
<p>さて、if文に話を戻しましょう。上の例は次のように実行されます。</p>
<pre><code>if(a == 3){
  ↓
if(<mark class="ins">false</mark>){</code></pre>
<p>aはいま5なので、5と3は等しくないので<code>==</code>はfalseが返しました。</p>
<p>式がfalse（偽）となったので、<kbd>{ 〜 }</kbd>の中は実行されません。if文の先にはもう何もないので、プログラムはそこで終了します。結果、何も起こらないというわけです。</p>
<p>もし、<code>a=5;</code>を<code>a=3;</code>にした場合、<code>a == 3</code>はtrueを返すので、<kbd>{ 〜 }</kbd>の中が飛ばされずに実行され、アラートが表示されます。</p>

<h4>関係演算子</h4>
<p><kbd>==</kbd>は、<dfn>関係演算子</dfn>の一種です。これは、算術演算子・代入演算子に続く、演算子の新しい種類です。</p>
<p>関係演算子はその名の通り、2つの値の関係を調べるものです。</p>
<p><code>==</code>のほかに、<code>!=</code><code>&gt;</code><code>&lt;</code><code>&lt;=</code><code>&gt;=</code>などがあります。</p>
<p><code>!=</code>は<code>==</code>の反対で、<strong>等しくないとき</strong>にtrueを返します。逆に等しいときはfalseを返します。</p>
<p><code>&gt;</code><code>&lt;</code>は、見た目の通り不等号です。<code>&gt;</code>は左が右より大きいときに、<code>&lt;</code>は右が左より大きいときに、それぞれ<b>true</b>を返します。</p>
<p><code>&gt;=</code><code>&lt;=</code>は、つまり「≧」「≦」です。それぞれ、大きいとき以外に等しいときも<b>true</b>を返します。</p>
<p>ちなみに、<code>===</code>と<code>!==</code>という、<code>==</code>などに似ている関係演算子もあります。意味も<code>==</code>などと似ていますが、説明はやや難しいのでここではしません。ただ、JavaScriptができる人は<code>==</code>よりも<code>===</code>を好んで使います。<small>（<code>===</code>についての説明は<a href="./9_7.html">第九章第七回</a>を参照してください。）</small></p>

<h4>else</h4>
<p><dfn>else</dfn>は、if文とセットで使われるもので、<strong>偽の場合の処理</strong>を記述します。つまり、ifとelseを使うことで、「真の場合はこの処理、偽の場合はこの処理」といったことが可能になります。次のサンプルを見てみましょう。</p>
<pre><code>a = 20;
if(a &gt;= 10){
    alert(a + "は10以上です");
}else{
    alert(a + "は10より小さいです");
}</code></pre>
<p>やってみると、<code>a &gt;= 10</code>はtrueを返すので、「20は10以上です」というアラートが出ます。aの値をいろいろ変えて試してみましょう。</p>
<p>これは、</p>
<pre><code>if(a &gt;= 10){
    alert(a + "は10以上です");
}</code></pre>
<p>と</p>
<pre><code>else{
    alert(a + "は10より小さいです");
}</code></pre>
<p>の部分に分けて考えることができます。</p>
<p>ちなみに、<kbd>{ 〜 }</kbd>の中が右に寄っているのは、左側に半角スペースを並べて右に寄せています。これは<dfn>インデント</dfn>というもので、プログラムを見やすくするための方法です。一般に、<kbd>{ 〜 }</kbd>の中は一段インデントします。</p>
<p>ifの部分は<kbd>a &gt;= 10</kbd>、つまりaが10以上のときの処理で、elseの部分は<strong>そうでないとき</strong>の処理です。ifの部分の処理をしたときは、当然elseの部分の処理は飛ばされます。</p>
<p>今まで見てきたように、elseの部分はなくても構いません。</p>

<h4>加算演算子による文字列の連結</h4>
<p>上のサンプルで、<code>alert(a + "は10以上です");</code>のような処理があります。alertの引数が<code>a + "は10以上です"</code>なのはいいですが、少し不可解な部分があります。</p>
<p>aの中身は数値ですが、右にあるのは明らかに<strong>文字列</strong>です。今までの説明では<code>+</code>演算子は足し算をする演算子でしたから、オペランドは数値同士でないといけないはずです。</p>
<p>実は、<code>+</code>はもうひとつ機能があります。それは、<strong>2つの文字列を連結する</strong>機能も持っています。例えば<code>"abc" + "def"</code>は<code>"abcdef"</code>という文字列を返します。</p>
<p>今回は左の<code>a</code>は文字列ではなく数値ですが、この場合は数値が文字列に<strong>変換</strong>されて文字列どうしになります。数値から文字列への変換というのは、例えば<code>3</code>は<code>"3"</code>に、<code>5</code>は<code>"5"</code>にというような処理です。変換前は数値、変換後は文字列になっていることを理解してください。</p>
<p>このように<code>+</code>は、オペランドのどちらか一方が文字列なら文字列連結機能を発揮し、そうでなければ通常の足し算機能を発揮するという特殊な演算子なのです。</p>
<p>上のサンプルでは、aが15なら「15は10以上です」、aが25なら「25は10以上です」といった文ができるわけです。</p>

<h4>else if</h4>
<p>実はif文にはまだバリエーションがあります。それは<dfn>else if</dfn>です。これはelseとifの合わせ技で、次のように書きます。</p>
<pre><code>a = 18;
if(a &gt;= 20){
    alert(a + "は20以上です");
}else if(a &gt;= 15){
    alert(a + "は15以上です");
}else if(a &gt;= 10){
    alert(a + "は10以上です");
}else if(a &gt;= 5){
    alert(a + "は5以上です");
}else{
    alert(a + "は5より小さいです");
}</code></pre>
<p><kbd>if(...){ 〜 }</kbd>と<kbd>else{ 〜 }</kbd>の間に、<kbd>else if(...){ 〜 }</kbd>が3つ挟まっています。</p>
<p>この書き方により、<strong>ifで偽だった場合に再び条件分岐する</strong>ことが可能になります。</p>
<p>流れとしては、まず最初のifの式を判断します。<strong>真</strong>だった場合その中の処理を実行し、一連の処理を終わります。</p>
<p><strong>偽</strong>だった場合、次のelse ifの式を判断し、同じように真だった場合は処理を実行して終わります。</p>
<p>こうして真になるまでどんどん進んでいき、最終的にずっと偽でelseまでたどり着いた場合にelseの処理を実行します。</p>
<p>もちろん、ifとelse ifだけでelseが無いという形でも構いません。</p>
<p><small>（ちなみに、else ifは文法上はelse節のBlockの代わりにif文を入れた形になります。何を言っているのか気になる人は調べてみましょう。しかし、調べなくても上に書いてあることが分かればこの先問題ないでしょう。）</small></p>
