<h3>関数もオブジェクトだ</h3>
<p>「オブジェクト」について多少わかってきたので、ここで<b>関数</b>という存在を見直してみましょう。</p>
<p>実は、基本的にJavaScriptでは全てのものが<strong>オブジェクト</strong>か<strong>プリミティブ</strong>です。関数はどちらに入るのでしょう。</p>

<p>実は<strong>関数もオブジェクトです</strong>。ただ、すごく特殊なオブジェクトであるのは分かると思います。「<code>()</code>」をつけると<strong>呼び出す</strong>ことができるというのは関数だけがもつ特徴です。</p>
<p>実際、配列なんかよりももっと特殊なオブジェクトという位置づけです。しかし、オブジェクトであることは確かです。次のサンプルを見てみましょう。</p>
<pre><code>
function aaa(){
  alert("test");
}
aaa();

alert(aaa);
</code></pre>
<p>アラートを表示するだけの関数aaaを作り、それを呼び出しています。よって、「"test"」のアラートが表示されます。</p>
<p>次の行でやっていることはなんでしょうか。<code>aaa</code>を表示しています。</p>
<p>この<code>aaa</code>というのは関数ですが、より正確にいうと、<strong>関数が入った変数</strong>です。つまり、関数定義というのは、新しい関数を作り、それを変数に入れる作業だったのです。<small>（ここで、「作り」というキーワードに反応してもらえると、とてもよいです。オブジェクトを作るのと同様、関数も作るものです。）</small></p>
<p>そして、関数とはいえ、ある種のオブジェクトですから、好きなように扱うことができます。よって、alertで表示してみることもできるのです。そして、出るアラートには、関数aaaの中身が表示されています。</p>
<p>実は、関数をアラートで表示すると、その中身が表示されるようになっています。</p>

<h4>もともとある関数の中身</h4>
<p>次のようにすると、どうなるでしょうか。 </p>
<pre><code>alert(alert);</code></pre>
<p>ややこしいですが、<code>alert</code>というのは、もともとある関数でした。上で述べたように、関数といえども、所詮は変数に入った何かです。つまり、もともとある関数も、実は変数に入っています。<code>alert</code>は、alertという名前の変数に入った関数です。</p>
<p>となると、先ほどと同様、変数alertが表す関数の中身を表示することができます。</p>
<p>これでalert関数の中身が見られるはずです。ブラウザによって違いがあるかもしれませんが、<code>"function alert() { [native code] }"</code>と表示されると思います。</p>
<p><code>[native code]</code>というのは、この関数の実行はブラウザの内部処理で行われる（ので、JavaScriptで書かれた定義がない）ということを意味しています。</p>

<h3>メソッド</h3>
<p>次に、<dfn>メソッド</dfn>というものを解説します。そんなに難しいものではなく、<strong>プロパティのうち、関数であるもの</strong>のことをメソッドといいます。つまり、プロパティの一種です。</p>
<pre><code>var a = {};
a.abc = <mark>test</mark>;
a.abc();

function test(){
    alert("test");
}</code></pre>
<p>やっていることは難しくありません。1行目でaに<code>{}</code>を代入していますが、これは「プロパティを1つも持たないオブジェクト」です。「<code>プロパティ名 : 値</code>」の組が1つもないわけですね。</p>
<p>そして、その後a.abcにtestを代入しています。これは、当然aのプロパティabcです。testは関数であり、つまりオブジェクトでしたから、<em>同じ</em>関数がa.abcに代入されます。つまり、<code>a.abc</code>を呼び出すのは<code>test</code>を呼び出すのと同じです。<small>（詳しい方は、厳密には少し違うということをご存知だと思いますが、それはここでは解説しません。）</small></p>
<p>なので、次の行ではそれを呼び出しています。ちゃんと<code>"test"</code>と表示されるのが分かります。</p>
<p>もともとメソッドの本当の意味はこんなところには無いのですが、それは今回は解説しません。オブジェクトにくっついてる関数をメソッドと呼ぶということは覚えておきましょう。</p>
<p>ちなみにこのように、関数定義は、使う場所より後ろに書いてあっても機能します。</p>

<h3>関数式</h3>
<p>関数を作る方法が、実は他にもあります。それは、次のようにする方法です。</p>
<pre><code>var aaa = function (){
    alert("test");
};

aaa();
        </code></pre>
<p>1行目がaaaに何かを代入している文なのは分かると思いますが、代入されているものは</p>
<pre><code>function (){ alert("test"); }</code></pre>
<p>です。実はこれは、関数を定義するときに使うやつの、関数名を省略した形であるのがわかると思います。</p>
<p>これは、<em>関数を新しく作る</em>式です。オブジェクトリテラルがオブジェクトを作り、配列リテラルが配列を作るのと同じです。なので、これを関数リテラルと呼ぶことも可能かもしれませんが、そう呼ばれているのはあまり見ません。それよりは、<dfn>関数式</dfn>という呼び方が一般的なようです。</p>
<p><b>式</b>というのは、より複雑な式の一部として使うことができるということです。例えば、次のように、関数呼び出しの引数に関数式を入れることもできます。</p>
<pre><code>alert(<mark>function(){ alert("test"); }</mark>);</code></pre>
<p>実は、上で解説したメソッド作りなんかはこの記法が主流です。つまり、<code>test</code>という関数を先に定義しておくかわりに、次のように直接関数式で関数を作って代入します。</p>
<pre><code>var a = {};
a.abc = function(){
  alert("test");
};
        </code></pre>
<p>注意するべきなのは、あくまで代入文なので、<code>function(){ 〜 }</code>の後には「<code>;</code>」が付いているいう点です。</p>
<p>また、次のようにメソッドを定義することもできます。</p>
<pre><code>var a = {
  abc: function(){ alert("abc"); },
  aaa: function(){ alert("aaa"); }
};
a.abc();
a.aaa();
</code></pre>
<p>最初にオブジェクトを作る時点で、既にabcとaaaのメソッドを作っています。</p>
<div class="sidenote">
  <p>最近のJavaScript (ES2015)では、オブジェクトリテラル内でメソッドを定義する場合、次のように簡略化した記法があります。</p>
  <pre><code>
  var a = {
    abc(){ alert("abc"); },
    aaa(){ alert("aaa"); }
  };
  </code></pre>
</div>
<p>次のこれは分かるでしょうか。</p>
<pre><code>var a = function(){
    return function(){
        alert("test");
    };
};
a()();
        </code></pre>
<p>これが正しく理解できれば、かなり力がついているといえるでしょう。</p>
<p>まず、関数aを見てみます。すると、関数aの中でまた関数式があるのが分かります。その前には「<code>return</code>」とあります。戻り値を返すreturnです。</p>
<p>これは、関数aが<code>function(){
  alert("test");
}</code>
という関数を返すだけの関数であることを表しています。この関数（正確には、この関数式によって作成される関数）を関数Aと呼びましょう。関数Aは、ただアラートを表示するだけですね。</p>
<p>ここで最後の謎の文を見てみると、まず「<code>a()()</code>」のうち最初の「<code>a()</code>」が処理されます。つまりは関数aを呼び出しているのです。</p>
<p><code>a()</code>の返り値は関数Aです。戻り値が返されるとそれに置き換わるので、この文は、擬似的にですが次のようになります。</p>
<pre><code><mark class="ins">関数A</mark>();</code></pre>
<p>したがって、関数Aが呼び出されてアラートが表示されたというわけです。</p>

<p>もっとも、さすがにわかりにくすぎるので例えばこんなふうに書きます。</p>
        <pre><code><mark class="ins">(</mark>a()<mark class="ins">)</mark>();</code></pre>
<p>最初の<code>a()</code>が<code>( 〜 )</code>で囲まれています。この括弧は計算の優先順位を高めるものです。<code>(3+5)*2</code>のような場合の括弧と同じです。</p>
<p>今回の場合、もともとこの部分が先に計算されるので意味がないように思えますが、見た目少し分かりやすくなります。このように、見た目を分かりやすくするために括弧が使われることもあります。</p>

<h4>無名関数</h4>
<p>また、次のような書き方がそもそもできます。</p>
<pre><code>(function(){ alert("test"); })();</code></pre>
<p>ここでは、関数A（を返す関数式）がベタ書きしてあり、それを関数呼び出しの<code>()</code>で呼び出しています。</p>
<p>このとき、関数Aは、関数式によって作成されたあと、変数に代入される間もなく呼びだされ、その役目を終えます。この関数は変数に入らなかったということは、<strong>名前がつけられていない</strong>ということです。このような関数を<dfn>無名関数</dfn>などといいます。</p>

<p>関数については、今回さらっと紹介しましたが、さらに紹介するべき事柄が多くあります。特に、<a href="9_5.html">九章第五回</a>で詳しく解説しています。</p>

