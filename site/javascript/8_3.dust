<h3>Selectionとは</h3>
<p>前回でRangeの機能はだいたい解説しました。しかし、正直なところ、これをいつ使う機会があるのか分からないという人もいるかもしれません。しかし、<dfn>Selection</dfn>というものを使うときにはRangeが大きく関わってきます。</p>
<p>それでは、この<strong>Selection</strong>とは何なのでしょうか。</p>
<p>これは、<strong>ユーザーが選択した範囲</strong>を表すものです。皆さんもブラウザ上でテキストを選択するという操作をしたことがあると思います。これは範囲なので、ここでRangeが登場するわけです。</p>

<h4>Selectionの取得</h4>
<p>Selectionは、Rangeとは違うオブジェクトです。Selectionを取得するには、<dfn>window.getSelection</dfn>という関数を使います。引数はありません。</p>
<pre><code>var selection = <strong>window.getSelection</strong>();</code></pre>

<p>これでSelectionオブジェクトを取得できました。しかし、なぜ直接選択範囲のRangeを取得できないか疑問に思うかもしれません。これにはいくつか理由がありますが、「選択していない場合」や「2つ以上選択している場合」がありえるというのが理由の1つです。</p>
<p>それでは、このSelectionオブジェクトからRangeを取得するには、メソッド<dfn>getRangeAt</dfn>を使います。これは数値の引数を1つ持ち、<strong>何番目のRangeを取得するか</strong>を指定します。</p>
<p>基本は、1つしかRangeがないので0ですが、もし2つ以上の範囲を同時に選択している場合に1以上を使用することがあるかもしれません。ちなみに、今何個Rangeがあるかは、<dfn>rangeCount</dfn>というプロパティでわかります。Rangeを処理するときは、これが0かどうかで処理を分ける必要がでてきます。0の場合、そもそも選択していないのでRangeを取得できません。</p>

<h3>Selectionの機能</h3>
<p>よく使う機能は、<strong>SelectionからRangeを除去する機能</strong>です。選択部分をSelectionから除去すると、実際に選択が解除されます。</p>
<p>Selectionのメソッドで、<dfn>removeRange</dfn>というメソッドがあります。これは、<strong>引数で指定したRangeをSelectionから除去する</strong>というものです。このように除去すべきオブジェクトを直接指定するものには、かつて<a href="2_4.html">removeChild</a>がありましたね。</p>
<p>このメソッドの場合、getRangeAtで取得したRangeを引数に指定して削除することになるでしょう。</p>
<pre><code>
var sel = window.getSelection();
if(sel.<mark>rangeCount</mark> &gt; 0){
  //Rangeが最低一つある場合
  sel.<strong>removeRange</strong>(sel.<mark>getRangeAt</mark>(<mark>0</mark>));
}
</code></pre>
<p>ただ、この方法はすこし面倒ですね。場合によってはもっと楽な方法があります。それは<dfn>removeAllRanges</dfn>です。これは、引数無しで、全てのRangeを除去するというものです。</p>
<pre><code>
sel.<strong>removeAllRanges</strong>();
</code></pre>

<h3>Selectionの実践</h3>
<p>さて、Selectionを使えば、Rangeの機能を活かすことができそうです。ちょっとやってみましょう。</p>
<p>しかし、今までのようにbody要素の最後にscript要素を書くパターンだと、ページを読み込んだ瞬間にそれが実行されてそれっきりです。</p>
<p>Selectionはブラウザが選択した範囲をいじるものですから、読み込まれた瞬間に実行されても選択できません。そこで、選択したときを見計らって実行する必要があります。そういうときに使うのが、そう、<strong>イベント</strong>です。忘れた人は、<a href="3_1.html">三章</a>を見るとよいでしょう。</p>

<p>今回はうってつけなイベントがあります。それは<strong>selectionchange</strong>です。その名の通り、選択の状態が変わったときに発生するイベントです。これはdocumentで発生するイベントなので、documentにイベントハンドラを登録しましょう。</p>
<pre><code>
document.addEventListener('<mark>selectionchange</mark>',function(ev){


},false);
</code></pre>
<p>というようにします。さて、これを基本にやっていくわけですが、まずは簡単に、「選択しても消える」というのをやってみましょう。これは簡単で、removeAllRangesを実行するだけです。</p>
<pre class="language-html"><code>
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;

    &lt;p&gt;あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをん&lt;/p&gt;
    &lt;p&gt;あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをん&lt;/p&gt;
    &lt;p&gt;あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをん&lt;/p&gt;

    &lt;script type="text/javascript"&gt;
      document.addEventListener('<mark>selectionchange</mark>',function(ev){
        <mark class="ins">var selection = <mark>getSelection</mark>();
        selection.<mark>removeAllRanges</mark>();</mark>
      },false);
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>これの挙動は、そもそもマウスで選択しようとしても選択できないという挙動になります。また、Ctrl+Aなどでページのテキストを選択しようとしてもできません。この理由は、マウスでの選択を開始した瞬間にそれ用のRangeが生成されてSelectionに追加されるので、選択の状態が変わったと見なされselectionchangeイベントが発生したと見なされるからです。</p>
<p>選択が終わった瞬間にイベントが起動して選択範囲を消し去るということをしたい気分になりますが、そのようなイベントは存在しませんので、やりたい場合には工夫が必要になります。</p>
<p>ところで、余談ですが、このサンプルを見て「サイトにコピーして欲しくない文章があるから、これを使って対策しよう」とは思いませんよね。ソースを見れば簡単にコピーされるのですから。そんなことを思っているうちはまだまだ初心者なのです。</p>

<p>では、次に「選択した部分がページから消える」というのを作ってみましょう。前回、Rangeの<a href="8_2.html#anchor-delete-contents">deleteContents</a>を解説したので、選択部分のRangeを取得してこれを使えば消せそうです。</p>
<p>ここで先ほど述べた「選択が終わった瞬間」を検出するための工夫が必要になります。しかし、ここではそれは本題ではないので、雑ですが簡単な工夫で乗り切ることにします。具体的にはselectionchangeイベントの代わりに<strong>mouseup</strong>イベントを使います。これは名前の通り、マウスのボタンが上がった瞬間に発生するイベントです。逆にマウスのボタンが押された瞬間のイベントはmousedownです。</p>
<pre class="language-html line-numbers" data-line="3-8"><code>
&lt;script type="text/javascript"&gt;
  document.addEventListener('mouseup',function(ev){
    var selection = getSelection();
    if(selection.rangeCount &gt; 0){
      var range = selection.getRangeAt(0);
      range.deleteContents();
      selection.removeAllRanges();
    }
  },false);
&lt;/script&gt;
</code></pre>
<p>今回はRangeを取得して扱うので、マウスを押したけど選択していない場合を考慮し、rangeCountをチェックしてRangeが取得できる場合のみ処理をしています。</p>

<h3>サンプル：選択部分のスタイル操作</h3>
<p>さらに、もう少し工夫がいる例として、「選択した部分の背景色が変わる」というのをやってみましょう。</p>
<p>色を変えるには、<strong>スタイルシート</strong>を使うことになります。今回の場合、background-colorプロパティを変えればいいですね。</p>
<p>さて、これは今までのより少し複雑です。ちょっと考えてみましょう。</p>

<h4>まとめて囲む</h4>
<p>まず思いつくのが、background-colorを指定した要素を用意し、選択部分全部そこにいれてしまうというものです。例えば、span要素で囲むとすると、</p>
<pre class="language-html"><code>
abcde&lt;em&gt;fghijklmn&lt;/em&gt;opqrstuvwxyz
   <mark>|---------------------|</mark>
</code></pre>
<p>というように選択したとすると、</p>
<pre class="language-html"><code>
abc<mark class="ins">&lt;span&gt;</mark>de&lt;em&gt;fghijklmn&lt;/em&gt;opq<mark class="ins">&lt;/span&gt;</mark>rstuvwxyz
</code></pre>
<p>となるということです。</p>

<p>実は、前回紹介しませんでしたが、Rangeにはまさにこれ用のメソッドがあります。<dfn>surroundContents</dfn>です。引数に新しい親となる要素を渡すと、Rangeで囲まれた部分が全部与えられた要素の子となり、Rangeで囲まれた部分がその要素で置換されます。</p>
<pre class="line-numbers" data-line="5-10"><code>
document.addEventListener('mouseup',function(ev){
  var selection = getSelection();
  if(selection.<mark>rangeCount</mark> &gt; 0){
    var range = selection.getRangeAt(0);
    //新しいspan要素を作る
    var newspan = document.createElement('span');
    //background-colorを設定
    newspan.style.backgroundColor="<mark>#ffff00</mark>";

    range.<strong>surroundContents</strong>(newspan);
  }
},false);
</code></pre>
<p>テキストを適当に選択してみると、いい感じに背景が変わってくれます。</p>
<p>しかし、まだまだ不完全です。今回のサンプルには3つのp要素がありましたが、2つ以上のp要素にまたがって選択すると、なんとエラーが起きます。このエラーはsurrondContentsが起こしたもので、原因はつまりこういうことです。</p>
<pre class="language-html"><code>
&lt;p&gt;......<mark>...&lt;/p&gt;&lt;p&gt;...</mark>.....&lt;/p&gt;
</code></pre>
<p>のようにRangeで選択されているとき、これを囲もうとすると</p>
<pre class="language-html"><code>
&lt;p&gt;......<mark class="ins">&lt;span&gt;</mark><mark>...&lt;/p&gt;&lt;p&gt;...</mark><mark class="ins">&lt;/span&gt;</mark>.....&lt;/p&gt;
</code></pre>
<p>となります。これは明らかにHTMLの文法に違反しており、木構造的に見ても囲むことは不可能です。このように、囲むことができない場合にはsurroundContentsはエラーを出してくるのです。これは仕方ないことですが、surrondContentsを使う際は注意しましょう。</p>
<p>ちなみに、動作しないのは仕方ないにしても、いちいちエラーを出すのが格好悪いという場合には、「try-catch構文」（機会があれば紹介するかもしれません）を使えばなんとかなります。</p>

<p>さて、このような場合でもちゃんと色を変化させたい場合は、surrondContentsを使わずにやることになります。囲むという作業を分解すると、「抜き出す」「親で囲む」「親を戻す」という3つの作業に分解することができます。これをそれぞれやればいいのです。</p>
<p>まず抜き出すのは<strong>extractContents</strong>を使います。戻り値は<strong>DocumentFragment</strong>でした。このextractContentsは、どんな範囲であろうとうまく抜き出してくれます。</p>
<p>次に親で囲むのは、上と同じようにspan要素を作った後、戻り値のDocumentFragmentをappendChildするだけです。DocumentFragmentは「親がいない兄弟」のような感じなので、抜き出した部分がちゃんと全部span要素に入ってくれます。</p>
<p>最後に、前回紹介した<strong>insertNode</strong>で抜き出した場所にspan要素を戻します。ここでは、隙間に新しい要素を埋めるだけなので、やはり問題は起こりません。</p>
<p>つまり、こうです。</p>
<pre class="line-numbers" data-line="5-12"><code>
document.addEventListener('mouseup',function(ev){
  var selection = getSelection();
  if(selection.<mark>rangeCount</mark> &gt; 0){
    var range = selection.getRangeAt(0);
    //新しいspan要素を作る
    var newspan = document.createElement('span');
    //background-colorを設定
    newspan.style.backgroundColor="<mark>#ffff00</mark>";

    var df = range.<mark>extractContents</mark>();
    newspan.<mark>appendChild</mark>(df);
    range.<mark>insertNode</mark>(newspan);
  }
},false);
</code></pre>
<p>これでも先ほどのsurroundContentsと同じようなことができています。しかし、実はこれにも問題が残っています。さっきのようにp要素をまたいで選択すると、エラーは起きないものの、p要素が増殖してしまいます。もっとも、それ以前にもう1つ問題があるのですが。</p>
<p>p要素が増殖する原因は、extractContentsの動作にあります。といっても、これも仕方ないことです。</p>
<pre class="language-html"><code>
&lt;p&gt;.....<mark>.......&lt;/p&gt;......…</mark>
        <mark>|----------------…</mark>
</code></pre>
<p>というような範囲の状態でextractContentsをすると、開始点より左の部分も確かにp要素の中、右もp要素の中、ということを両立するために、</p>
<pre class="language-html"><code>
&lt;p&gt;.....<mark class="ins">&lt;/p&gt;</mark><mark>&lt;p&gt;.......&lt;/p&gt;......…</mark>
            <mark>|-------------------…</mark>
</code></pre>
<p>というようにp要素が分割されて抜き出されます。この動作は前回説明した通りですね。</p>
<p>右の部分をspanで囲んで戻すと、</p>
<pre class="language-html"><code>
&lt;p&gt;.....&lt;/p&gt;<mark class="ins">&lt;span&gt;</mark>&lt;p&gt;.......&lt;/p&gt;......…<mark class="ins">&lt;/span&gt;</mark>
</code></pre>
<p>となり、1つだったp要素が2つに増えています。</p>
<p>ちなみに、「それ以前の問題」とは、そもそもspan要素の中にp要素が入っていることです。これはいけません。</p>

<p>さて、原因が分かったところで、これの解決は次回ということにします。</p>

