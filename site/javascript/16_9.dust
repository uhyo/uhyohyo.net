<p>今回紹介する<b>テンプレート文字列</b>は、ES2015で追加された新しい文字列リテラルです。まずサンプルを見ましょう。</p>
<pre><code>
var name = '山田太郎';

console.log(`こんにちは、${name}さん`); // "こんにちは、山田太郎さん"
</code></pre>
<p>このように、テンプレート文字列は<code>``</code>（バッククオート）で囲まれた文字列です。一番の特徴は、<code>${ <var>式</var> }</code>の形で文字列中に値を埋め込める点です。上の例では、文字列中の<code>${name}</code>の部分が<code>"山田太郎"</code>で置き換えられています。これは言わずもがな、<code>name</code>という式が<code>"山田太郎"</code>となるからです。</p>
<p>今回は文字列を埋め込みましたが、数値などの値を入れた場合は文字列に変換されます。</p>
<pre><code>
var access = 123;

console.log(`今日のアクセス数は${access}です。`); // "今日のアクセス数は123です。"
</code></pre>
<p>これは単純に便利ですね。今までだと文字列の連結を用いて<code>'今日のアクセス数は' + access + 'です。'</code>のようにする必要がありました。</p>

<p>また、テンプレート文字列はいまどきの機能なので他にも便利な点があります。それは、<em>リテラル中で改行してもよい</em>という点です。この改行は文字列中に<b>LF</b>（<code>\n</code>相当）として現れます。</p>
<pre><code>
var str1 = <mark>`foo
bar`</mark>;

console.log(str1);
console.log(str1 === 'foo\nbar'); // true
</code></pre>

<h3>タグ付きテンプレート文字列</h3>
<p>テンプレート文字列にはもうひとつ機能があります。それが<dfn>タグ付きテンプレート文字列</dfn>です。これは次のような形をしています。<code><var>関数</var> `文字列……`</code></p>
<p>こうすると、その関数により文字列を加工することができます。まず具体例を見てみましょう。</p>
<pre><code>
function tag(parts, num1, num2){
  return parts[0] + num2 + parts[1] + num1 + parts[2];
}

console.log(<mark>tag</mark>`foo ${123} bar ${456} baz`); // "foo 456 bar 123 baz"
</code></pre>
<p>これはかなり無意味な例ですが、有意義で簡単な例が思いつかなかったので許してください。</p>
<p>タグ付きテンプレート文字列が作られると、タグである関数が呼ばれます。その際、リテラルの部分は<code>${ ... }</code>の中の値とそれ以外の文字列部分に分割されます。文字列部分は第1引数に配列として与えられます。上の例では引数partsに<code>["foo ", " bar ", " baz"]</code>という配列が入っています。そして、<code>${ ... }</code>で与えられた値は第2引数以降に順番に入っています。今回の例ではnum1が123、num2が456です。これらは数値ですね。</p>
<p>今回の関数tagは1つ目の<code>${ ... }</code>の中身と2つ目の<code>${ ... }</code>の中身を入れ替えた文字列を返すという何の役にもたたない例です。</p>
<p>もしタグ関数が文字列でない値を返した場合、タグ付きテンプレート文字列の結果もその通りとなり、文字列でない場合があります。</p>
<p>要するにほとんどただの関数呼び出しなので、使いたいときがあったら使うとよいでしょう。</p>

<h3>String.raw</h3>
<p>もともと用意されているタグ用の関数として<dfn>String.raw</dfn>があります。これは<em>エスケープシーケンスを処理せずにそのままにした文字列を返す</em>というものです。</p>
<pre><code>
console.log(String.raw`foo<mark>\n</mark>bar こんに<mark>\u28ff</mark>ちは`); // foo\nbar こんに\u28ffちは
</code></pre>
<p>テンプレート文字列も含め、通常の文字列リテラルではエスケープシーケンスは処理されてしまうので、バックスラッシュを含んだ文字列を含むには次のようにする必要がありました。</p>
<pre><code>
console.log('foo<mark>\\</mark>nbar こんに<mark>\\</mark>u28ffちは');
</code></pre>
<p>バックスラッシュを大量に含んでいる場合などはこのString.rawを使うと楽です。</p>

<p>これと同じ動作をするタグ関数を自分で作ることも可能ですが、それには文字列部分に対してエスケープシーケンスが処理される前の文字列を取得する必要があります。これはタグ関数の第1引数（上の例だとparts）についているプロパティ<b>raw</b>として与えられます。これはpartsと同様に文字列の配列であり、エスケープシーケンスが処理されていないという点で異なります。</p>

<p>テンプレート文字列の話題は以上です。タグ付きはあまり使わないにしても、<code>${ ... }</code>により値を埋め込めるのは便利です。使う機会は多いでしょう。</p>

