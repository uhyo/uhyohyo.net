<p>継承については<a href="9_3.html">九章第三回</a>で解説しましたが、じつはあれはもう少しましにできます。第十一章のテーマはES5なので、ES5で可能になったよりよい継承の方法について説明します。</p>

<p>継承の仕組みは既に説明しました。すなわち、各インスタンスはコンストラクタのprototypeに結びついていて、インスタンスのプロパティを探すときは、自分のプロパティに無かったらprototypeのプロパティを探しに行くのでしたね。</p>
<pre><code>
function Teki(n){
  this.name = n;
}
//現れる
Teki.prototype.appear = function(){
  console.log(this.name + "があらわれた！");
};

var zako1 = new Teki("ザコ敵");	//敵をつくる
zako1.appear();	//現れる

console.log(zako1.name);	// "ザコ敵"
console.log(zako1.hasOwnProperty("name"));	// true
console.log(zako1.hasOwnProperty("appear"));	// false
</code></pre>
<p>このzako1はnameとappearという2つのプロパティがありますが、前にもみたようにnameとappearでは少し性質が違いましたね。nameを代入しているのはTekiコンストラクタ内です。</p>
<p><code>var zako1=new Teki("ザコ敵");</code>
の行で
<code>this.name = n;</code>
<p>として代入しています。このthisはnewの返り値となるべきオブジェクトで、zako1になるものです。つまり、nameプロパティはzako1に直接くっついているわけです。</p>
<p>一方、
<code>zako1.appear=...</code>
というような記述はありませんね。appearの実態はTeki.prototype.appearです。</p>
<p id="anchor-object-getprototypeof">ここでまず、新しいメソッド<dfn>Object.getPrototypeOf</dfn>を紹介します。これはインスタンスを引数に渡すと、対応するprototypeオブジェクトが返ってくるわけです。つまり、zako1の場合はTekiのインスタンスですから、Teki.prototypeが返ってくるわけです。</p>
<pre><code>console.log(Object.<mark>getPrototypeOf</mark>(zako1) === Teki.prototype);	// true</code></pre>

<p>このように、インスタンスの側からprototypeを取得できるのは、今までに無かったES5の新しい機能です<small>（ただし、非標準の__proto__というやつはありました）</small>。</p>
<p>ついでに、<dfn>isPrototypeOf</dfn>も紹介しておきます。これはObject.prototypeにあるメソッドなので、全てのオブジェクトが持っています。これは、そのオブジェクトが、引数に渡したオブジェクトのprototypeであるかを判定して真偽値を返します。いま、zako1のプロトタイプに当たるのはTeki.prototypeなので次のようになります。</p>
<pre><code>
console.log(Teki.prototype.<mark>isPrototypeOf</mark>(zako1));	// true
</code></pre>
<p>また、このメソッドはプロトタイプチェーンをさかのぼって検証してくれます。例えば次のサンプルです。</p>
<pre><code>
//敵を作る
function Teki(){
}

//ドラゴンを作る
function Dragon(){
  Teki.apply(this,arguments);
}
Dragon.prototype = new Teki;

var boss = new Dragon();	//インスタンスをつくる

console.log(Dragon.prototype.<mark>isPrototypeOf</mark>(boss));	// true
console.log(Teki.prototype.<mark>isPrototypeOf</mark>(boss));	// true
</code></pre>

<p>これは、bossはDragon.prototypeにあるメソッドを使えるし、Teki.prototypeにあるメソッドも使えると解釈することができます。実はこれは<a href="9_3.html#anchor-instanceof">instanceof</a>を使っても同じことができますね。instanceofとの違いは、コンストラクタに対して使うかprototypeオブジェクトに対して使うかですね。</p>
<pre><code>
console.log(boss instanceof Dragon);	// true
console.log(boss instanceof Teki);	// true
</code></pre>

<p>さて、ここでいよいよ本題となる継承がでてきました。継承にかかわるのはDragonコンストラクタ内の
<code>Teki.apply(this,arguments);</code>
と、プロトタイプの
<code>Dragon.prototype = new Teki;</code>
のところでしたね。</p>
<p>実は、後者に問題があるのです。そもそもコンストラクタというのは、そのオブジェクトが作られたときの処理を表すものでしたね。ですから、例えばTekiコンストラクタにログを残す処理を書いてみましょう。</p>
<pre><code>
function Teki(){
  <mark class="ins">console.log("新しい敵オブジェクトができました。");</mark>
}

//ドラゴンを作る
function Dragon(){
  Teki.apply(this,arguments);
}
Dragon.prototype = new Teki;

var zako = new Teki();
var boss = new Dragon();
</code></pre>
<p>これを実行すると、「新しい敵オブジェクトができました。」というログは<em>3回</em>でますね。一方、敵オブジェクトを作ったのはzakoとbossの2つだけのはずです。もう1回は何なのでしょうか。</p>
<p>もうお分かりだと思いますが、
<code>Dragon.prototype = new Teki;</code>
の行で一度Tekiのインスタンスを作っていましたね。これが一番最初のログだったのです。</p>
<p>しかしこれは困りますよね。コンストラクタが呼ばれた時にもっと複雑な処理をしたい場合、実際にインスタンスを作ったわけではないのに（プログラム上は確かに作ってますが意味合いが違いますよね）コンストラクタが呼ばれたら不都合だという場合も多いことでしょう。</p>
<p>そこで、ES5ではこの問題を解決する方法があります。それが<dfn>Object.create</dfn>です。これは第一引数にプロトタイプオブジェクトを指定すると、それをプロトタイプに持つオブジェクトを作成します。つまりこんな具合です。</p>
<pre><code>
var zako2=<mark>Object.create</mark>(Teki.prototype);
</code></pre>
<p>このzako2を調べると、実はTekiのインスタンスになっています。</p>
<pre><code>
console.log(Teki.prototype.isPrototypeOf(zako2));	// true
</code></pre>

<p>ただし、newを使って作った場合とObject.createを作った場合では一つ違いがあります。Object.createの場合は<strong>コンストラクタが呼ばれません</strong>。つまり、さっきの<code>var zako2=Object.create(Teki.prototype);</code>を実行しても「新しい敵オブジェクトができました。」というログは出ません。</p>
<p>newを使っていないのにインスタンスができるというのは不思議かもしれませんが、そもそもオブジェクトが他のコンストラクタのインスタンスであるかどうかは、オブジェクトと関連付けられたprototypeオブジェクトのみによって特徴付けられます。よって、newを使わなくてもprototypeを制御できればインスタンスを作ることができるのです。</p>

<p>当然ながら、Object.createでインスタンスを作ったあとに別にコンストラクタを呼べば、newを使わずにnewの挙動を再現することができます。</p>
<pre><code>
var zako2=Object.create(Teki.prototype);
Teki.call(zako2);
</code></pre>
<p>2行目の<a href="9_3.html">call</a>は、Teki関数を、zako2をthisとして引数なしで呼べという意味ですね。コンストラクタはnewで呼ばれるときはthisの値が特別になっていたので、call（またはapply）を使ってそれを再現すればできます。</p>

<p>さて、このObject.createを使えば、上述の問題を回避して継承することができます。具体的には、</p>
<pre><code>
Dragon.prototype = <strong>Object.create</strong>(Teki.prototype);
</code></pre>
<p>とすればいいのです。</p>

<p>ちなみに、Object.createには第二引数もあります。これは<a href="11_4.html#anchor-object-defineproperties">Object.defineProperties</a>の第二引数と同じ形のオブジェクトを渡すことができます。Object.createに第2引数が渡された場合、インスタンスを作った後に第二引数で指定されたようにプロパティをセットして返してくれるのです。これを使えば、Dragonのインスタンスが持つメソッドを定義するときに<code>Dragon.prototype.attack=...</code>というように代入していくのではなく、<code>Object.create</code>で全て済ませるやり方も可能です。例えばこんな感じです。</p>
<pre><code>
function Dragon(){
  Teki.apply(this,arguments);
}
Dragon.prototype=Object.create(Teki.prototype,{
  attack:{
    configurable:true,
    value:function(){
      console.log("ドラゴンのこうげき！！");
    },
  },
});
</code></pre>

<h3>constructorプロパティ</h3>
<p>最後に、継承をするときは<dfn>constructorプロパティ</dfn>についても気をつける必要があります。これについても紹介します。</p>
<p>実は、constructorプロパティを使えばインスタンスのコンストラクタが何か調べることができます。例えば次のコードです。</p>
<pre><code>
//敵を作る
function Teki(){
}

var zako=new Teki();
console.log(zako.<mark>constructor</mark> === Teki);	// true
</code></pre>

<p>しかし、zakoにconstructorなんてプロパティを付けた覚えはありませんよね。ということは、これはprototypeにあるプロパティです。</p>
<pre><code>
console.log(Teki.prototype.hasOwnProperty("constructor"));	// true
</code></pre>
<p>実は、関数が作られた時点で、その関数のprototype.constructorにはその関数自身が自動的に入っている状態になります。</p>
<p>ところが、継承した場合を見てみましょう。</p>
<pre><code>
function Teki(){
}
function Dragon(){
  Teki.apply(this,arguments);
}
Dragon.prototype=Object.create(Teki.prototype);

var boss=new Dragon();
console.log(boss.constructor);
</code></pre>
<p>ここではDragonが出てきて欲しいのに、表示されるのはTekiです。これはなぜかというと、最初関数DragonができたときはちゃんとDragon.prototype.constructorにはDragonが入っていたのですが、直後にDragon.prototypeに別のオブジェクトを代入してしまっていますね。代入されたのはTekiのインスタンスでしたから、Dragon.prototype.constructorを調べることはTekiのインスタンスのconstructorプロパティを調べるのと同じです。だからTekiがでたわけです。</p>
<p>とはいえ、これだと困りますね。正しくDragonが表示されるようにする必要があります。そのためには、自分で代入しましょう。</p>
<pre><code>
function Teki(){
}
function Dragon(){
  Teki.apply(this,arguments);
}
Dragon.prototype=Object.create(Teki.prototype,<mark class="ins">{
  <mark>constructor</mark>:{
    value:Dragon
  }
}</mark>);

var boss=new Dragon();
console.log(boss.constructor);
</code></pre>
<p>こうすれば、boss.constructorがDragonとなり正しくなります。</p>

<p>結局、今回のポイントは2つでした。継承するときは<code>Object.create</code>を使うことと、constructorに正しいコンストラクタを入れてあげることです。</p>

